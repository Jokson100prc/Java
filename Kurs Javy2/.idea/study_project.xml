<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <Course>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Kurs języka Java dla SDA" />
          <option name="fromZip" value="true" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="name" value="Kurs Javy" />
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="items">
            <list>
              <Section>
                <option name="courseId" value="0" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Java zaawansowana" />
                <option name="position" value="0" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="units" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Typ wyliczeniowy" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;Typ wyliczeniowy służy do przechowywania skończonej liczby wartości. Typowym przykładem zastosowania&#10;typu wyliczeniowego są dni tygodnia, miesiące, figury szachowe itd.&#10;&lt;/p&gt;&#10;&lt;p&gt;Do definiowania wyliczeń służy słowo kluczowe &lt;samp&gt;enum&lt;/samp&gt;. Typ wyliczeniowy przypomina definiowanie klasy, która&#10;    zwiera tylko stałe. Zwyczajowo stałe pisane są wielkimi literami.&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;enum Suits{&#10;     SPIDES, HEARTS, DIAMONDS, CLUBS&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt; Zmienna typu wyliczeniowego może przyjąć jedną z wymienionych w typie wartości:&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Suits deck1 = Suits.SPADES;&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Przykład wykorzystania zmiennej wyliczeniowej:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public static void main(String[] args){&#10;    Suits card;&#10;    Scanner scan = new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz jeden z kolorów kart: SPADES, HEARTS, DIAMONDS, CLUBS: &quot;);&#10;    card = Suits.valueOf(scan.nextLine());&#10;    switch(card){&#10;      case SPADES:&#10;        System.out.println(&quot;Pik ma 40 punktów&quot;);&#10;        break;&#10;      case HEARTS:&#10;        System.out.println(&quot;Kier 30 punktów&quot;);&#10;        break;&#10;      case DIAMONDS:&#10;        System.out.println(&quot;Karo 20 punktów&quot;);&#10;        break;&#10;      case CLUBS:&#10;        System.out.println(&quot;Trefl 10 punktów&quot;);&#10;        break;&#10;    }&#10;}&#10;        &lt;/code&gt;&#10;    &lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;enum Kolor{&#10;  PIK, KIER, KARO, TREFL;&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args){&#10;    Kolor card;&#10;    Scanner scan = new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz jeden z kolorów kart: PIK, KIER, KARO, TREFL: &quot;);&#10;    card = Kolor.valueOf(scan.nextLine());&#10;    System.out.println(card == Kolor.KIER);&#10;    switch(card){&#10;      case PIK:&#10;        System.out.println(&quot;Pik ma 40 punktów&quot;);&#10;        break;&#10;      case KIER:&#10;        System.out.println(&quot;Kier 30 punktów&quot;);&#10;        break;&#10;      case KARO:&#10;        System.out.println(&quot;Karo 20 punktów&quot;);&#10;        break;&#10;      case TREFL:&#10;        System.out.println(&quot;Trefl 10 punktów&quot;);&#10;        break;&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Zmienne typu wyliczeniowego są obiektami, które posiadają kilka użytecznych metod:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;  &lt;li&gt;&#10;    &lt;samp&gt;name()&lt;/samp&gt; - zwraca nazwę stałej,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    &lt;samp&gt;ordinal()&lt;/samp&gt; - zwraca numer pozycji na liście stałych,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    &lt;samp&gt;compareTo(wartość_enum)&lt;/samp&gt;- porównuje wartość zmiennej wyliczeniowej z inną tego samego typu&#10;    i zwraca różnicę pozycji.&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Popatrzmy na przykład wykorzystania metod:&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;    enum Team {&#10;      ADAM, TOMEK, KASIA, KAROLINA, BASIA&#10;    }&#10;&#10;    ...&#10;&#10;    Team member = Team.KASIA;&#10;    System.out.println(member.name());&#10;    System.out.println(member.ordinal());&#10;    System.out.println(member.compareTo(Team.TOMEK));&#10;    System.out.println(member.getDeclaringClass());&#10;&#10;    ---&#10;    KASIA&#10;    2&#10;    1&#10;    class Team&#10;    &lt;/pre&gt;&#10;  &lt;/code&gt;&#10;  &lt;p&gt;&#10;    Znaczenie kolejnych wartości:&#10;  &lt;/p&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&#10;        &lt;samp&gt;KASIA&lt;/samp&gt; - nazwa stałej wyliczeniowej,&#10;      &lt;/li&gt;&#10;      &lt;li&gt;&#10;        &lt;samp&gt;2&lt;/samp&gt; - stała KASIA znajduje się na pozycji nr 2 (pierwsza ma pozycję 0),&#10;      &lt;/li&gt;&#10;      &lt;li&gt;&#10;        &lt;samp&gt;1&lt;/samp&gt; - stała KASIA znajduje się 1 pozycję za stałą TOMEK,&#10;      &lt;/li&gt;&#10;      &lt;li&gt;&#10;        &lt;samp&gt;class Team&lt;/samp&gt; - nazwa typu zmiennej,&#10;      &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Część 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="enum Team {&#10;  ADAM, ROMAN, KAROLINA;&#10;}&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Team member = Team.KAROLINA;&#10;    System.out.println(member.name());&#10;    System.out.println(member.ordinal());&#10;    System.out.println(member.compareTo(Team.ROMAN));&#10;    System.out.println(member.getDeclaringClass());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Możliwości dodatkowe klasy enum&lt;/h1&gt;&#10;&lt;p&gt;&#10;Deklarowany typ wyliczeniowy jest w istocie klasą, dla której możemy zdefiniować konstruktory, metody i pola. To co odróżnia&#10;typ &lt;samp&gt;enum&lt;/samp&gt; od klas właściwych jest fakt, że nie tworzymy obiektów tego typu, bo stałe&#10;wyliczeniowe są obiektami jego typu. Można założyć, że typ &lt;samp&gt;enum&lt;/samp&gt; jest klasą, która zawiera statyczne&#10;    pola typu wyliczeniowego.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Rozbudujmy typ &lt;samp&gt;Kolor&lt;/samp&gt; tak, aby przechowywać liczbę punktów każdego koloru:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;enum Kolor{&#10;    PIK(40),&#10;    KIER(30),&#10;    KARO(20),&#10;    TREFL(10);&#10;&#10;    private int points;&#10;&#10;    Kolor(int points){&#10;        this.points = points;&#10;    }&#10;&#10;    public int getPoints(){&#10;        return points;&#10;    }&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Konstruktory typu wyliczeniowego musza być prywatne (aby nie można było tworzyć obiektów tego typu). Jawne&#10;  podawanie modyfikatora zasięgu &lt;samp&gt;private&lt;/samp&gt; nie jest potrzebne, jest przyjmowany domyślnie.&#10;    Metody i pola mogą posiadać dowolny typ zasięgu, choć &lt;samp&gt;protected&lt;/samp&gt; jest nieużyteczny, gdyż&#10;    nie można dziedziczyć typu &lt;samp&gt;enum&lt;/samp&gt;.&#10;  Dzięki takiej rozbudowie przykład z części 1 znacznie się uprości:&#10;&lt;/sampprotected&gt;&#10;&lt;pre&gt;&#10;&lt;code&gt;&#10;public static void main(String[] args){&#10;    Kolor card;&#10;    Scanner scan = new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz jeden z kolorów kart: PIK, KIER, KARO, TREFL: &quot;);&#10;    card = Kolor.valueOf(scan.nextLine());&#10;    System.out.println(&quot;Pik ma &quot; + card.getPoints() + &quot; punktów&quot;);&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Typ &lt;samp&gt;enum&lt;/samp&gt; wyposażony jest w kilka dość istotnych metod statycznych:&#10;&lt;/p&gt;&#10;&lt;ol&gt;&#10;    &lt;li&gt;&#10;       &lt;samp&gt;valueOf(nazwa_stałej)&lt;/samp&gt; - zwraca stałą wyliczeniową o podanej nazwie,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;       &lt;samp&gt;values()&lt;/samp&gt; - zwraca tablicę wszystkich stałych&#10;    &lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;&#10;    Poprzedni przykład można teraz rozbudować o sprawdzanie, czy wpisana wartość stałej jest poprawna:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;enum Color{&#10;  PIK(40),&#10;  KIER(30),&#10;  KARO(20),&#10;  TREFL(10);&#10;&#10;  private int points;&#10;&#10;  private Color(int points){&#10;    this.points = points;&#10;  }&#10;&#10;  public int getPoints(){&#10;    return points;&#10;  }&#10;&#10;  public static boolean contains(String name){&#10;    for(Color c: Color.values()){&#10;      if (name.equals(c.name()))&#10;        return true;&#10;    }&#10;    return false;&#10;  }&#10;}&#10;&#10;...&#10;&#10;Scanner scan = new Scanner(System.in);&#10;System.out.print(&quot;Wpisz jedną z nazw poniższych kolorów: &quot;);&#10;for(Color c: Color.values()){&#10;  System.out.print(c+&quot; &quot;);&#10;}&#10;String cName = scan.next();&#10;Color card;&#10;if (Color.contains(cName)) {&#10;  card = Color.valueOf(cName);&#10;  System.out.println(card.getPoints());&#10;} else {&#10;  System.out.println(&quot;Wpisałeś niepoprawny kolor&quot;);&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Typ wyliczeniowy wyposażyliśmy w dodatkową metodę &lt;samp&gt;containts(name)&lt;/samp&gt;, która sprawdza&#10;    czy typ zawiera stałą o podanej nazwie. Stosując tę metodę sprawdzamy, czy wpisany&#10;    z klawiatury łańcuch jest jedną ze stałych wyliczenia.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="CZęść 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;/**&#10; * Typ wyliczeniowy wykorzystujący możliwości klasy&#10; */&#10;enum Suits{&#10;  SPADES(40),&#10;  HEARTS(30),&#10;  DIMAONDS(20),&#10;  CLUBS(10);&#10;&#10;  private int points;&#10;&#10;  private Suits(int points){&#10;    this.points = points;&#10;  }&#10;&#10;  public int getPoints(){&#10;    return points;&#10;  }&#10;&#10;  public static boolean contains(String name){&#10;    for(Suits c: Suits.values()){&#10;      if (name.equals(c.name()))&#10;        return true;&#10;    }&#10;    return false;&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args){&#10;    Suits card1 = Suits.DIMAONDS;&#10;    Suits card2 = Suits.HEARTS;&#10;    Suits card3 = Suits.DIMAONDS;&#10;    System.out.println(card1 == card3);&#10;    for(Suits c: Suits.values()){&#10;      System.out.println(c);&#10;    }&#10;&#10;    Scanner scan = new Scanner(System.in);&#10;    System.out.print(&quot;Wpisz jedną z nazw poniższych kolorów: &quot;);&#10;    for(Suits c: Suits.values()){&#10;      System.out.print(c+&quot; &quot;);&#10;    }&#10;    String cName = scan.next();&#10;    Suits card;&#10;    if (Suits.contains(cName)) {&#10;      card = Suits.valueOf(cName);&#10;      System.out.println(card.getPoints());&#10;    } else {&#10;      System.out.println(&quot;Wpisałeś niepoprawny kolor&quot;);&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Substytu typu enum&lt;/h1&gt;&#10;&lt;p&gt;&#10; Aby łatwiej zrozumieć zaawansowane definiowanie typu &lt;samp&gt;enum&lt;/samp&gt; stworzymy tradycyjną klasę, której obiekty&#10;    będa zachowywać się jak taki typ. Wykorzystamy przykład kolorów kart do gry.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Na początek wyposażymy nasz typ tylko w stałe:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;final class Suit{&#10;    public static Suit SPADES = new Suit(&quot;SPADES&quot;);&#10;    public static Suit DIAMONDS = new Suit(&quot;DIAMONDS&quot;);&#10;    public static Suit CLUBS = new Suit(&quot;CLUBS&quot;);&#10;    public static Suit HEARTS = new Suit(&quot;HEARTS&quot;);&#10;&#10;    private String name;&#10;&#10;    private Suit(String name){&#10;        this.name = name;&#10;    }&#10;&#10;    public String name(){&#10;        return name;&#10;    }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Stworzona klasa zachowuje się podobnie jak typ &lt;samp&gt;enum&lt;/samp&gt;:&#10;&lt;p&gt;&#10;&lt;ol&gt;&#10;    &lt;li&gt;&#10;        ma prywatny konstruktor, nie można tworzyć obiektów tej klasy,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        posiada stałe, które są obiektami typu definiowanej klasy,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        posiada metodę &lt;samp&gt;name()&lt;/samp&gt;, która zwraca nazwę stałej,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        modyfikator &lt;samp&gt;final&lt;/samp&gt; uniemożliwia dziedziczenie.&#10;    &lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;&#10;    Ponieważ nasza klasa udaje tylko typ wyliczeniowy, więc jej używanie może narazić nas na kilka&#10;    kłopotów, jak pomyłkę w nazwie stałej i różnicę z zawartością pola &lt;samp&gt;name&lt;/samp&gt; np.&#10;    &lt;code&gt;public static Suit SPADS = new Suit(&quot;SPADES&quot;);&lt;/code&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Substytut działa bardzo podobnie jak prawdziwy typ wyliczeniowy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;    Suits player1 = Suits.SPADES;&#10;    Suits player2 = Suits.HEARTS;&#10;    Suits player3 = Suits.SPADES;&#10;    System.out.println(player1 == player2);&#10;    System.out.println(player1 == player3);&#10;    System.out.println(player1.name());&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;    Dodajmy kolejne właściwości do klasy &lt;samp&gt;Suits&lt;/samp&gt;: liczbę punktów i metodę do jej odczytu:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10; final class Suit{&#10;    public static Suit SPADES = new Suit(&quot;SPADES&quot;, 40);&#10;    public static Suit HEARTS = new Suit(&quot;HEARTS&quot;, 30);&#10;    public static Suit DIAMONDS = new Suit(&quot;DIAMONDS&quot;, 20);&#10;    public static Suit CLUBS = new Suit(&quot;CLUBS&quot;, 10);&#10;&#10;    private String name;&#10;    private int points;&#10;&#10;    private Suit(String name, int points){&#10;        this.name = name;&#10;        this.points = points;&#10;    }&#10;&#10;    public String name(){&#10;        return name;&#10;    }&#10;&#10;    public int getPoints(){&#10;        return points;&#10;    }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;    &lt;p&gt;&#10;        Porównajmy tworzenie stałych w naszej klasie ze stałymi typu &lt;samp&gt;enum&lt;/samp&gt;:&#10;    &lt;/p&gt;&#10;&#10;        &lt;table border=&quot;&quot; bgcolor=&quot;#123456&quot; cellpadding=&quot;4&quot; align=&quot;center&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;&#10;            Substytut&#10;        &lt;/td&gt;&#10;            &lt;td&gt;&#10;            Typ enum&#10;            &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;&#10;                    &lt;code&gt;&#10;                 public static Suit SPADES = new Suit(&quot;SPADES&quot;, 40);&#10;                    &lt;/code&gt;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;code&gt;&#10;                  SPADES(40);&#10;                    &lt;/code&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;        &lt;p&gt;Porównanie pokazuje, że dodanie nawiasów z liczbą pubktów za nazwą stałej w &lt;samp&gt;enum&lt;/samp&gt;&#10;        jest w istocie  wywołaniem konstruktora jednoargumentowego, który zwróci obiekt i przypisze go do tej  stałej.&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Część 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.time.LocalDateTime;&#10;import java.util.*;&#10;&#10;/**&#10; * Klasa udająca typ enum&#10; */&#10;class SuitsC {&#10;  public static SuitsC SPADES   = new SuitsC(&quot;SPADES&quot;, 40);&#10;  public static SuitsC HEARTS   = new SuitsC(&quot;HEARTS&quot;, 40);&#10;  public static SuitsC DIAMONDS = new SuitsC(&quot;DIAMONDS&quot;, 40);&#10;  public static SuitsC CLUBS    = new SuitsC(&quot;CLUBS&quot;, 40);&#10;&#10;  private int points;&#10;  private String name;&#10;&#10;  private SuitsC(String name, int points){&#10;    this.points = points;&#10;    this.name = name;&#10;  }&#10;&#10;  public String name(){&#10;    return name;&#10;  }&#10;&#10;  public int getPoints(){&#10;    return points;&#10;  }&#10;&#10;  public String toString(){&#10;    return name;&#10;  }&#10;}&#10;&#10;/**&#10; * Klasa enum&#10; */&#10;enum SuitsE {&#10;  SPADES(40),&#10;  HEARTS(30),&#10;  DIAMONDS(20),&#10;  CLUBS(10);&#10;&#10;  private int points;&#10;&#10;  SuitsE(int points){&#10;    this.points = points;&#10;  }&#10;&#10;  public int getPoints(){&#10;    return points;&#10;  }&#10;}&#10;&#10;&#10;&#10;class Task{&#10;  public static void main(String[] args){&#10;    SuitsE pe1 = SuitsE.SPADES;&#10;    SuitsE pe2 = SuitsE.SPADES;&#10;    SuitsC pc1 = SuitsC.SPADES;&#10;    SuitsC pc2 = SuitsC.SPADES;&#10;&#10;    System.out.println(pe1 == pe2);&#10;    System.out.println(pc1 == pc2);&#10;&#10;    System.out.println(pc1.name());&#10;    System.out.println(pe2.name());&#10;&#10;    System.out.println(pc1.getPoints());&#10;    System.out.println(pe2.getPoints());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Własności typu &lt;samp&gt;enum&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        Typ &lt;samp&gt;enum&lt;/samp&gt; jest specyficzną klasą, która ma szereg ograniczeń,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Stałe wyliczeniowe to obiekty klasy &lt;samp&gt;enum&lt;/samp&gt;, które są jednocześnie statycznymi polami klasy,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Nie można dziedziczyć po typie &lt;samp&gt;enum&lt;/samp&gt;,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Nie można rozszerzać typów wyliczeniowych,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Typ &lt;samp&gt;enum&lt;/samp&gt; może implementować interfejsy,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Konstruktor typu &lt;samp&gt;enum&lt;/samp&gt; jest prywatny, nie można tworzyć obiektów klasy &lt;samp&gt;enum&lt;/samp&gt; poza ciałem&#10;        klasy,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Typ &lt;samp&gt;enum&lt;/samp&gt; może posiadać pola i metody z modyfikatorami zasięgu &lt;samp&gt;private&lt;/samp&gt; lub&#10;        &lt;samp&gt;public&lt;/samp&gt;,&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Podsumowanie" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Task {&#10;  //put your task here&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Wyjątki" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Czym jest wyjątek?&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Wyjątek (ang. &lt;i&gt;exception&lt;/i&gt;) to zdarzenie występujące podczas wykonywania programu, które zaburza&#10;  normalną kolejność wykonywanych instrukcji. Z występowaniem takich zdarzeń już spotkaliśmy się, chociażby&#10;  podczas wykonania takiego programu:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class ExceptionDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4};&#10;    System.out.println(array[4]);&#10;  }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Efektem jest zgłoszenie wyjątku programu:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;samp&gt;&#10;Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 4&#10;&#9;at Task.main(ExceptionDemo.java:4)&#10;  &lt;/samp&gt;&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;  Reakcja na błąd powoduje stworzenie specjalnego obiektu, który jest przekazywany do systemu wykonawczego (ang. &lt;i&gt;runtime&#10;  system&lt;/i&gt;). Obiekt ten, zwany obiektem wyjątku, zawiera informacje o błędzie, w tym jego typ i stan programu po błędzie.&#10;  Sytuacja utworzenia wyjątku i przekazania go do systemu wykonawczego nazywana jest wyrzucaniem lub zgłaszaniem wyjątku (ang.&#10;  &lt;i&gt;throwing an exception&lt;/i&gt;).&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Gdy wyjątek zostanie zgłoszony to następuje proces wyszukiwania &quot;odpowiedzialnego&quot; za jego obsłużenie. System&#10;  wykonawczy, przeszukuje uporządkowaną listę metod, które były wywoływane do momentu wystąpienia błędu. Listą&#10;  tą jest tzw. stos wywołań. Celem przeszukiwania jest znalezienie metody, która zawiera blok kodu obsługującego&#10;  zgłoszony wyjątek. Gdy zostanie znaleziony kod obsługi wyjątki (ang. &lt;i&gt;exception handler&lt;/i&gt;), którego typ pasuje&#10;  do obiektu wyjątku to system wykonawczy go&#10;  wykonuje, i zgodnie z tym kodem decyduje, czy program jest kontynuwany czy nie.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Jeśli kod obługi nie zostanie znaleziony to system wykonawczy kończy działanie,&#10;  co jest równoznaczne z zakończeniem programu&#10;  wraz z wyświetleniem wszystkich informacji o wyjątku.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Przedstawiony wyżej przykład ilustruje reakcję na brak obsługi wyjątku, dlatego nasz program zakończył działanie&#10;  wyświetlając informacje o błędzie.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ExceptionDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ExceptionDemo.java" />
                                      <option name="text" value="class ExceptionDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3};&#10;    try {&#10;      System.out.println(array[0]);&#10;      System.out.println(array[1]);&#10;      System.out.println(array[2]);&#10;      System.out.println(array[3]);&#10;    } catch(ArrayIndexOutOfBoundsException e){&#10;      System.out.println(&quot;Nieładnie, indeks poza zakresem&quot;);&#10;    }&#10;    System.out.println(&quot;KONIEC&quot;);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Obsługa wyjątku - konstrukcja try...catch&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Mamy dwie możliwości reagowania na wyjątki:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        umieścić kod obsługi wyjątku ujmując fragment kodu, w którym może pojawić się wyjątek,&#10;        blokiem &lt;samp&gt;try ... catch ...&lt;/samp&gt;,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        przekazać zgłoszony wyjątek metodzie wywołującej poprzez dodanie klauzuli &lt;samp&gt;throws&lt;/samp&gt;,&#10;        co powoduje, że przenosimy odpowiedzialność za obsługę wyjątku na zewnątrz.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;    Dodajmy do przykładu blok try ... catch ..., tak aby wyświetlić komunikat, o nieprawidłowem indeksie.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class TryCatchDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4};&#10;    try {&#10;      System.out.println(array[4]);&#10;    } catch (ArrayIndexOutOfBoundsException e) {&#10;      System.out.println(&quot;Przekroczony zakres indeksu. Wyjątek &quot;+e);&#10;    }&#10;    System.out.println(&quot;KONIEC&quot;);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Efektem wykonania programu:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;&lt;samp&gt;&#10;Przekroczony zakres indeksu. Wyjątek java.lang.ArrayIndexOutOfBoundsException: 4&#10;KONIEC&#10;&lt;/samp&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Klauzula &lt;samp&gt;try&lt;/samp&gt; obejmuje kod, w którym może wystąpić błąd, argumentem &lt;samp&gt;catch&lt;/samp&gt; jest&#10;    obiekt wyjątku, a w bloku poniżej &lt;samp&gt;catch&lt;/samp&gt; znajduje się reakcja na błąd.&#10;    Dodanie obsługi wyjątku spowodowało, że program nie został zatrzymany. Po reakcji na wyjątek wykonana została&#10;    instrukcja za blokiem &lt;samp&gt;try ... catch&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;   Blok obsługi wyjątku może zawierać trzeci element - blok &lt;samp&gt;finally&lt;/samp&gt;, który wykonywany jest zawsze&#10;    bez względu na to czy błąd się pojawi, czy nie. Ilustracją będzie rozbudowa poprzedniego&#10;    przykładu, który będzie obliczał sumę pierwszych n-elementów tablicy. Zakładamy, że użytkownik&#10;    może podać niepoprawną wartość n. Jeśli indeks odczytywanego elementu jest niepoprawny, to przyjmujemy, że&#10;    elementu nie ma, więc jego wartość jest równa zero.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;import java.util.Scanner;&#10;&#10;class TryCatchFinallyDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4, 5, 9, 8, 7};&#10;    int sum= 0;&#10;    Scanner scan= new Scanner(System.in);&#10;    int n = scan.nextInt();&#10;    int element = 0;&#10;    for (int i = 0; i &lt; n; i++) {&#10;      try {&#10;        element = array[i];&#10;      } catch (ArrayIndexOutOfBoundsException e) {&#10;        element = 0;&#10;      }&#10;      finally {&#10;        sum += element;&#10;      }&#10;    }&#10;    System.out.println(&quot;Suma elementów: &quot;+sum);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  W bloku &lt;samp&gt;try&lt;/samp&gt;  próbujemy odczytać element o indeksie &lt;samp&gt;i&lt;/samp&gt;. Jeśli przekroczymy zakres,&#10;    to zostanie wykonany blok &lt;samp&gt;catch&lt;/samp&gt;, w którym nieistniejącej liczbie przypisujemy zero. Jeśli&#10;    indeks jest poprawny, to nie wystąpi błąd i zmienna &lt;samp&gt;element&lt;/samp&gt; będzie liczbą z tablicy.&#10;    Blok &lt;samp&gt;finally&lt;/samp&gt; zawsze jest wykonywany, bez względu czy wystąpił błąd czy nie. W nim&#10;    dodajemy do zmiennej &lt;samp&gt;sum&lt;/samp&gt;  wartość z &lt;samp&gt;element&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    W bloku &lt;samp&gt;try&lt;/samp&gt;, może wystapić więcej błędów, także różnych typów. W takiej sytuacji&#10;    można dodać kilka klauzul &lt;samp&gt;catch(typ-wyjątku obiekt-wyjątku)&lt;/samp&gt;, aby każda obsługiwała&#10;    wyjątki danego typu:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;&lt;code&gt;&#10;import java.util.InputMismatchException;&#10;import java.util.Scanner;&#10;&#10;public class MultiCatchDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = { 1, 2, 3, 4, 5};&#10;    Scanner scan = new Scanner(System.in);&#10;    boolean isValid = false;&#10;    int n = 0;&#10;    int element = 0;&#10;    System.out.println(&quot;Wpisz indeks od 0 do 4.&quot;);&#10;    do {&#10;      try {&#10;        n = scan.nextInt();&#10;        element = array[n];&#10;        isValid = true;&#10;      } catch (InputMismatchException e1) {&#10;        System.out.println(&quot;Wpisz indeks jako liczbę całkowitą!!! Spróbuj jeszcze raz.&quot;);&#10;        String tmp = scan.nextLine();&#10;      } catch (ArrayIndexOutOfBoundsException e2) {&#10;        System.out.println(&quot;Indeks musi być nieujemny i mniejszy od 5!!! Spróbuj jeszcze raz.&quot;);&#10;      }&#10;    }while (!isValid);&#10;    System.out.println(&quot;Liczba w tablicy o indeksie &quot;+n+&quot; = &quot;+element);&#10;  }&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Blok &lt;samp&gt;try&lt;/samp&gt; zawiera trzy instrukcje, przy czym w dwu pierwszych mogą wystąpić dwa różne wyjątki:&#10;    nieprawidlowego typu danej wczytaje z klawiatury lub niepoprawnego indeksu. Każda z klauzul &lt;samp&gt;catch&lt;/samp&gt;&#10;    odpowiada za jeden typ wyjątku. Przykład ilustruje też, że obsługa wyjątków zaburza normalny&#10;    przepływ wykonywanych instrukcji. Trzecia instrukcja &lt;samp&gt;isValid=true;&lt;/samp&gt; zostanie wykonana, jeśli&#10;    w dwu poprzednich nie zostaie zgłoszony wyjątek. Gdy pojawia się wyjątek, wykonywany jest niejawny skok do&#10;    odppowiedniej klauzuli &lt;samp&gt;catch&lt;/samp&gt; i wykonywany kod obsługi wyjątku. Po obsłużeniu wyjątku wykonywanym&#10;    jest pierwszy rozkaz za konstrukcją try ... catch ... Z tej przyczyny nasza pętla &lt;samp&gt;do ... while&lt;/samp&gt; jest&#10;    wykonywana tak długo, aż nie wystąpi wyjątek i zostanie zmiennej &lt;samp&gt;isValid&lt;/samp&gt; przypisana wartość&#10;    spełniająca zakończenie powtarzania iteracji.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Część 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/FinallyDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FinallyDemo.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;class FinallyDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4, 5, 9, 8, 7};&#10;    int sum= 0;&#10;    Scanner scan= new Scanner(System.in);&#10;    System.out.println(&quot;Program obliczający sumę pierwszych n elementów tablicy&quot;);&#10;    System.out.println(&quot;Wpisz indeks ostatniego sumowanego elementu:&quot;);&#10;    int n = scan.nextInt();&#10;    int element = 0;&#10;    for (int i = 0; i &lt; n; i++) {&#10;      try {&#10;        element = array[i];&#10;      } catch (ArrayIndexOutOfBoundsException e) {&#10;        element = 0;&#10;      }&#10;      finally {&#10;        sum += element;&#10;      }&#10;    }&#10;    System.out.println(&quot;Suma elementów: &quot;+sum);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultiCatchDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultiCatchDemo.java" />
                                      <option name="text" value="import java.util.InputMismatchException;&#10;import java.util.Scanner;&#10;&#10;public class MultiCatchDemo {&#10;  public static void main(String[] args) {&#10;    int[] array = { 1, 2, 3, 4, 5};&#10;    Scanner scan = new Scanner(System.in);&#10;    boolean isValid = false;&#10;    int n = 0;&#10;    int element = 0;&#10;    System.out.println(&quot;Wpisz indeks od 0 do 4.&quot;);&#10;    do {&#10;      try {&#10;        n = scan.nextInt();&#10;        element = array[n];&#10;        isValid = true;&#10;      } catch (InputMismatchException e1) {&#10;        System.out.println(&quot;Wpisz indeks jako liczbę całkowitą!!! Spróbuj jeszcze raz.&quot;);&#10;        String tmp = scan.nextLine();&#10;      } catch (ArrayIndexOutOfBoundsException e2) {&#10;        System.out.println(&quot;Indeks musi być nieujemny i mniejszy od 5!!! Spróbuj jeszcze raz.&quot;);&#10;      }&#10;    }while (!isValid);&#10;    System.out.println(&quot;Liczba w tablicy o indeksie &quot;+n+&quot; = &quot;+element);&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Obsługa wyjątku - przekazywanie wyjątku przez throws&lt;/h1&gt;&#10;&lt;p&gt;&#10;Drugą metodą reakcji na błędy przy pomocy wyjątków, jest przekazanie wyjątku do funkcji wywołującej.&#10;Zilustujemy tę możliwość, modyfikując poprzedni przykład. Tym razem odczyt z tablicy będzie realizowała metoda,&#10;która będzie przekazywać wyjątek.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;import java.util.Scanner;&#10;&#10;class Task {&#10;&#10;  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{&#10;    return arr[i];&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4, 5, 9, 8, 7};&#10;    int sum= 0;&#10;    Scanner scan= new Scanner(System.in);&#10;    int n = scan.nextInt();&#10;    int element = 0;&#10;    for (int i = 0; i &lt; n; i++) {&#10;      try {&#10;        element = getElement(array, i);&#10;      } catch (ArrayIndexOutOfBoundsException e) {&#10;        element = 0;&#10;      }&#10;      finally {&#10;        sum += element;&#10;      }&#10;    }&#10;    System.out.println(&quot;Suma elementów: &quot;+sum);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Metoda &lt;samp&gt;getElement()&lt;/samp&gt; nie obsługuje wyjątku. Dodanie klauzuli &lt;samp&gt;throws&lt;/samp&gt; powoduje, że jeśli wystąpi wyjątek o wskazanym typie (w tym przypadku &lt;samp&gt;ArrayIndexOutOfBoundsException&lt;/samp&gt;) to zostanie on przekazy metodzie, która wywołała &lt;samp&gt;getElement()&lt;/samp&gt;. Dlatego w metodzie &lt;samp&gt;main&lt;/samp&gt; musieliśmy dodać konstrukcję &lt;samp&gt;try .. catch ... finally&lt;/samp&gt;, aby obsłużyć przekazany wyjątek z metody.&#10;&lt;/p&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Część 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/SimpleThrowsDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimpleThrowsDemo.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;public class SimpleThrowsDemo {&#10;  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{&#10;    return arr[i];&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3};&#10;    int sum= 0;&#10;    for (int i = 0; i &lt; 5; i++) {&#10;      try {&#10;        sum += getElement(array, i);&#10;      } catch (ArrayIndexOutOfBoundsException e) {&#10;      }&#10;    }&#10;    System.out.println(&quot;Suma elementów: &quot;+sum);&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ThrowsDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ThrowsDemo.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;class ThrowsDemo {&#10;&#10;  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{&#10;    return arr[i];&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    int[] array = {1, 2, 3, 4, 5, 9, 8, 7};&#10;    int sum= 0;&#10;    Scanner scan= new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz indeks elementu tablicy:&quot;);&#10;    int n = scan.nextInt();&#10;    int element = 0;&#10;    for (int i = 0; i &lt; n; i++) {&#10;      try {&#10;        element = getElement(array, i);&#10;      } catch (ArrayIndexOutOfBoundsException e) {&#10;        element = 0;&#10;      }&#10;      finally {&#10;        sum += element;&#10;      }&#10;    }&#10;    System.out.println(&quot;Suma elementów: &quot;+sum);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Blok finally&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Blok &lt;samp&gt;finally&lt;/samp&gt; ma jeszcze jedną ciekawą właściwość. Blok ten jest zawsze wykonywany jako ostatni&#10;    w konstrukcji &lt;samp&gt;try ... catch ... finally&lt;/samp&gt; bez względu czy w dwu poprzednich blokach występują instrukcje&#10;    skoku w tym też &lt;samp&gt;return&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class FinallyDemo {&#10;&#10;  public static void main(String[] args) {&#10;    int[] arr = {1, 2, 3, 4};&#10;    int el = 0;&#10;    try{&#10;      el = arr[3];&#10;      System.out.println(el);&#10;      return;&#10;    } catch (ArrayIndexOutOfBoundsException e){&#10;      System.out.println(&quot;Niepoprawny indeks&quot;);&#10;    }&#10;    finally {&#10;      System.out.println(&quot;Koniec programu&quot;);&#10;    }&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Efektem wykonania programu będą dwa komunikaty:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;samp&gt;&#10;4&#10;Koniec programu&#10;    &lt;/samp&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;   Jest to kolejny dowód na niezwykłość instrukcji &lt;samp&gt;try&lt;/samp&gt; i ilustruje jak zaburza ona&#10;    kolejności wykonywanych instrukcji. Teoretycznie powinien wyświetlić się tylko numer liczby z tablicy bo&#10;    za instrukcją &lt;samp&gt;System.out.println(el)&lt;/samp&gt; znajduje się &lt;samp&gt;return&lt;/samp&gt;, który powinien zakończyć&#10;    działanie programu. Blok &lt;samp&gt;finally&lt;/samp&gt; musi wykonać swój kod i dlatego został wyświetlony&#10;    drugi komunikat.&#10;&lt;/p&gt;&#10;&lt;p&gt;Należy też pamiętać, że jeśli w każdym bloku instrukcji &lt;samp&gt;try&lt;/samp&gt; znajdzie się &lt;samp&gt;return&lt;/samp&gt;,&#10;to metoda zwróci wartość instrukcji z bloku &lt;samp&gt;finally&lt;/samp&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public static int getElement(int[] arr, int i){&#10;    int element = 0;&#10;    try{&#10;      return arr[i];&#10;    } catch (ArrayIndexOutOfBoundsException e) {&#10;      return 10;&#10;    }&#10;    finally {&#10;      return 0;&#10;    }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Bez względu na to, czy wystąpi wyjątek, czy nie , to funkcja zawsze będzie zwracać wartość 0,&#10;    bo &lt;samp&gt;return 0;&lt;/samp&gt; z bloku &lt;samp&gt;finally&lt;/samp&gt; zawsze będzie wykonana jako ostatnia,&#10;    i anuluje wartości zwracane z poprzednich bloków.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Część 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/FinallyDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FinallyDemo.java" />
                                      <option name="text" value="class FinallyDemo {&#10;&#10;  public static int getElement(int[] arr, int i){&#10;    int element = 0;&#10;    try{&#10;      return arr[i];&#10;    } catch (ArrayIndexOutOfBoundsException e) {&#10;      return 0;&#10;    }&#10;    finally {&#10;      return -10;&#10;    }&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    int[] arr = {1, 2, 3, 4};&#10;    System.out.println(getElement(arr, 3));&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Zgłaszanie wyjątków przez throw&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Tworzone własnoręcznie klasy też powinny zgłaszać wyjątki w sytuacjach wystąpienia błędu.&#10;  Możemy samodzielnie je tworzyć i przekazywać. Wyrzucanie wyjątku polega na utworzeniu obiektu wyjątku i przekazanie go instrukcją &lt;samp&gt;trow&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Na początek prosty przykład ilustrujący rzucanie wyjątku:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class ThrowDemo {&#10;&#10;  static double divide(int a, int b) throws ArithmeticException {&#10;    if (a == 0 &amp;&amp; b == 0){&#10;      throw new ArithmeticException(&quot;Dzielenie zera przez zero: b=&quot;+b);&#10;    }&#10;    if (b == 0){&#10;      throw new ArithmeticException(&quot;Dzielenie przez zero: a=&quot;+a+&quot; b=&quot;=b);&#10;    }&#10;    return (double)a/b;&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    try {&#10;      System.out.println(divide(10,20));&#10;    } catch (ArithmeticException e){&#10;      System.out.println(e.getMessage());&#10;    }&#10;  }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Metoda &lt;samp&gt;divide()&lt;/samp&gt; testuje wartości obu argumentów i w zależności&#10;  od ich wartości rzuca dwa wyjątki tego samego typu. Rzucając samodzielnie&#10;  wyjątki klas bibliotecznych, mamy możliwość podania własnego komunikatu.&#10;  Korzystając z metody &lt;samp&gt;getMessage()&lt;/samp&gt; wyjątków możemy&#10;  wyświetlić nasz własny komunikat.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Część 5" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ThrowDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ThrowDemo.java" />
                                      <option name="text" value="class ThrowDemo {&#10;&#10;  static double divide(int a, int b) throws ArithmeticException {&#10;    if (a == 0 &amp;&amp; b == 0) {&#10;      throw new ArithmeticException(&quot;Dzielenie zara przez zero: a = &quot; + a + &quot; b = &quot; + b);&#10;    }&#10;    if (b == 0) {&#10;      throw new ArithmeticException(&quot;Dzielenie przez zero: b = &quot; + b);&#10;    }&#10;    return (double) a / b;&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    try {&#10;      System.out.println(divide(10, 0));&#10;    } catch (ArithmeticException e) {&#10;      System.out.println(e.getMessage());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map>
                                <entry key="img/throwable.png">
                                  <value>
                                    <AdditionalFile>
                                      <option name="text" value="" />
                                      <option name="visible" value="true" />
                                    </AdditionalFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Tworzenie własnych klas wyjątków&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Gdy stworzymy klasę i nie znajdziemy gotowej klasy wyjątku, która pasowałaby do zgłaszanego&#10;  błędu, możemy samodzielnie stworzyć własną klasę wyjątku.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Na rysunku poniżej znajduje się hierarchia klas, które służa do tworzenia wyjątków i błędów.&#10;&lt;img src=&quot;\img\throwable.png&quot;&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Z klasy &lt;samp&gt;Throwable&lt;/samp&gt; wyprowadzone sa dwie klasy. Klasa &lt;samp&gt;Error&lt;/samp&gt; służy do zgłaszania poważnych błędów, których nie można&#10;  naprawić ani odpowiednio zareagować. Są to takie błedy jak brak pamięci (ang. &lt;i&gt;out of memory&lt;/i&gt;, przepełnienie stosu (ang&lt;i&gt;stack overflow&lt;/i&gt;, błędna definicja klasy, brak&#10;  zdefiniowanej klasy itd.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Klasa &lt;samp&gt;Exception&lt;/samp&gt; odpowiada za wszystkie pozostałe błędy, które można obsłużyć i ewentualnie naprawić. Wyjątki dzielą się na dwa rodzaje:&#10;  &lt;samp&gt;checked&lt;/samp&gt;, czyli takie które muszą być obsłużone lub przekazane do obsługi jawnie i &lt;samp&gt;unchecked&lt;/samp&gt;, które nie wymagają jawnej obsługi. Oba rodzaje są funkcjonalnie identyczne.&#10;Przykładem wyjątku typu &lt;samp&gt;unchecked&lt;/samp&gt; jest &lt;samp&gt;ArrayIndexOutOfBounds&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Własny wyjątek musi być klasą wyprowadzoną z klasy &lt;samp&gt;Throwable&lt;/samp&gt; lub jej potomnych, najczęściej z klasy &lt;samp&gt;Exception&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class InsufficientAmountException extends Exception {&#10;  long amount;&#10;  InsufficientAmountException(long amount) {&#10;    this.amount = amount;&#10;  }&#10;}&#10;&#10;class ExcessiveAmountException extends Exception {&#10;  long amount;&#10;  ExcessiveAmountException(long amount) {&#10;    this.amount = amount;&#10;  }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;Obie klasy można teraz wykorzystać do definicji klasy konta w banku.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Bank {&#10;  static long MaximumAmount = 15000;&#10;  public void withdraw(long accNo, long amount)&#10;    throws InsufficientAmountException, ExcessiveAmountException {&#10;      long balance = getBalance(accNo);&#10;      if(balance &lt; amount)&#10;        throw new InsufficientAmountException(amount);&#10;      if(amount &gt; MaximumAmount)&#10;        throw new ExcessiveAmountException(amount);&#10;      //else withdraw...&#10;  }&#10;  private long getBalance(long accNo) {&#10;    return 0;&#10;  }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Część 6" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/CustomExceptionDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CustomExceptionDemo.java" />
                                      <option name="text" value="class InsufficientAmountException extends Exception {&#10;  long amount;&#10;  InsufficientAmountException(long amount, String message) {&#10;    super(message);&#10;    this.amount = amount;&#10;  }&#10;}&#10;&#10;class ExcessiveAmountException extends Exception {&#10;  long amount;&#10;  ExcessiveAmountException(long amount, String message) {&#10;    super(message);&#10;    this.amount = amount;&#10;  }&#10;}&#10;&#10;class Bank {&#10;  static long MaximumAmount = 15000;&#10;  private long balance;&#10;&#10;  public Bank(long balance){&#10;    this.balance = balance;&#10;  }&#10;&#10;  public void withdraw(long amount) throws InsufficientAmountException, ExcessiveAmountException {&#10;    long newBalance = getBalance(amount);&#10;    if(newBalance &lt; 0)&#10;      throw new InsufficientAmountException(amount, &quot;Za mały stan konta na wypłatę&quot;);&#10;    if(amount &gt; MaximumAmount)&#10;      throw new ExcessiveAmountException(amount, &quot;Zbyt duża kwota wypłaty&quot;);&#10;    balance = newBalance;&#10;  }&#10;&#10;  public long getBalance(){&#10;    return balance;&#10;  }&#10;&#10;  private long getBalance(long amount) {&#10;    return balance - amount;&#10;  }&#10;}&#10;&#10;public class CustomExceptionDemo {&#10;  public static void main(String[] args) {&#10;    Bank myBank = new Bank(2400);&#10;    try {&#10;      myBank.withdraw(300);&#10;    } catch (InsufficientAmountException e) {&#10;      System.out.println(e.getMessage() + &quot; &quot; + e.amount);&#10;    } catch (ExcessiveAmountException e) {&#10;      System.out.println(e.getMessage() + &quot; &quot; + e.amount);&#10;    }&#10;    System.out.println(myBank.getBalance());&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Task {&#10;  //put your task here&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Typy generyczne" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Podstawy typów generycznych&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Dotąd tworzyliśmy zmienne, które umożliwiały przechowywanie wartości&#10;  zgodne ze swoim typem. Typ generyczny, to rodzaj zmiennej, a dokładniej parametru, która nie przechowuje wartości ale typ.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    W celu łatwiejszego zrozumienia typów generycznych przypomnijmy klasę węzła do&#10;    przetwarzania list jednokierunkowej. Węzeł przechowujący łańcuchy to klasa o poniższej definicji:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Node{&#10;  String data;&#10;  Node next;&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Jeśli potrzebujemy węzła przechowującego daty, to musimy zdefiniować taką klasę:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Node{&#10;  LoaclDate data;&#10;  Node next;&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Obie klasy różnią się typem pola &lt;samp&gt;data&lt;/samp&gt; i widać, że tworzenie kolejnych&#10;    węzłów do przechowywania innych klas to zmiana typu tego pola.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Można ułatwić sobie pracę, definiując klasę parametryczną, poprzez dodanie za nazwą klasy&#10;    listy parametrów, w których miejscu pojawią się konkretne typy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Node &amp;lt;T&amp;gt;{&#10;    T data;&#10;    Node next;&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Zdefiniona klasa daje możliwość teraz tworzenia węzłów z dowolnym typem pola &lt;samp&gt;data&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Node &amp;lt;String&amp;gt; stringNode = new Node&lt;&gt;();&#10;Node &amp;lt;LocalDate&amp;gt; dateNode = new Node&lt;&gt;();&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    W miejscu typu generycznego mogą wystąpić wyłącznie typy złożone, klasy lub interfejsy.&#10;    Można też spotkać się z podawaniem typu generycznego na wiasach &lt;&gt; po nazwie klasy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Node &amp;lt;String&amp;gt; stringNode = new Node&amp;lt;String&amp;gt;();&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Ten sposób jest poprawny, ale podanie drugi raz konkretnego typu jest zbędnę i nic&#10;    nie wnosi, dlatego rzadko jest stosowany.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/GenericDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericDemo.java" />
                                      <option name="text" value="import jdk.nashorn.internal.runtime.regexp.joni.ast.StringNode;&#10;&#10;import java.time.LocalDate;&#10;&#10;class Node&lt;T&gt; {&#10;  T data;&#10;  Node next;&#10;&#10;  @Override&#10;  public String toString(){&#10;    return data.toString();&#10;  }&#10;}&#10;&#10;&#10;class GenericDemo {&#10;&#10;  public static void main(String[] args) {&#10;    Node&lt;String&gt; stringNode = new Node&lt;&gt;();&#10;    Node&lt;LocalDate&gt; dateNode = new Node&lt;&gt;();&#10;&#10;    stringNode.data = &quot;Obiekt typu generycznego&quot;;&#10;    dateNode.data = LocalDate.now();&#10;&#10;    stringNode.next = dateNode;&#10;    while(stringNode != null){&#10;      System.out.println(stringNode);&#10;      stringNode = stringNode.next;&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Metody generyczne&lt;/h1&gt;&#10;&lt;p&gt;&#10;Kolejną możliwością jest definiowanie metod generycznych, kóre mogą przyjmować parametry jaki i zwracać wartości typu&#10;generycznego. Tę możliwość wykorzystamy do stworzenia stosu generycznego, w którym umieścimy zdefiniowaną wcześniej&#10;klasę Node.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class NodeStack &amp;lt;T&amp;gt; {&#10;  private class Node&amp;lt;T&amp;gt; {&#10;    T data;&#10;    Node next;&#10;&#10;    Node(T element){&#10;      this.data = element;&#10;      this.next = null;&#10;    }&#10;&#10;    @Override&#10;    public String toString(){&#10;      return data.toString();&#10;    }&#10;  }&#10;&#10;  private Node&amp;lt;T&amp;gt; stack;&#10;&#10;  public NodeStack(){&#10;    stack = null;&#10;  }&#10;&#10;  public void push(T element){&#10;    Node&amp;lt;T&amp;gt; node = new Node&lt;&gt;(element);&#10;    node.next = stack;&#10;    stack = node;&#10;  }&#10;&#10;  public T pop(){&#10;    if (stack == null){&#10;      throw new EmptyStackException();&#10;    }&#10;    T element = stack.data;&#10;    stack = stack.next;&#10;    return element;&#10;  }&#10;&#10;  public boolean isEmpty(){&#10;    return stack == null;&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Wewnątrz sparametryzowanej klasy &lt;samp&gt;NodeStack&lt;/samp&gt;, możemy korzystać z typu generycznego&#10;  w każdej metodzie tej klasy. Metoda &lt;samp&gt;push(T element)&lt;/samp&gt; przyjmuje argument typu parametrycznego, a &lt;samp&gt;T pop()&lt;/samp&gt; zwraca wartość typu generycznego. Zrozumienie co zonac&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  W chwili gdy utworzymy obiekt klasy generycznej, i w miejscu parametry T pojawi się konretny typ, zostanie on ustalony także dla parametrów i wartości zwracanej metod&#10;  generycznych. Na przykład dla węzła z typem &lt;samp&gt;String&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;prev&gt;&#10;  &lt;code&gt;&#10;  NodeStack&amp;lt;String&amp;gt stringStack = new NodeStack&lt;&gt;();&#10;  &lt;/code&gt;&#10;&lt;/prev&gt;&#10;&lt;p&gt;&#10;  pod typ generyczny &lt;samp&gt;T&lt;/samp&gt; zostanie podstawiony konkretny typ &lt;samp&gt;String&lt;/samp&gt;&#10;  a wtedy metoda &lt;samp&gt;push&lt;/samp&gt; będzie miała konkretną definicję:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10; public void push(String element){&#10;    Node&amp;lt;String&amp;gt; node = new Node&lt;&gt;(element);&#10;    node.next = stack;&#10;    stack = node;&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  W ciele metody mamy także tworzenie obiektu klasy generycznej więc, tam także&#10;  pojawi się konretny typ i zostanie utworzony obiekt klasy &lt;samp&gt;Node&lt;/samp&gt; dla typu &lt;samp&gt;String&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Część 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/GenericsMethodDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericsMethodDemo.java" />
                                      <option name="text" value="import java.util.EmptyStackException;&#10;&#10;class GStack&lt;T&gt; {&#10;  private class Node&lt;T&gt; {&#10;    T data;&#10;    Node next;&#10;&#10;    Node(T element){&#10;      this.data = element;&#10;      this.next = null;&#10;    }&#10;&#10;    @Override&#10;    public String toString(){&#10;      return data.toString();&#10;    }&#10;  }&#10;&#10;  private Node&lt;T&gt; stack;&#10;&#10;  public GStack(){&#10;    stack = null;&#10;  }&#10;&#10;  public void push(T element){&#10;    Node&lt;T&gt; node = new Node&lt;&gt;(element);&#10;    node.next = stack;&#10;    stack = node;&#10;  }&#10;&#10;  public T pop(){&#10;    if (stack == null){&#10;      throw new EmptyStackException();&#10;    }&#10;    T element = stack.data;&#10;    stack = stack.next;&#10;    return element;&#10;  }&#10;&#10;  public boolean isEmpty(){&#10;    return stack == null;&#10;  }&#10;}&#10;class GenericsMethodDemo {&#10;  public static void main(String[] args) {&#10;    GStack&lt;String&gt; stack = new GStack&lt;&gt;();&#10;    stack.push(&quot;ALA&quot;);&#10;    stack.push(&quot;OLA&quot;);&#10;    stack.push(&quot;ELA&quot;);&#10;    while(!stack.isEmpty()){&#10;      System.out.println(stack.pop());&#10;    }&#10;&#10;    GStack&lt;Integer&gt; istack = new GStack&lt;&gt;();&#10;    istack.push(10);&#10;    istack.push(12);&#10;    istack.push(14);&#10;    while(!istack.isEmpty()){&#10;      System.out.println(istack.pop());&#10;    }&#10;  }&#10;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Interfejsy generyczne&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Duże możliwości oferują interfejsy generyczne. Typowym przykładem takiego interfejsu jest klasa porównująca.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;interface Comparable&amp;lt;T&amp;gt;{&#10;    int compareTo(T o);&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Klasa może implementoować taki interfejs:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Number implements Comparable&amp;lt;Number&amp;gt; {&#10;    private Integer data;&#10;&#10;    public Number(Integer data) {&#10;        this.data = data;&#10;    }&#10;&#10;    @Override&#10;    public int compareTo(Number o) {&#10;        return data.intValue() &gt; o.data.intValue() ? 1 : data.intValue() &lt; o.data.intValue() ? -1 : 0;&#10;    }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Typowym protokołem porównania dwóch obiektów, jest zwracania wartości 1, jeśli obiekt wywołujący compareTo&#10;    jest większa od obiektu, który jest argumentem, wartości -1 jeśli jest mniejszy, a 0 gdy są oba równe.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Część 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/GenericsInterfaceDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericsInterfaceDemo.java" />
                                      <option name="text" value="interface Comparable&lt;T&gt;{&#10;  int compareTo(T o);&#10;}&#10;&#10;class Theme implements Comparable&lt;Theme&gt;{&#10;  String data;&#10;  public Theme(String data){&#10;    this.data = data;&#10;  }&#10;&#10;  @Override&#10;  public int compareTo(Theme o) {&#10;    return data.length() &gt; o.data.length() ? 1 : data.length() &lt; o.data.length() ? -1 : 0;&#10;  }&#10;}&#10;&#10;class Number implements Comparable&lt;Number&gt; {&#10;  Integer data;&#10;&#10;  public Number(Integer data) {&#10;    this.data = data;&#10;  }&#10;&#10;  @Override&#10;  public int compareTo(Number o) {&#10;    return data.intValue() &gt; o.data.intValue() ? 1 : data.intValue() &lt; o.data.intValue() ? -1 : 0;&#10;  }&#10;}&#10;&#10;class GenericsInterfaceDemo{&#10;  public static void main(String[] args) {&#10;    Comparable str1 = new Theme(&quot;ALA&quot;);&#10;    Comparable str2 = new Theme(&quot;ELA&quot;);&#10;    Comparable n1 = new Number(12);&#10;    Comparable n2 = new Number(34);&#10;    System.out.println(str1.compareTo(str2));&#10;    System.out.println(n1.compareTo(n2));&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Ograniczenia typów&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Klasy generyczne moga posiadać wiele parametrów, a parametry mogą mieć różne znaczenie. Aby łatwo je identyfikować&#10;  przyjęto konwencję ich oznaczania:&#10;  &lt;ul&gt;&#10;  &lt;li&gt;&#10;    E – Element: element kolekcji (szeroko wykorzystywany w kolekcjach Javy, jak np. ArrayLis, Set)&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    K – Key: klucz, wartość służaca do szybkiej identyfikacji wartości&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    N – Number: liczba, czyli dowolny typ wartości numerycznej&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    T – Type: typ parametryczny, gdy parametr klasy nie ma jakiegość szczególnego znaczenia&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    V – Value: wartość, którą kojarzymy z kluczem&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    S,U,V etc. – drugi, trzeci, czwarty typ parametryczny, wykorzystywane, gdy klasa ma więcej niż jeden parametr&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Przedstawiona konwencja służy do rozpoznawania znaczenia danego parametry generycznego, ale można także&#10;  wprowadzać ograniczenia. Ograniczenia mogą dotyczyć superklasy lub implementacji interfejsu typu generycznego:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Team&amp;lt;T extends Person&amp;gt;{&#10;  Person[] staff;&#10;  int count = 0;&#10;&#10;  public Team(int size){&#10;    staff = new Person[size];&#10;  }&#10;&#10;  public void add(T member){&#10;    if (count &lt; staff.length) {&#10;      staff[count++] = member;&#10;    }&#10;  }&#10;&#10;  @Override&#10;  public String toString(){&#10;    String result = &quot;&quot;;&#10;    for(Person m: staff){&#10;      result += m != null ? m + &quot; &quot; : &quot;&quot;;&#10;    }&#10;    return result;&#10;  }&#10;&#10;  public T getMember(int i){&#10;    if (i &lt; staff.length)&#10;      return (T) staff[i];&#10;    else&#10;      return null;&#10;  }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Tylko klasa &lt;samp&gt;Person&lt;/samp&gt; lub wyprowadzona z niej może zostać parametrem klasy &lt;samp&gt;Team&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Worker extends Person{&#10;  String rank;&#10;  double salary;&#10;&#10;  public Worker(String fName, String lName, String rank, double salary){&#10;    super(fName,lName);&#10;    this.rank = rank;&#10;    this.salary = salary;&#10;  }&#10;&#10;  @Override&#10;  public String toString(){&#10;    return super.toString()+&quot; &quot;+rank+&quot; &quot;+salary;&#10;  }&#10;}&#10;&#10;...&#10;&#10;public static void main(String[] args) {&#10;    Team&amp;lt;Worker&amp;gt; smurfs = new Team&lt;&gt;(4);&#10;    smurfs.add(new Worker(&quot;Ważniak&quot;, &quot;Smurf&quot;, &quot;mądrala&quot;, 10.0));&#10;    smurfs.add(new Worker(&quot;Osiłek&quot;, &quot;Smurf&quot;, &quot;siłacz&quot;, 100.0));&#10;    smurfs.add(new Worker(&quot;Papa&quot;, &quot;Smurf&quot;, &quot;szef&quot;, 1000.0));&#10;    System.out.println(smurfs);&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Ograniczenie z jednej strony blokuje możliwość tworzenia klas &lt;samp&gt;Team&lt;/samp&gt; dla dowolnego typu parametrycznego, z drugiej&#10;  daje pewność, że parametr klasy będzie zaopatrzony w odpowiednie metody i pola klasy ograniczającej. W naszym przykładzie wiemy, że każdy członek&#10;  klasy &lt;samp&gt;Team&lt;/samp&gt; ma pola &lt;samp&gt;firstName&lt;/samp&gt; i &lt;samp&gt;lastName&lt;/samp&gt;, bo takie pola ma klasa ograniczająca &lt;samp&gt;Person&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Ograniczenia mogą dotyczyć także implementacji interfejsów. Ponieważ typ&#10;  parametryczny może jednocześnie dziedziczyć po jednej klasie i jednocześnie&#10;  impementować wiele interfejsów, ograniczenia należy łączyć operatorem &lt;samp&gt;&amp;&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Team&amp;lt;T&amp;gt; extends Person &amp; Comparable&gt;{&#10;&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Część 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Person {&#10;  String firstName;&#10;  String lastName;&#10;  public Person(String fName, String lName){&#10;    firstName = fName;&#10;    lastName = lName;&#10;  }&#10;&#10;  @Override&#10;  public String toString(){&#10;    return firstName+&quot; &quot;+lastName;&#10;  }&#10;}&#10;&#10;class Team&lt;T extends Person&gt;{&#10;  Person[] staff;&#10;  int count = 0;&#10;&#10;  public Team(int size){&#10;    staff = new Person[size];&#10;  }&#10;&#10;  public void add(T member){&#10;    if (count &lt; staff.length) {&#10;      staff[count++] = member;&#10;    }&#10;  }&#10;&#10;  @Override&#10;  public String toString(){&#10;    String result = &quot;&quot;;&#10;    for(Person m: staff){&#10;      result += m != null?m+&quot; &quot;:&quot;&quot;;&#10;    }&#10;    return result;&#10;  }&#10;&#10;  public T getMember(int i){&#10;    if (i &lt; staff.length)&#10;      return (T) staff[i];&#10;    else&#10;      return null;&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  String rank;&#10;  double salary;&#10;&#10;  public Worker(String fName, String lName, String rank, double salary){&#10;    super(fName,lName);&#10;    this.rank = rank;&#10;    this.salary = salary;&#10;  }&#10;&#10;  @Override&#10;  public String toString(){&#10;    return super.toString()+&quot; &quot;+rank+&quot; &quot;+salary;&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Team&lt;Worker&gt; smurfs = new Team&lt;&gt;(4);&#10;    smurfs.add(new Worker(&quot;Ważniak&quot;, &quot;Smurf&quot;, &quot;mądrala&quot;, 10.0));&#10;    smurfs.add(new Worker(&quot;Osiłek&quot;, &quot;Smurf&quot;, &quot;siłacz&quot;, 100.0));&#10;    smurfs.add(new Worker(&quot;Papa&quot;, &quot;Smurf&quot;, &quot;szef&quot;, 1000.0));&#10;    System.out.println(smurfs);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Argument wieloznaczny&lt;/h1&gt;&#10;&lt;p&gt;&#10;Argumentem metody może też być klasa generyczna. Jeśli rolą takiego argumentu jest tylko udostępnienie metody tej klasy, wtedy podanie konkretnego typu&#10; stanowi ograniczenie funkcjonalności.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Problem zilustrujemy przykładem. Klasa generyczna &lt;samp&gt;Duet&lt;/samp&gt; posiada metodę testującą, czy suma wieku obu członków&#10;    jest większa od takiej samej sumy innego duetu.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Duet&amp;lt;T extends Person&amp;gt;{&#10;    Person[] team = new Person[2];&#10;    public Duet(T p1, T p2){&#10;        team[0] = p1;&#10;        team[1] = p2;&#10;    }&#10;&#10;    public boolean isOlder(Duet&amp;lt;T&amp;gt; t){&#10;        return team[0].getAge()+team[1].getAge() &gt; t.team[0].getAge()+t.team[1].getAge();&#10;    }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Gdy utworzymy dwa duety na podstawie dwu różnych klas, to podczas wywoływania metody &lt;samp&gt;isOlder()&lt;/samp&gt; pojawi się problem:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Duet&amp;lt;Person&amp;gt; smurfs =   new Duet&lt;&gt;(new Person(&quot;Ważniak&quot;, LocalDate.of(2000,10,11)),&#10;                        new Person(&quot;Osiłek&quot;, LocalDate.of(2001, 4, 23)));&#10;Duet&amp;lt;Worker&amp;gt; muchomorki = new Duet&lt;&gt;(new Worker(&quot;Turkuć&quot;, LocalDate.of(2000,10,11), 11),&#10;                          new Worker(&quot;Podjadek&quot;, LocalDate.of(2002, 4, 23),234));&#10;System.out.println(smurfs.isOlder(muchomorki));&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;samp&gt;&#10;    Error:(43, 36) java: incompatible types: Duet&amp;lt;Worker&amp;gt; cannot be converted to Duet&amp;lt;Person&amp;gt&#10;&lt;/samp&gt;&#10;&lt;p&gt;&#10;  Komunikat wskazuje, że nie można skonwertować argumentu &lt;samp&gt;muchomorki&lt;/samp&gt; typu &lt;samp&gt;Duet&amp;lt;Worker&amp;gt;&lt;/samp&gt; do typu &lt;samp&gt;Duet&amp;lt;Person&amp;gt;&lt;/samp&gt;. Skąd ten komunikat?&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Przed kompilacją w obiekcie &lt;samp&gt;smurfs&lt;/samp&gt;, parametr &lt;samp&gt;T&lt;/samp&gt; klasy generycznej &lt;samp&gt;Duet&lt;/samp&gt; stała się konkretnym typem &lt;samp&gt;Person&lt;/samp&gt;.&#10;    Metoda &lt;samp&gt;isOlder()&lt;/samp&gt; została skonkretyzowana do metody&#10;    o sygnaturze:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public boolean isOlder(Duet&amp;lt;Person&amp;gt; t);&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    a my w kodzie w miejscu parametru &lt;samp&gt;t&lt;/samp&gt; podaliśmy obiekt &lt;samp&gt;muchomorki&lt;/samp&gt; klasy&#10;    &lt;samp&gt;Team&amp;lt;Worker&amp;gt;&lt;/samp&gt;?!! Stąd komunikat, że typ argumentu wywołania nie pasuje do&#10;    typu w sygnaturze metody.&#10;&lt;/p&gt;&#10;&lt;p&gt;W kodzie kłopotliwej metody korzystamy tylko z metod dostępnych w klasie bazowej parametru generycznego, czyli klasy &lt;samp&gt;Person&lt;/samp&gt;, Dla działania metody nie jest istotne czy argumentem jest duet obiektów&#10;    typu &lt;samp&gt;Person&lt;/samp&gt; lub &lt;samp&gt;Worker&lt;/samp&gt;. Żeby wskazać, że typ argumentu może być dowolny skorzystamy z argumentu wieloznacznego &lt;samp&gt;?&lt;/samp&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class Duet&amp;lt;T extends Person&amp;gt;{&#10;    Person[] team = new Person[2];&#10;    public Duet(T p1, T p2){&#10;        team[0] = p1;&#10;        team[1] = p2;&#10;    }&#10;&#10;    public boolean isOlder(Duet&amp;lt;?&amp;gt; t){&#10;        return team[0].getAge()+team[1].getAge() &gt; t.team[0].getAge()+t.team[1].getAge();&#10;    }&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Ta zmiana powoduje, że przedstawiony przykład już działa poprawnie, a argumentem metody&#10;    może być dowolny obiekt klasy &lt;samp&gt;Duet&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Część 5" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.time.Period;&#10;&#10;class Person {&#10;  String name;&#10;  LocalDate birth;&#10;  public Person(String Name, LocalDate birth){&#10;    this.name = name;&#10;    this.birth = birth;&#10;  }&#10;&#10;  public int getAge(){&#10;    return (Period.between(LocalDate.now(), birth)).getYears();&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  double salary;&#10;  public Worker(String name, LocalDate date, double salary){&#10;    super(name, date);&#10;    this.salary = salary;&#10;  }&#10;}&#10;&#10;class Duet&lt;T extends Person&gt;{&#10;  Person[] team = new Person[2];&#10;  public Duet(T p1, T p2){&#10;    team[0] = p1;&#10;    team[1] = p2;&#10;  }&#10;&#10;  public boolean isOlder(Duet&lt;?&gt; t){&#10;    return team[0].getAge()+team[1].getAge() &gt; t.team[0].getAge()+t.team[1].getAge();&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Duet&lt;Person&gt; smurf = new Duet&lt;&gt;(new Person(&quot;Ważniak&quot;, LocalDate.of(2000,10,11)),&#10;                        new Person(&quot;Osiłek&quot;, LocalDate.of(2001, 4, 23)));&#10;    Duet&lt;Worker&gt; muchomorki = new Duet&lt;&gt;(new Worker(&quot;Turkuć&quot;, LocalDate.of(2000,10,11), 11),&#10;          new Worker(&quot;Podjadek&quot;, LocalDate.of(2002, 4, 23),234));&#10;  System.out.println(smurf.isOlder(muchomorki));&#10;  }&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Podsumowanie&lt;/h1&gt;&#10;&lt;ul&gt;&#10;  &lt;li&gt;&#10;    Termin &quot;typy generyczne&quot; odnosi się do specjalnych klas, które służa do wygenerowania&#10;    konretnych klas.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Typy generyczne to klasy lub interfejsy, które posiadają parametry.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Parametry typów generycznych są typami złożonymi, czyli innymi klasami lub interfejsami.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Parametry generyków podawane są w nawiasach &lt;&gt; np. &lt;code&gt;class Team&amp;lt;T&amp;gt;{}&lt;/code&gt;&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;   Typ generyczny jest tylko szablonem do tworzenia klas lub interfejsów. W chwili deklaracji obiektu typu generycznego np. &lt;code&gt;Team&amp;lt;Person&amp;gt; smurfs = new Team&lt;&gt;();&lt;/code&gt; następuje podstawienie w miejscu  parametru T konkretnego typu i wygenerowanie właściwej klasy.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Typy generyczne mogą posiadać metody z parametrami generycznymi jak i mogą zwracać typ&#10;    generyczny.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Parametry typów generycznych mogą posiadać ograniczenia dotyczące klasy bazowej i/lub implementowanego interfejsu np.: &lt;code&gt;class Team&amp;lt;T extends Person &amp; Comparable&amp;gt;{}&lt;/code&gt; oznacza, że w miejscu parametru &lt;samp&gt;T&lt;/samp&gt; można podać klasę wyprowadzoną z &lt;samp&gt;Person&lt;/samp&gt; i implementującą interfejs &lt;samp&gt;Comparable&lt;/samp&gt;.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Argument wieloznaczny ? służy, do sygnalizowania, że argumentem być obiekt klasy generycznej, której parametr jest dowolnego typu np. w metodzie &lt;code&gt;boolean isOlder(Team&amp;lt;?&amp;gt; team);&lt;/code&gt; argumentem  może być każdy obiekt typy generycznego &lt;samp&gt;Team&lt;/samp&gt;, którego parametrem może być dowolna klasa.&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Podsumowanie" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="&#10;import java.time.LocalDate;&#10;import java.util.*;&#10;&#10;abstract class AbstractField&lt;T&gt;{&#10;  private String name;&#10;  private T type;&#10;  private boolean canRead;&#10;  private boolean canWrite;&#10;  private boolean visible;&#10;&#10;  public AbstractField(String name, T type){&#10;    this.type = type;&#10;    this.name = name;&#10;  }&#10;&#10;  public String getName(){&#10;    return name;&#10;  }&#10;&#10;  public T getType(){&#10;    return type;&#10;  }&#10;}&#10;&#10;interface Enumerable{&#10;  Map&lt;String, AbstractField&gt; values();&#10;&#10;  default void addValue(AbstractField o){&#10;    values().put(o.getName(), o);&#10;  }&#10;&#10;  default AbstractField ofValue(String name){&#10;    if (values().containsKey(name)){&#10;      return values().get(name);&#10;    }&#10;    return null;&#10;  }&#10;&#10;  default void print(){&#10;    for(AbstractField f: values().values()){&#10;      System.out.println(f.getName() +&quot; &quot;+ f.getType());&#10;    }&#10;  }&#10;}&#10;class CountryFields&lt;T&gt; extends AbstractField&lt;T&gt; implements  Enumerable{&#10;  static final CountryFields&lt;Integer&gt; ID = new CountryFields&lt;&gt;(&quot;ID&quot;, 0);&#10;  static final CountryFields&lt;String&gt; NAME = new CountryFields&lt;&gt;(&quot;NAME&quot;, &quot;&quot;);&#10;  static final CountryFields&lt;Entity&gt; CAPITAL = new CountryFields&lt;Entity&gt;(&quot;CAPITAL&quot;, new Entity&lt;CityFields&gt;());&#10;&#10;  public CountryFields(String name, T type) {&#10;    super(name, type);&#10;    addValue(this);&#10;  }&#10;&#10;  @Override&#10;  public Map&lt;String, AbstractField&gt; values() {&#10;    return null;&#10;  }&#10;}&#10;&#10;class CityFields&lt;T&gt; extends AbstractField&lt;T&gt; implements Enumerable{&#10;&#10;  static final CityFields&lt;Integer&gt; GEO_NAME_ID= new CityFields(&quot;GEO_NAME_ID&quot;,1);&#10;  static final CityFields&lt;String&gt;  NAME = new CityFields(&quot;NAME&quot;, &quot;none&quot;);&#10;  static final CityFields&lt;String&gt;  ASCII_NAME = new CityFields(&quot;ASCII_NAME&quot;,&quot;none&quot;);&#10;  static final CityFields&lt;String&gt;  ALTERNATIVE_NAME = new CityFields(&quot;ALTERNATIVE_NAME&quot;,&quot;none&quot;);&#10;&#10;  static Map&lt;String, AbstractField&gt; values;&#10;&#10;  private CityFields(String name, T defaultValue){&#10;    super(name, defaultValue);&#10;    addValue(this);&#10;  }&#10;&#10;  public Map&lt;String, AbstractField&gt; values(){&#10;    if (values == null){&#10;      values = new HashMap&lt;&gt;();&#10;    }&#10;    return values;&#10;  }&#10;&#10;  static void printFields(){&#10;    for(AbstractField f: values.values()){&#10;      CityFields cf = (CityFields) f;&#10;      System.out.println(cf.getName());&#10;    }&#10;  }&#10;&#10;  static public CityFields valueOf(String name){&#10;    return (CityFields) values.get(name);&#10;  }&#10;}&#10;&#10;class Value&lt;T extends AbstractField, V&gt; {&#10;  private V value;&#10;  private T column;&#10;&#10;  public Value(V value, T field) throws Exception {&#10;    if (value == null || isType(value, field) ) {&#10;      this.value = value;&#10;      this.column = field;&#10;    } else{&#10;      throw new Exception(&quot;Invalid type value&quot;);&#10;    }&#10;  }&#10;&#10;  public V getValue(){&#10;    return value;&#10;  }&#10;&#10;  private boolean isType(V value, T field) throws Exception {&#10;    if (value == null) {&#10;      throw new Exception(&quot;Value cannot be null&quot;);&#10;    }&#10;    return field.getType().getClass().isInstance(value);&#10;  }&#10;&#10;  public T getField() {&#10;    return column;&#10;  }&#10;}&#10;&#10;class Entity&lt;T extends AbstractField &amp; Enumerable&gt; {&#10;  private Map&lt;String, Value&gt; values;&#10;  public Entity(){&#10;    values = new HashMap&lt;&gt;();&#10;  }&#10;&#10;  public void setValue(Value&lt;T, ?&gt; value){&#10;    if (value != null)&#10;      values.put(value.getField().getName(), value);&#10;  }&#10;&#10;  public Object getValue(T field){&#10;    if (values.containsKey(field.getName()))&#10;      return values.get(field.getName()).getValue();&#10;    return null;&#10;  }&#10;&#10;  public void printValues(){&#10;    for (Value v: values.values()){&#10;      System.out.println(v.getValue());&#10;    }&#10;  }&#10;  @Override&#10;  public String toString(){&#10;    StringBuilder b = new StringBuilder();&#10;    for (Value v: values.values()){&#10;      System.out.println(v.getValue());&#10;      b.append(v.getField().getName() + &quot;: &quot; + v.getValue() +&quot;, &quot;);&#10;    }&#10;    return b.append(&quot;\b\b&quot;).toString();&#10;  }&#10;&#10;  public String toStringValues(){&#10;    StringBuilder b = new StringBuilder();&#10;    for (Value v: values.values()){&#10;      b.append(v.getField().getName()+&quot;\t&quot;);&#10;    }&#10;    return b.append(&quot;\b\b&quot;).toString();&#10;  }&#10;}&#10;&#10;&#10;class City{&#10;  int geoNameId;&#10;  String name;&#10;  String asciiName;&#10;  String alternateNames;&#10;  double latitutude;&#10;  double longitude;&#10;  String featureClass;&#10;  String featureCode;&#10;  String countryCode;&#10;  String cc2;&#10;  String admin1Code;&#10;  String admin2Code;&#10;  String admin3Code;&#10;  String admin4Code;&#10;  long population;&#10;  int elevation;&#10;  int dem;&#10;  String timeZone;&#10;  LocalDate modificationDate;&#10;&#10;  public City(String row){&#10;    String[] fields = row.split(&quot;\t&quot;);&#10;  }&#10;}&#10;&#10;public class Task {&#10;  public static void main(String[] args) throws Exception {&#10;    CityFields.printFields();&#10;    System.out.println(CityFields.valueOf(&quot;NAME&quot;));&#10;    Entity&lt;CityFields&gt; city = new Entity&lt;&gt;();&#10;    city.setValue(new Value&lt;CityFields, String&gt;(&quot;WARSAW&quot;, CityFields.NAME));&#10;    city.setValue(new Value&lt;CityFields, Integer&gt;(1, CityFields.GEO_NAME_ID));&#10;    System.out.println(city);&#10;    Entity&lt;CountryFields&gt; poland = new Entity&lt;&gt;();&#10;    poland.setValue(new Value&lt;&gt;(&quot;POLAND&quot;, CountryFields.NAME));&#10;    poland.setValue(new Value&lt;&gt;(1,CountryFields.ID));&#10;    //poland.setValue(new Value&lt;CountryFields, Entity&gt;(city, CountryFields.CAPITAL));&#10;    System.out.println(poland);&#10;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="4" />
                      <option name="name" value="Kolekcje" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map>
                                <entry key="images/collections.png">
                                  <value>
                                    <AdditionalFile>
                                      <option name="text" value="" />
                                      <option name="visible" value="true" />
                                    </AdditionalFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Wstęp&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Przedstawione w bloku &quot;Java. Programowanie podstawowe&quot; przykłady struktur danych, były&#10;    bardzo prymitywne i mało elastyczne. W praktyce programiści wykorzystują gotowe implementacje&#10;    najbardziej znanych i popularnych struktur danych. Zgromadzone są one w bibliotece powszechnie nazywanej kolekcjami (ang. Collections). Na kolekcje składa się kilka interfejsów, które&#10;    stanowią poniższą hierarchię:&#10;&lt;/p&gt;&#10;&lt;img src=&quot;images\collections.png&quot;&gt;&#10;&lt;p&gt;&#10; W tej części będziemy omawiać kolekcje typu:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        List - listy, które są sekwencyjną elementów, z których każdy ma swój numer - indeks,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Set - zbiory, które zawierają elementy niepowtarzalne, a ich kolejność nie ma znaczenia.&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        Map - mapy, które gromadzą elementy identyfikowane przez klucz&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;    Biblioteki posiadają także niezbędne metody do manipulowania strukturami, aby&#10;    w łatwiejszy sposób przetwarzać dane.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Podstawą funkcjonowania wszystkich kolekcji (oprócz Map) jest wspólny interfejs generyczny Collections&amp;lt;E&amp;gt;, który posiada m.in. poniższe metody:&#10;&lt;/p&gt;&#10;&lt;table border=&quot;&quot; bgcolor=&quot;#123456&quot; cellpadding=&quot;4&quot; align=&quot;center&quot;&gt;&#10;    &lt;tr&gt;&#10;        &lt;td width=&quot;40%&quot;&gt;&#10;            &lt;code&gt;boolean add(E e)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Dodaje element typu &lt;samp&gt;E&lt;/samp&gt; do kolekcji i zwraca &lt;samp&gt;true&lt;/samp&gt; jeśli nastąpiła zmiana kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean addAll(Collection&lt;? extends E&gt; c)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Dodaje wszystkie elementy z kolekcji &lt;samp&gt;c&lt;/samp&gt; i zwraca &lt;samp&gt;true&lt;/samp&gt;, jeśli&#10;            nastąpiła zmiana zawartości kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean remove(Object o)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Usuwa element z kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean removeAll(Collection&lt;?&gt; c)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Usuwa wszystkie elementy zawarte w kolekcji &lt;samp&gt;c&lt;/samp&gt;.&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean retainAll(Collection&lt;?&gt; c)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Usuwa wszystkie elemementy, które nie są zawarte w kolekcji &lt;samp&gt;c&lt;/samp&gt;&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean removeIf(Predicate&lt;? super E&gt; filter)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Usuwa elementy spełniające warunki zawarte w &lt;samp&gt;filter&lt;/samp&gt;&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;void clear()&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Usuwa wszystkie elementy kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;int size()&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca liczbę elementów w kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean isEmpty()()&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca &lt;samp&gt;true&lt;/samp&gt; jeśli kolekcja jest pusta&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean contains(Object o)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca &lt;samp&gt;true&lt;/samp&gt; jeśli w kolekcji znajduje się element &lt;samp&gt;o&lt;/samp&gt;&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;boolean containsAll(Collection&lt;?&gt; c)&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca &lt;samp&gt;true&lt;/samp&gt; jeśli w kolekcji znajdują się elementy&#10;            z kolekcji &lt;samp&gt;c&lt;/samp&gt;&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;Iterator&lt;E&gt; iterator()&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca obiekt iteratora.&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;tr&gt;&#10;        &lt;td&gt;&#10;            &lt;code&gt;Object[] toArray()&lt;/code&gt;&#10;        &lt;/td&gt;&#10;        &lt;td&gt;&#10;            Zwraca tablicę zawierająca wszystkie elementy kolekcji&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;&lt;/table&gt;&#10;&lt;p&gt;&#10;    Kolejne interfejsy jak List, Set lub Queue wzbogacają listę metod, które&#10;    zapewniają funkcjonowanie konkretnych struktur. Jednak korzystając tylko&#10;    z metod tego podstawowego interfejsu możemy już tworzyć proste strktury jak&#10;    odpowiednik tablicy jednowymiarowej. Aby to zrobić musimy sięgnąć do klas kolekcji, które&#10;    implementują strukturę kolekcji. Dzięki znajomości tylko metod interfejsu możemy&#10;    w jednolity sposób odwoływać się do różnych implementacji kolekcji.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Podstawowe dwie klasy kolekcji do tworzenia list są &lt;samp&gt;ArrayList i &lt;samp&gt;LinkedList&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public static void main(String[] args) {&#10;    //Tworzymy kolekcję elementów typu String na podstawie klasy ArrayList&#10;    Collection&amp;lt;String&amp;gt; membersA = new ArrayList&amp;lt;String&amp;gt;();&#10;    //dodajemy elementy do kolekcji&#10;    membersA.add(&quot;ELA&quot;);&#10;    membersA.add(&quot;ALA&quot;);&#10;    membersA.add(&quot;OLA&quot;);&#10;    //rozmiar kolekcji&#10;    System.out.println(membersA.size());&#10;    //usuwamy wszystkie elementy z kolekcji&#10;    membersA.clear();&#10;    //rozmiar kolekcji&#10;    System.out.println(membersA.size());&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Program w przykładzie będzie działać tak samo gdy zmienimy rodzaj implementacji kolekcji na &lt;samp&gt;LinkedList&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Collection&amp;lt;String&amp;gt; membersA = new LinkedList&amp;lt;String&amp;gt;();&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ListDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListDemo.java" />
                                      <option name="text" value="import java.util.ArrayList;&#10;import java.util.Collection;&#10;&#10;class ListDemo{&#10;  public static void main(String[] args) {&#10;    //Tworzymy kolekcję elementów typu String na podstawie klasy ArrayList&#10;    Collection&lt;String&gt; membersA = new ArrayList&lt;String&gt;();&#10;    //dodajemy elementy do kolekcji&#10;    membersA.add(&quot;ELA&quot;);&#10;    membersA.add(&quot;ALA&quot;);&#10;    membersA.add(&quot;OLA&quot;);&#10;    //rozmiar kolekcji&#10;    System.out.println(membersA.size());&#10;    //usuwamy wszystkie elementy z kolekcji&#10;    membersA.clear();&#10;    //rozmiar kolekcji&#10;    System.out.println(membersA.size());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Iteratory&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Rolą iteratora jest przechodzenie przez wszystkie elementy kolekcji, bez względu na ich typ lub&#10;    rodzaj implementacji kolekcji. Iterator można traktować jak wskaźnik, kursor, który porusza się&#10;    przez kolejne elementy kolekcji. W danej chwili wskazuje na bieżący element i daje możliwość&#10;    pobrania lub usunięcia go, sprawdzenia, czy istnieje kolejny lub przejście do następnego elementu. Iteratory implementują interfejs generyczny &lt;samp&gt;Iterator&lt;/samp&gt; lub&#10;    &lt;samp&gt;ListIterator&lt;/samp&gt;:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;          &lt;code&gt;interface Iterator&amp;lt;E&amp;gt;&lt;/code&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;interface ListIterator&amp;lt;E&amp;gt;&lt;/code&gt;&#10;    &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    gdzie E to typ elementu kolekcji&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Najważniejsze trzy metody obu interfejsów to:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;boolean hasNext()&lt;/code&gt; - testuje, czy w kolekcji jest następny element&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;E next()&lt;/code&gt; - zwraca następny element i zgłasza wyjątek &lt;samp&gt;IllegalElementException&lt;/samp&gt;, gdy brak elementu&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;void remove()&lt;/code&gt; - usuwa bieżący element&#10;    &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Przykład ilustrujący wykorzystania iteratora do pobierania elementów kolekcji:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public static void main(String[] args) {&#10;    //utworzenie kolekcji&#10;    Collection&amp;lt;String&amp;gt; members = new ArrayList&amp;lt;String&amp;gt;();&#10;    //dodanie elementów&#10;    members.add(&quot;ALA&quot;);&#10;    members.add(&quot;OLA&quot;);&#10;    members.add(&quot;ELA&quot;);&#10;    //pobranie iteratora&#10;    Iterator&amp;lt;String&amp;gt; iterator = members.iterator();&#10;    //przeglądanie kolekcji&#10;    while(iterator.hasNext()){&#10;      //jeśli wielokrotnie chcemy odwoływać się do bieżącego elementu to należy go zapamietać w zmiennej&#10;      String currentMember = iterator.next();&#10;      //usunięcie kolekcji&#10;      iterator.remove();&#10;      System.out.println(&quot;Uczestnik &quot;+currentMember);&#10;      System.out.println(&quot;Liczba uczestników &quot;+members.size());&#10;    }&#10;  }&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Przykład ilustruje typowe wykrzystanie iteratora do przeglądania kolekcji.&#10;    Pobrany z kolekcji iterator ustawiony jest &lt;b&gt;przed&lt;/b&gt; pierwszym elementem, a wiec nie wskazuje pierwszego elementu.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Znacznie większe możliwości posiada &lt;samp&gt;ListIterator&lt;/samp&gt;, który posiada następujące metody:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;void add(&amp;lt;E&amp;gt; obj)&lt;/code&gt; - wstawia nowy element za bieżącym&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;boolean hasNext()&lt;/code&gt; - testuje, czy w kolekcji jest następny element&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;boolean hasPrevious()&lt;/code&gt; - testuje czy istnieje poprzedni element&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;int nextIndex()&lt;/code&gt; - zwraca indeks następnego elementu&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;int previousIndex()&lt;/code&gt; - zwraca indeks poprzedniego elementu&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;E next()&lt;/code&gt; - przesuwa iterator do następnego elementu jednocześnie&#10;        zwracając go&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;E previous()&lt;/code&gt; - przesuwa iterator do poprzedniego elementu&#10;        jednocześnie zwracając go&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;void remove()&lt;/code&gt; - usuwa bieżący element&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;void set(E obj)&lt;/code&gt; - w miejsce bieżącego elementu wstawia obj&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Iterator listy ma o wiele większe możliwości, dając możliwość&#10;    przesuwania się w obu kierunkach, dodawania lub podmieniania elementów w&#10;    kolekcji.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Przykład poniżej ilustruje możliwości iteratora listy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public static void main(String[] args) {&#10;    Collection&amp;lt;String&amp;gt; members = new ArrayList&amp;lt;String&amp;gt;();&#10;&#10;    members.add(&quot;ALA&quot;);&#10;    members.add(&quot;BEATA&quot;);&#10;    members.add(&quot;KAROLINA&quot;);&#10;    members.add(&quot;MONIKA&quot;);&#10;    //pobranie iteratora&#10;    ListIterator&amp;lt;String&amp;gt; iterator = ((ArrayList&amp;lt;String&amp;gt;) members).listIterator();&#10;    //przeglądanie kolekcji&#10;    while(iterator.hasNext()){&#10;      String currentMember = iterator.next();&#10;      //usuwamy element&#10;      if (currentMember.length() == 3) {&#10;        iterator.remove();&#10;        continue;&#10;      }&#10;      //wstawiamy nowy element za bieżącym&#10;      if (currentMember.length() &lt; 7) {&#10;        iterator.add(&quot;KAROL&quot;);&#10;        continue;&#10;      }&#10;    }&#10;    iterator = ((ArrayList&amp;lt;String&amp;gt;) members).listIterator();&#10;    while(iterator.hasNext()){&#10;      System.out.println(iterator.next());&#10;    }&#10;&#10;  }&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Bardzo ważną zaletą tego iteratora jest możliwość manipulowania&#10;    zawartością kolekcji podczas jej iterowania.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Część 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/IteratorDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IteratorDemo.java" />
                                      <option name="text" value="import java.util.ArrayList;&#10;import java.util.Collection;&#10;import java.util.Iterator;&#10;import java.util.ListIterator;&#10;&#10;class IteratorDemo {&#10;  public static void main(String[] args) {&#10;    Collection&lt;String&gt; members = new ArrayList&lt;String&gt;();&#10;&#10;    members.add(&quot;ALA&quot;);&#10;    members.add(&quot;BEATA&quot;);&#10;    members.add(&quot;KAROLINA&quot;);&#10;    members.add(&quot;MONIKA&quot;);&#10;    //pobranie iteratora&#10;    ListIterator&lt;String&gt; iterator = ((ArrayList&lt;String&gt;) members).listIterator();&#10;    //przeglądanie kolekcji&#10;    while(iterator.hasNext()){&#10;      String currentMember = iterator.next();&#10;      //usuwamy element&#10;      if (currentMember.length() == 3) {&#10;        iterator.remove();&#10;        continue;&#10;      }&#10;      //wstawiamy nowy element za bieżącym&#10;      if (currentMember.length() &lt; 7) {&#10;        iterator.add(&quot;KAROL&quot;);&#10;        continue;&#10;      }&#10;    }&#10;    iterator = ((ArrayList&lt;String&gt;) members).listIterator();&#10;    while(iterator.hasNext()){&#10;      System.out.println(iterator.next());&#10;    }&#10;&#10;  }&#10;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Listy&lt;/h1&gt;&#10;&lt;p&gt;&#10;Interfejs&lt;samp&gt;List&lt;/samp&gt; służy do implementacji list, czyli sekwencji elementów, które są dostępne poprzez indeks, podobnie jak elementy tablicy.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Interfejs &lt;samp&gt;List&lt;/samp&gt; wzbogaca metody z interfeksu &lt;samp&gt;Collection&lt;/samp&gt;&#10;    o dodatkowe metody:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt; void add(int index, E obj)&lt;/code&gt; - wstawia element obj na pozycji index&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt; void addAll(int index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; - wstawia elementy kolekcji c począwszy do pozycji index&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt; E get(int index)&lt;/code&gt; - zwraca element przechowywany pod wskazanymm indeksem&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;    &lt;code&gt;E remove(int index)&lt;/code&gt; - usuwa element przechowywany pod wskazanym&#10;        indeksem&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;E set(int index, E obj)&lt;/code&gt; - zamienia element o podanym indeksie na nowy &lt;samp&gt;obj&lt;/samp&gt; zwracając poprzedni element&lt;/li&gt;&#10;    &lt;li&gt;&#10;    &lt;code&gt;List&amp;lt;E&amp;gt;subList(int start, int end)&lt;/code&gt; - zwraca podlistę&#10;        elementów w zakresie indeksów od &lt;samp&gt;start&lt;/samp&gt; do &lt;samp&gt;end&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasy implementujące interfejs &lt;samp&gt;List&lt;/samp&gt; to &lt;samp&gt;ArrayList&lt;/samp&gt; i &lt;samp&gt;LinkedList&lt;/samp&gt;, obie są&#10;    klasami parametrycznymi, a parametrem jest typ elementu przechowywanego w liście.&#10;&lt;/p&gt;&#10;&lt;h2&gt;ArrayList&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Klasa ta realizuje kolekcję przechowywaną w wewnętrznej, tradycyjnej tablicy. Różnicą&#10;    w stosunku do zwykłej tablicy jest zmiana rozmiaru kolekcji trakcie dodawania lub usuwania elementów. Kolekcja na początku tworzy niewielką tablicę, po jej wypełnieniu, tworzona jest nowa, większa i do niej przenoszone są elementy. To czyni &lt;samp&gt;ArrayList&lt;/samp&gt; rodzajem dynamicznej tablicy, która łaczy szybki dostęp do elementów jak w w tablicy tradycyjnej, z elastyczną zmianą rozmiaru w zależności od potrzeb. Ujemnym aspektem jest narzut czasowy w chwili znacznej zmiany rozmiaru wewnętrznej tablicy w trakcie dodawaniau lub usuwania elementów.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Tworzenie obiektów klasy &lt;samp&gt;ArrayList&lt;/samp&gt; odbywa się trzema konstruktorami:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;ArrayList()&lt;/code&gt; - tworzy listę z pustą tablicą wewnętrtzną&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;ArrayList(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; - tworzy listę zazwierjącą elementy z koleckji c&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;ArrayList(int capacity)&lt;/code&gt; - tworzy pustą listę z ustawioną&#10;    pojemnością tablicy wewnętrznej&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Można jawnie wpływać na pojemność wewnętrznej tablicy listy, gdy jesteśmy pewni, że&#10;    będzie taka potrzebna:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;    &lt;code&gt;void ensureCapacity(int cap)&lt;/code&gt; - zwiększa pojemność do listy &lt;samp&gt;cap&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;void trimToSize(int cap)&lt;/code&gt; - zmniejsza pojemność, jeśli liczba elementów&#10;        jest od niej mniejsza.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;LinkedList&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Jest to typowa struktura dowiązaniowa, każde wstawienie elementu powoduje utworzenie węzła, który jest dodawany do listy. Zaletą struktury jest automatyczne dostosowanie rozmiaru kolekcji w miarę dodawania&#10;    lub usuwania elementów. Minusem jest czas dostępu do dowolnego elementu, który zależy od&#10;    zajmowanego miejsca w liście, im dalej element znajduje się od początku listy, tym więcej czasu&#10;    potrzeba na dostanie się do niego. Kolekcja najlepiej się sprawdza w sytuacjach, gdy elementy&#10;    są przeglądane sekwencyjnie i nie ma potrzeby dostępu losowego.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasa &lt;samp&gt;LinkedList&lt;/samp&gt; implementuje także interfejs &lt;samp&gt;Deque&lt;/samp&gt;, który zawiera metody obsługi&#10;    listy dwukierunkowej.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasa posiada dwa konstruktory:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;LinkedList()&lt;/code&gt; - tworzy listę z &lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;LinkedList(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; - tworzy listę zawierjącą elementy z kolekcji c&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Część 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ArrayListDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ArrayListDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.Iterator;&#10;import java.util.List;&#10;&#10;class ArrayListDemo {&#10;  public static void main(String[] args) {&#10;    List&lt;Person&gt; arrayTeam = new ArrayList&lt;&gt;();&#10;    arrayTeam.add(new Person(&quot;ADAM&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1997-10-14&quot;)));&#10;    arrayTeam.add(new Person(&quot;BEATA&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1998-11-24&quot;)));&#10;    arrayTeam.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1987-01-04&quot;)));&#10;    //dodajemy dwa różne obiekty, które mają te same dane&#10;    arrayTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;    arrayTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;&#10;    Person a = new Person(&quot;KONRAD&quot;, &quot;BAS&quot;,LocalDate.parse(&quot;1986-08-13&quot;));&#10;    //dodajemy dwa razy ten sam obiekt a&#10;    arrayTeam.add(a);&#10;    arrayTeam.add(a);&#10;    Iterator&lt;Person&gt; i = arrayTeam.iterator();&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;    //usunięcie&#10;    arrayTeam.remove(4);&#10;    arrayTeam.remove(a);&#10;    i = arrayTeam.iterator();&#10;&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LinkedListDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LinkedListDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.Iterator;&#10;import java.util.LinkedList;&#10;import java.util.List;&#10;&#10;public class LinkedListDemo {&#10;  public static void main(String[] args) {&#10;    List&lt;Person&gt; arrayTeam = new LinkedList&lt;&gt;();&#10;    arrayTeam.add(new Person(&quot;ADAM&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1997-10-14&quot;)));&#10;    arrayTeam.add(new Person(&quot;BEATA&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1998-11-24&quot;)));&#10;    arrayTeam.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1987-01-04&quot;)));&#10;    //dodajemy dwa różne obiekty, które mają te same dane&#10;    arrayTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;    arrayTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;&#10;    Person a = new Person(&quot;KONRAD&quot;, &quot;BAS&quot;,LocalDate.parse(&quot;1986-08-13&quot;));&#10;    //dodajemy dwa razy ten sam obiekt a&#10;    arrayTeam.add(a);&#10;    arrayTeam.add(a);&#10;    Iterator&lt;Person&gt; i = arrayTeam.iterator();&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return firstName+&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Zbiory - Set&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Elementy przechowywane w zbiorach są unikalne, dodanie wartości, która już występuje w zbiorze, nie powoduje zmian w kolekcji.&#10;&lt;/p&gt;&#10;&lt;h1&gt;Interfejs Set&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Parametryczny interfejs &lt;samp&gt;Set&lt;/samp&gt; rozszerza interfejs &lt;samp&gt;Collection&lt;/samp&gt;, ale nie definiuje żanych własnych metod. Metoda &lt;samp&gt;add()&lt;/samp&gt; zwróci &lt;samp&gt;false&lt;/samp&gt; jeśli dodawany element występuje już w zbiorze.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasami implementującymi interfejs &lt;samp&gt;Set&lt;/samp&gt; są klasy parametryczne &lt;samp&gt;HashSet&lt;/samp&gt;, &lt;samp&gt;LinkedHashSet&lt;/samp&gt; oraz &lt;samp&gt;TreeSet&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;h1&gt;Interfejs SortedSet&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Rozszerza interfejs &lt;samp&gt;Set&lt;/samp&gt; poprzez dodanie metod odpowiedzialnych za zachowanie zbioru elementów&#10;    posortowanych rosnącą. Jest to także interfejs parametryczny.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Metody zbioru posortowanego:&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;    &lt;code&gt;E first()&lt;/code&gt; - zwraca pierwszy element zbioru&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;E last()&lt;/code&gt; - zwraca ostatni element zbioru&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedSet&amp;lt;E&amp;gt; headSet(E end)&lt;/code&gt; - zwraca posortowany podzbiór od początku zawierający elementy nie większe od argumentu &lt;samp&gt;end&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedSet&amp;lt;E&amp;gt; tailSet(E start)&lt;/code&gt; - zwraca posortowany podzbiór od końca zawierający elementy nie mniejsze od argumentu &lt;samp&gt;start&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedSet&amp;lt;E&amp;gt; headSet(E end)&lt;/code&gt; - zwraca posortowany podzbiór od początku zawierający elementy nie większe od argumentu &lt;samp&gt;end&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedSet&amp;lt;E&amp;gt; subSet(E start, E end)&lt;/code&gt; - zwraca posortowany podzbiór zawierający elementy nie mniejsze &lt;samp&gt;start&lt;/samp&gt; i nie większe od &lt;samp&gt;end&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasą implementujacą ten interfejs jest &lt;samp&gt;TreeSet&lt;/samp&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Klasa HashSet&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Klasa &lt;samp&gt;HashSet&lt;/samp&gt; zawiera wewnętrzną tablicę mieszającą, której rolą jest szybki dostęp&#10;    do elementów zbioru na podstawie tzw. skrótu. Wartość elementu, który ma trafić do zbioru, służy&#10;    do utworzenia specjalnej wartości skrótu, który staje się rodzajem indeksu. Posługując się&#10;    tym indeksem można w czasie liniowym (podobnym jak czas odczytu komórki tablicy) wstawić lub usunąć element, a także go odczytać a nawet sprawdzić czy taki istnieje. Klasa nie gwarantuje&#10;    zachowania kolejności elementów zgodnie z kolejnościa wstawiania do zbioru.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Deklaracja klasy: &lt;code&gt; class HashSet&amp;lt;E&amp;gt;&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Konstruktory klasy &lt;samp&gt;HashSet&lt;/samp&gt;:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashSet()&lt;/code&gt; - utworznie zbioru mieszającego,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashSet(Collection &amp;lt; extends E&amp;gt; c)&lt;/code&gt; - utworzenie i wypełnienie zbioru elementami kolekcji &lt;samp&gt;c&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashSet(int capacity)&lt;/code&gt; - utworzenie zbioru o poczatkowej pojemności &lt;samp&gt;capacity&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashSet(int capacity, float fillRatio)&lt;/code&gt; - utworzenie zbioru o początkowej pojemności capacity i podanym wpsółczynniku wypełnienia (zakres od 0 do 1).&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Współczynnik wypełnienia określa moment, kiedy następuje rozszerzenie wewnętrznej tablicy. Gdy liczba elementów zbioru jest staje się większa od pojemności pomnożonej przez współczynnik wypełnienia to następuje utworznie, nowej i większej tablicy. Domyślna wartość wpsółczynnika wypełnienia wynosi 0,75.&#10;&lt;/p&gt;&#10;&lt;h2&gt;Klasa LinkedHashSet&lt;/h2&gt;&#10;&lt;p&gt;&#10;Klasa &lt;samp&gt;LinkedHashSet&lt;/samp&gt; jest wyprowadzona z klasy &lt;samp&gt;HashSet&lt;/samp&gt;, ale nie dodaje żadnych nowych metod. Różnica między obiema klasami polega na sposobie przechowywwania elementów. W klasie &lt;samp&gt;LinkedHashSet&lt;/samp&gt; wykorzystywana jest lista dowiązaniowa, co powoduje, że zachowana jest kolejność wstawianych elementów.&#10;&lt;/p&gt;&#10;&lt;h2&gt;Klasa TreeSet&lt;/h2&gt;&#10;&lt;p&gt;&#10;W tej klasie elementy przechowywane są w strukturze dowiązaniowej zorganizowanej w drzewo. Elementy w zbiorze są posortowane rosnąco. Dostęp do elementów jest bardzo szybki.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;Sygnatury klasy: &lt;code&gt;class TreeSet&amp;lt;E&amp;gt;&gt;&lt;/code&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Konstruktory:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeSet()&lt;/code&gt; - tworzy nowy, pusty zbiór&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeSet(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; - tworzy nowy zbiór wypełniony elementami kolekcji c&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeSet(Comparator&amp;lt;? super E&amp;gt; comp)&lt;/code&gt; - tworzy nowy zbiór, który będzie sortował elementy zgodnie z funkcją komparatora &lt;samp&gt;comp&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeSet(SortedSet&amp;lt;E&amp;gt; ss)&lt;/code&gt; - tworzy nowy zbiór wypełniony elementami zbioru&#10;        &lt;samp&gt;ss&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Część 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/HashSetDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/HashSetDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.HashSet;&#10;import java.util.Iterator;&#10;import java.util.Set;&#10;&#10;class HashSetDemo {&#10;  public static void main(String[] args) {&#10;    Set&lt;Person&gt; team = new HashSet&lt;&gt;(10);&#10;    team.add(new Person(&quot;ADAM&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1997-10-14&quot;)));&#10;    team.add(new Person(&quot;BEATA&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1998-11-24&quot;)));&#10;    team.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1987-01-04&quot;)));&#10;    //dodajemy dwa różne obiekty, które mają te same dane&#10;    team.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;    team.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;&#10;    Person a = new Person(&quot;KONRAD&quot;, &quot;BAS&quot;,LocalDate.parse(&quot;1986-08-13&quot;));&#10;    //dodajemy dwa razy ten sam obiekt a&#10;    //obiekt a zostanie dodany tylko raz&#10;    team.add(a);&#10;    team.add(a);&#10;    //elememnty są wyświetlone w innej, przypadkowej kolejności niż podczas wstawiania&#10;    Iterator&lt;Person&gt; i = team.iterator();&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LinkedHashSetDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LinkedHashSetDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.Iterator;&#10;import java.util.LinkedHashSet;&#10;import java.util.Set;&#10;&#10;public class LinkedHashSetDemo {&#10;  public static void main(String[] args) {&#10;    Set&lt;Person&gt; sortedTeam = new LinkedHashSet&lt;&gt;();&#10;    sortedTeam.add(new Person(&quot;ADAM&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1997-10-14&quot;)));&#10;    sortedTeam.add(new Person(&quot;BEATA&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1998-11-24&quot;)));&#10;    sortedTeam.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1987-01-04&quot;)));&#10;    //dodajemy dwa różne obiekty, które mają te same dane&#10;    sortedTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;    sortedTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;&#10;    Person a = new Person(&quot;KONRAD&quot;, &quot;BAS&quot;,LocalDate.parse(&quot;1986-08-13&quot;));&#10;    //dodajemy dwa razy ten sam obiekt a&#10;    //obiekt a zostanie dodany tylko raz&#10;    sortedTeam.add(a);&#10;    sortedTeam.add(a);&#10;    //elementy zbioru są wyświetlone w tej samej kolejności jak podczas wstawiania&#10;    Iterator&lt;Person&gt; i = sortedTeam.iterator();&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.Comparator;&#10;&#10;class Person implements Comparator&lt;Person&gt;{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(){&#10;  }&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return firstName+&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;  }&#10;&#10;  @Override&#10;  public int compare(Person o1, Person o2) {&#10;    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk&#10;    if (o1.lastName.compareTo(o2.lastName) != 0){&#10;      return o1.lastName.compareTo(o2.lastName);&#10;    }&#10;    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion&#10;    if (o1.firstName.compareTo(o2.firstName) != 0){&#10;      return o1.firstName.compareTo(o2.firstName);&#10;    }&#10;    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia&#10;    return o1.birthDate.compareTo(o2.birthDate);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TreeSetDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TreeSetDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.*;&#10;&#10;public class TreeSetDemo {&#10;  public static void main(String[] args) {&#10;    //&#10;    Set&lt;Person&gt; treeTeam = new TreeSet&lt;&gt;(new Person());&#10;    treeTeam.add(new Person(&quot;ADAM&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1997-10-14&quot;)));&#10;    treeTeam.add(new Person(&quot;BEATA&quot;,&quot;CAŁA&quot;, LocalDate.parse(&quot;1998-11-24&quot;)));&#10;    treeTeam.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1987-01-04&quot;)));&#10;    //dodajemy dwa różne obiekty, które mają te same dane&#10;    treeTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;    treeTeam.add(new Person(&quot;PAWEŁ&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1993-10-22&quot;)));&#10;&#10;    Person a = new Person(&quot;KONRAD&quot;, &quot;BAS&quot;,LocalDate.parse(&quot;1986-08-13&quot;));&#10;    //dodajemy dwa razy ten sam obiekt a&#10;    //obiekt a zostanie dodany tylko raz&#10;    treeTeam.add(a);&#10;    treeTeam.add(a);&#10;    //elementy zbioru są wyświetlone w kolejności rosnącej&#10;    Iterator&lt;Person&gt; i = treeTeam.iterator();&#10;    while(i.hasNext()){&#10;      System.out.println(i.next());&#10;    }&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Mapy - Map&lt;/h1&gt;&#10;&lt;p&gt;Mapy to wyspecjalizowany rodzaj kolekcji, której elementy dostępne przez inną wartość zwaną kluczem. Kluczem&#10;może być liczba, łańcuch, data itd., czyli wartość dowolnego typu. Kolejność elementów w mapie nie ma znaczenia. Każdy klucz w mapie jest unikatowy, ale wartości mogą się powtarzać. Nie można iterować mapy, ale można uzyskać widoki mapy w postaci kolekcji, które już dają możliwośc uzyskania iteratora.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;Czas dostęp do elementów jest podobny jak w tablicach, a więc liniowy, i nie zależy od rozmiaru mapy.&lt;/p&gt;&#10;&lt;p&gt;&#10;    Istnieje kilka interfejsów map, które zawierają zbiory metod do przetwarzania danej wersji mapy.&#10;&lt;/p&gt;&#10;&lt;h2&gt;Interfejs Map&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Interfejs Map posiada dwa parametry: &lt;code&gt;interface Map&amp;lt;K,V&amp;gt;&lt;/code&gt;, gdzie &lt;samp&gt;K&lt;/samp&gt; jest typem klucza a &lt;samp&gt;V&lt;/samp&gt; to typ wartości przechowywanej w mapie.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Dwie podstawowe operacje na mapach to:&#10;    &lt;ul&gt;&#10;        &lt;li&gt;&#10;            &lt;code&gt;V get(K key)&lt;/code&gt; - pobranie elementu o podanym kluczy&#10;        &lt;/li&gt;&#10;        &lt;li&gt;&#10;            &lt;code&gt;V put(K key, V value)&lt;/code&gt; - wstawienie elementu &lt;samp&gt;value&lt;/samp&gt; z kluczem &lt;samp&gt;key&lt;/samp&gt;, jeśli w&#10;            mapie istniał już element o takim kluczo, to zostanie nadpisany, a poprzednia jego wartość zostanie zwrócona&#10;            przez metodę&#10;        &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;V remove(Object k)&lt;/code&gt; - usunięcie elementu o kluczu k, funkcja zwraca usuwany element&#10;    &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Oprócz tego interfejs dostarcza kilku metod zwracających kolekcje:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;Set&amp;lt;K&amp;gt; keySet()&lt;/code&gt; - zwraca zbiór kluczy mapy w postaci widoku&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt; - zwraca kolekcję wartości mapy w postaci widoku&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;Collection&amp;lt;V&amp;gt; values()&lt;/code&gt; - zwraca kolekcję wartości mapy w postaci widoku&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;h2&gt;Interfejs SortedMap&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Jest to rozszerzenie interfejsu &lt;samp&gt;Map&lt;/samp&gt; do tworzenia map, które przechowują elementy w porządku rosnącym&#10;    kluczy. Deklaracja interfejsu: &lt;code&gt;interface SortedMap&amp;lt;K, V&amp;gt;&lt;/code&gt;, gdzie znaczenie parametrów jest takie samo jak w interfejsie &lt;samp&gt;Map&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Metody charakterystyczne dla tego interfejsu to:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;K firstKey()&lt;/code&gt; - zwraca pierwszy klucz  mapy&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;K lastKey()&lt;/code&gt; - zwraca ostatni klucz  mapy&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedMap&amp;lt;K, V&amp;gt; headMap(K end)&lt;/code&gt; - zwraca posortowaną mapę, której klucze są mniejsze od end&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedMap&amp;lt;K, V&amp;gt; tailMap(K start)&lt;/code&gt; - zwraca posortowaną mapę, której klucze są większe od start&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;SortedMap&amp;lt;K, V&amp;gt; headMap(K, start, K end)&lt;/code&gt; - zwraca posortowaną mapę, której klucze są nie mniejsze od &lt;samp&gt;start&lt;/samp&gt; i nie większe od &lt;samp&gt;end&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;h2&gt;Interfejs NavigableMap&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Interfejs rozszerzający &lt;samp&gt;SortedMap&lt;/samp&gt; służy do tworzenia klas obsługujących wyszukiwanie wpisów według najbliższego dopasowania do podanego klucza lub kluczy. Jeśli chcesz dowiedzieć się więcej o tym interfejsie zajrzyj do dokumentacji.&#10;&lt;/p&gt;&#10;&lt;h1&gt;Klasy map&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Aby utworzyć mapę trzeba zadeklarować obiekt klasy implementujęj, któryś z interfejsów map. Klas&#10;    map jest stosunkowo dużo:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;AbstractMap&lt;/code&gt; - klasa abtrakcyjna implementująca większość metod interfejsu Map i służaca do jako klasa bazowa dla prawie wszystkich konkretnych klas map (oprócz &lt;samp&gt;LinkedHashMap&lt;/samp&gt;)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;EnumMap&lt;/code&gt; - klasa wykorzystująca stałe wyliczeniowe jako klucze&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashMap&lt;/code&gt; - klasa wykorzystująca tablicę mieszającą do przechowywania elementów&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeMap&lt;/code&gt; - klasa wykorzystująca strukturę drzewa&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;WeakHashMap&lt;/code&gt; - klasa wykorzystująca tablicę mieszającą ale ze słabymi kluczami (elementy są automatycznie usuwane przez GC z mapy, gdy znika referencja do klucza)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;LinkedHashMap&lt;/code&gt; - klasa zapewnia iterację w kolejności wstawiania elementów&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;IdentityHashMap&lt;/code&gt; - do porównania kluczy używa wartości referencji&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;W dalszej części omówimy tylko dwie klasy map: &lt;samp&gt;HashMap&lt;/samp&gt; i &lt;samp&gt;TreeMap&lt;/samp&gt;&lt;/p&gt;&#10;&lt;h2&gt;Klasa HashMap&lt;/h2&gt;&#10;&lt;p&gt;&#10;  Klasa przechowuje elementy mapy w tablicy mieszającej zapewniając, stały czas wykonywania operacji wstawiania i pobierania elementów. Sygnatura klasy: &lt;code&gt;class HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Konstruktory klasy:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashMap()&lt;/code&gt; - tworzy pustą mapę,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/code&gt; - tworzy mapę zawierającą elementy z mapy &lt;samp&gt;m&lt;/samp&gt;,&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashMap(int capacity)&lt;/code&gt; - tworzy mapę o wstępnej pojemności &lt;samp&gt;capacityy&lt;/samp&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;HashMap(int capacity, float fillRatio)&lt;/code&gt; - tworzy mapę o podanje wstępnej pojemności i współczynniku wypełnienia (znaczenie takie samo jak w klasie HashSet).&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;Tworzenie mapy z użyciem tej klasy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;     Map&amp;lt;String, Person&amp;gt; team = new HashMap&lt;&gt;();&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Klasa implementuje tylko interfejs &lt;samp&gt;Map&lt;/samp&gt; i nie dodaje żadnych własnych metod.&#10;&lt;/p&gt;&#10;&lt;h2&gt;Klasa TreeMap&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Klasa &lt;samp&gt;TreeMap&lt;/samp&gt; implementuje interfejs &lt;samp&gt;NavigableMap&lt;/samp&gt; i używa struktury drzewiastej do przechowywania elementów, co zapewnia szybkie odczytywanie wartości. Zapewnia także sortowanie elementów według kluczy w porządku rosnącym.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Deklaracja klasy: &lt;code&gt;class TreeMap&amp;lt;K, V&amp;gt;&lt;/code&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Konstruktory klasy:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeMap()&lt;/code&gt; - tworzy pustą mapę&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeMap(Comparator&amp;lt;? super K&amp;gt; comp)&lt;/code&gt; - tworzy pustą mapę z komparatorem określającym porządek sortowania&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m)&lt;/code&gt; - tworzy mapę zawierającą elementy&#10;        z mapy m&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;TreeMap(SortedMap&amp;lt;K, ? extends V&amp;gt; sm)&lt;/code&gt; - tworzy mapę zawierającą elementy z posortowanej mapy sm i z tym samym sposobem sortowania co sm.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Klasa &lt;samp&gt;TreeMap&lt;/samp&gt; nie definiuje swoich metod, implementuje tylko metody z interfejsu &lt;samp&gt;NavigableMap&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Część 5" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/HashMapDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/HashMapDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;class HashMapDemo {&#10;  public static void main(String[] args) {&#10;    Map&lt;String, Person&gt; mapTeam = new HashMap&lt;&gt;();&#10;    //wstawianie elementów do mapy&#10;    mapTeam.put(&quot;szef&quot;, new Person(&quot;LUDWIK&quot;,&quot;KOZAK&quot;, LocalDate.parse(&quot;1976-07-03&quot;)));&#10;    mapTeam.put(&quot;sekretarka&quot;, new Person(&quot;ANNA&quot;,&quot;KRUK&quot;, LocalDate.parse(&quot;1998-05-13&quot;)));&#10;    mapTeam.put(&quot;portier&quot;, new Person(&quot;KAZIMIERZ&quot;,&quot;KOWALSKI&quot;, LocalDate.parse(&quot;1964-12-23&quot;)));&#10;    //wyświetlenie kluczy mapy&#10;    for(String key: mapTeam.keySet()){&#10;      System.out.println(key);&#10;    }&#10;    //wyświetlenie wartości&#10;    for(Person value: mapTeam.values()){&#10;      System.out.println(value);&#10;    }&#10;    //wyświetlenie wartości na podstawie klucza&#10;    System.out.println(&quot;SZEF &quot;+ mapTeam.get(&quot;szef&quot;));&#10;    //usunięcie wartości o podanym kluczu&#10;    mapTeam.remove(&quot;portier&quot;);&#10;    //&#10;    mapTeam.containsKey(&quot;portier&quot;);&#10;  }&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return firstName+&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Komparatory&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Klasy &lt;samp&gt;TreeSet&lt;/samp&gt; i &lt;samp&gt;TreeMap&lt;/samp&gt; przechowują elementy posortowane, więc wymagają określenia sposobu sortowania. Domyślnie obie klasy wykorzystują naturalny porządek czyli dla liczb i znaków porządek rosnący (1, 2, 3, 4 itd, A, B, C, D itd.).&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Gdy chcemy przechowywać elementy w innym porzadku należy wskazać klasom obiekt zwany komparatorem. Obiekt taki można utworzyć na podstawie dowolnej klasy implementującej interfejs generyczny &lt;samp&gt;Comparator&amp;lt;T&amp;gt;&lt;/samp&gt;, w którym parametr T jest klasą porównywanych obiektów.&#10;&lt;/p&gt;&#10;&lt;p&gt;Interfejs zawiera deklaracje dwóch metod:&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;      &lt;code&gt;int compare(T obj1, T obj2)&lt;/code&gt; - metoda zwraca trzy wartości całkowite w zależności od porównania obu argumentów:&#10;        &lt;ul&gt;&#10;            &lt;li&gt;&#10;                obj1 &gt; obj2 - zwraca 1 (lub większą od 0)&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;                obj1 &lt; obj2 - zwraca -1 (lub mniejszą od 0)&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;                obj1 == obj2 - zwraca 0&#10;            &lt;/li&gt;&#10;        &lt;/ul&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;       &lt;code&gt;boolean equals(Object obj)&lt;/code&gt;  - zwraca &lt;samp&gt;true&lt;/samp&gt; jeśli obj jest równy z obiektem wywołującym metodę.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Ilustracją wykorzystania interfejsu &lt;samp&gt;Comparator&lt;/samp&gt; będzie klasa Person, dla której zdefiniujemy komparator porządkujący wg poniższego schematu:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&#10;        jeśli imiona są różne, porządkujemy rosnącą według imion,&#10;    &lt;li&gt;&#10;        jeśłi imiona są równe porządkujemy według nazwisk&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        jeśli nazwiska są równe porządkujemy według daty urodzenia&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Metodę komparatora możemy dołączyć do klasy Person poprzez dodanie do niej interfejsu &lt;samp&gt;Comparator&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Person implements Comparator&amp;lt;Person&amp;gt;{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(){&#10;  }&#10;  ...&#10;&#10;  @Override&#10;  public int compare(Person o1, Person o2) {&#10;    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk&#10;    if (o1.lastName.compareTo(o2.lastName) != 0){&#10;      return o1.lastName.compareTo(o2.lastName);&#10;    }&#10;    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion&#10;    if (o1.firstName.compareTo(o2.firstName) != 0){&#10;      return o1.firstName.compareTo(o2.firstName);&#10;    }&#10;    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia&#10;    return o1.birthDate.compareTo(o2.birthDate);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    W metodzie wykorzystaliśmy metodę &lt;samp&gt;compareTo(o)&lt;/samp&gt;, która stosuje dokładnie ten sam kontrakt co metoda &lt;samp&gt;compare(o1, o2)&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;   Tworząc teraz mapę klasą &lt;samp&gt;TreeMap&lt;/samp&gt; można wykorzystać pusty obiekt klasy &lt;samp&gt;Person&lt;/samp&gt;, gdyż klasa &lt;samp&gt;TreeSet&lt;/samp&gt; wykorzysta tylko metodę &lt;samp&gt;compare()&lt;/samp&gt;&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Set&amp;lt;Person&amp;gt; treeTeam = new TreeSet&lt;&gt;(new Person());&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Druga metodą przekazania komparatora jest utworzenie klasy anonimowej, w której wykorzystamy&#10;    metodę &lt;samp&gt;compare(o1, o2)&lt;/samp&gt;&gt; z klasy &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Set&amp;lt;Person&amp;gt; treeTeam = new TreeSet&lt;&gt;(new Comparator&amp;lt;Person&amp;gt;() {&#10;      @Override&#10;      public int compare(Person o1, Person o2) {&#10;        return o1.compare(o1, o2);&#10;      }&#10;    });&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    W tym przypadku nie jest wymagane, aby klasa &lt;samp&gt;Person&lt;/samp&gt; implementowała &lt;samp&gt;Comparator&lt;/samp&gt;, po prostu wykorzystaliśmy zdefiniowaną metodę. Przedstawione rozwiązanie ma tą zaletę, że można zdefiniować w klasie kilka różnych metod porównujących i wykorzystywać je w zależności od potrzeb:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Person implements Comparator&amp;lt;Person&amp;gt;{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(){&#10;  }&#10;  ...&#10;&#10;  static public int compare1(Person p1, Person p2){&#10;    ...&#10;  }&#10;&#10;  static public int compare2(Person p1, Person p2){&#10;    ...&#10;  }&#10;}&#10;&#10; ...&#10; Set&amp;lt;Person&amp;gt; treeTeam = new TreeSet&lt;&gt;(new Comparator&amp;lt;Person&amp;gt;() {&#10;      @Override&#10;      public int compare(Person o1, Person o2) {&#10;        return Person.compare1(o1, o2);&#10;      }&#10;});&#10;&#10;Set&amp;lt;Person&amp;gt; treeStaff = new TreeSet&lt;&gt;(new Comparator&amp;lt;Person&amp;gt;() {&#10;      @Override&#10;      public int compare(Person o1, Person o2) {&#10;        return Person.compare2(o1, o2);&#10;      }&#10;});&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Część 6" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ComparatorDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ComparatorDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.Comparator;&#10;import java.util.Iterator;&#10;import java.util.Set;&#10;import java.util.TreeSet;&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    //Zbiór osób sortowanych wg imion&#10;    Set&lt;Person&gt; treeTeam = new TreeSet&lt;&gt;(new Comparator&lt;Person&gt;() {&#10;      @Override&#10;      public int compare(Person o1, Person o2) {&#10;        return Person.compareFirstName(o1, o2);&#10;      }&#10;    });&#10;&#10;    treeTeam.add(new Person(&quot;ADAM&quot;,&quot;KOWALSKI&quot;, LocalDate.parse(&quot;1998-04-23&quot;)));&#10;    treeTeam.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1994-08-13&quot;)));&#10;    treeTeam.add(new Person(&quot;EWA&quot; +&#10;            &quot;&quot;,&quot;ADAMSKI&quot;, LocalDate.parse(&quot;1991-12-09&quot;)));&#10;&#10;    Iterator&lt;Person&gt; iterator = treeTeam.iterator();&#10;    while(iterator.hasNext()){&#10;      System.out.println(iterator.next());&#10;    }&#10;    //Zbiór osób sortowanych wg nazwisk&#10;    Set&lt;Person&gt; treeStaff = new TreeSet&lt;&gt;(new Comparator&lt;Person&gt;() {&#10;      @Override&#10;      public int compare(Person o1, Person o2) {&#10;        return Person.compareBirthDateAsc(o1, o2);&#10;      }&#10;    });&#10;&#10;    treeStaff.add(new Person(&quot;ADAM&quot;,&quot;KOWALSKI&quot;, LocalDate.parse(&quot;1998-04-23&quot;)));&#10;    treeStaff.add(new Person(&quot;KAROL&quot;,&quot;NOWAK&quot;, LocalDate.parse(&quot;1994-08-13&quot;)));&#10;    treeStaff.add(new Person(&quot;EWA&quot; +&#10;            &quot;&quot;,&quot;ADAMSKI&quot;, LocalDate.parse(&quot;1991-12-09&quot;)));&#10;    iterator = treeStaff.iterator();&#10;    while(iterator.hasNext()){&#10;      System.out.println(iterator.next());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;import java.util.Comparator;&#10;&#10;class Person{&#10;  private String firstName;&#10;  private String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(){&#10;  }&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return firstName+&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;  }&#10;&#10;&#10;  static public int compareLstName(Person o1, Person o2) {&#10;    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk&#10;    if (o1.lastName.compareTo(o2.lastName) != 0){&#10;      return o1.lastName.compareTo(o2.lastName);&#10;    }&#10;    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion&#10;    if (o1.firstName.compareTo(o2.firstName) != 0){&#10;      return o1.firstName.compareTo(o2.firstName);&#10;    }&#10;    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia&#10;    return o1.birthDate.compareTo(o2.birthDate);&#10;  }&#10;&#10;  static public int compareFirstName(Person o1, Person o2) {&#10;    //jeśli imiona nie są identyczne to zwracamy wynik porównania imion&#10;    if (o1.firstName.compareTo(o2.firstName) != 0){&#10;      return o1.firstName.compareTo(o2.firstName);&#10;    }&#10;    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion&#10;    if (o1.lastName.compareTo(o2.lastName) != 0){&#10;      return o1.lastName.compareTo(o2.lastName);&#10;    }&#10;    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia&#10;    return o1.birthDate.compareTo(o2.birthDate);&#10;  }&#10;&#10;  static public int compareBirthDateAsc(Person o1, Person o2) {&#10;    return o1.birthDate.compareTo(o2.birthDate);&#10;  }&#10;&#10;  static public int compareBirthDateDesc(Person o1, Person o2) {&#10;    return o2.birthDate.compareTo(o1.birthDate);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="5" />
                      <option name="name" value="Refleksja" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Refleksja&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Refleksja, jak nazwa wskazuje, jest mechanizmem, który pozwala na uzyskanie w działającym programie własnego &quot;odbicia&quot;. Mechanizm ten jest realizowany przez bibliotekę &lt;samp&gt;java.lang.reflect&lt;/samp&gt;, która dostarcza klasy, które pozwalają analizować w trakcie działania programu strukturę kodu. Można uzyskać informację jakiej klasy jest dany obiekt, jak jest lista pól, metod, jakie są typy poszczególnnych pól, jakie parametry metod itd.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Głównym przeznaczeniem refleksji jest ułatwienie tworzenia narzędzi programistych, które pozwalają na automatyczne generowanie kodu i jego analize w trakcie działania programu.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Temat refleksji jest dość szeroki, a bilioteka obszerna. Poniżej zapoznamy się z prostym przykładem, który w trakcie działania pozwala na wyświetlenie wszystkich pól i metod klasy wybranego obiektu:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;    User object = new User(&quot;amin&quot;,&quot;admin@jps.pl&quot;,&quot;123456&quot;,3);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Kod wyświetlający listę pól z ich wartościami to pętla pobierająca pola z tablicy:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  for(Field f: object.getClass().getDeclaredFields()){&#10;    f.setAccessible(true);&#10;    System.out.println(f.getName() + &quot; &quot;+f.get(member).toString());&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;  &lt;p&gt;&#10;    Klasa &lt;samp&gt;Field&lt;/samp&gt; służy do przechowywania informacji o polu klasy, a wywołanie metody &lt;samp&gt;setAccessible(true)&lt;/samp&gt;&#10;    daje możliwość odczytu pola, które może być prywatne.&#10;  &lt;/p&gt;&#10;&lt;p&gt;&#10;  Wyświetlenie listy metod jest dość podobne, należy pobrać listę metod i w pętli wyswietlić:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;    for(Method m: member.getClass().getMethods()){&#10;      System.out.println(m.getName());&#10;    }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;  &lt;p&gt;&#10;    Wyświetlone zostały metody zdefiniowane w klasie jak i odziedziczone. Metoda &lt;samp&gt;getDeclaredMethods&lt;/samp&gt; zwraca lsitę metod deklarowanych tylko w klasie.&#10;  &lt;/p&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Refleksja daje możliwość manipulowania obiektami w sytuacjach, gdy w programie &quot;tradycyjną&quot; metodą nie są dostępne. Klasa &lt;samp&gt;User&lt;/samp&gt; posiada wszystkie pola prywatne, bez odpowienich setterów co uniemożliwia zmienę wartości dowolnego pola. Korzystając z refleksji możemy zmienić wartość każdego póla, nawet prywatnych:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  Field f = member.getClass().getDeclaredField(&quot;password&quot;);&#10;  f.setAccessible(true);&#10;  f.set(member, &quot;abcd&quot;);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Przykład pokazuje dość ciekawe możliwości &quot;włamania&quot; się do kodu programu. Refleksja daje również możliwość tworzenia obiektów bez operatora &lt;samp&gt;new&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Message{&#10;    public String send(){&#10;      return &quot;New Object created&quot;;&#10;    }&#10;  }&#10;  ..&#10;&#10;  Message m = Message.class.newInstance();&#10;  System.out.println(m.send());&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Przedstawiony przykład działa dla wszystkich klas posiadających konstruktor bezargumentowy. Tworzenie z użyciem konstruktorów parametrycznych jest też możliwe drogą refleksji, jednak wymaga więcej dodatkowych operacji&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/ReflectionDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ReflectionDemo.java" />
                                      <option name="text" value="import java.lang.reflect.Field;&#10;import java.lang.reflect.InvocationTargetException;&#10;import java.lang.reflect.Method;&#10;&#10;class User{&#10;  private String name;&#10;  private String email;&#10;  private String password;&#10;  private int id;&#10;&#10;  public User(){&#10;    this.password =&quot;&quot;;&#10;    this.name = &quot;&quot;;&#10;    this.name = &quot;no name&quot;;&#10;  }&#10;&#10;  public User(String name, String email, String password, Integer id) {&#10;    this.name = name;&#10;    this.email = email;&#10;    this.password = password;&#10;    this.id = id;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return name+&quot; &quot;+email+&quot; &quot;+password+&quot; &quot;+id;&#10;  }&#10;}&#10;&#10;class Message{&#10;  public String send(){&#10;    return &quot;New message&quot;;&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) throws IllegalAccessException, NoSuchFieldException, InstantiationException, NoSuchMethodException, InvocationTargetException {&#10;    User member = new User(&quot;amin&quot;,&quot;admin@jps.pl&quot;,&quot;123456&quot;,3);&#10;    //wyświetlenie pól obiektu wraz z wartościami&#10;    System.out.println(&quot;Lista pól&quot;);&#10;    for(Field f: member.getClass().getDeclaredFields()){&#10;      //udostępniamy pola do odczytu&#10;      f.setAccessible(true);&#10;      System.out.println(f.getName() + &quot; &quot;+f.get(member).toString());&#10;    }&#10;    System.out.println();&#10;    //wyświetlenie metod&#10;    System.out.println(&quot;Lista metod&quot;);&#10;    for(Method m: member.getClass().getMethods()){&#10;      System.out.println(m.getName());&#10;    }&#10;    System.out.println();&#10;    //zmieniamy wartość wybranego pola&#10;    System.out.println(&quot;Zmiana wartości pola password&quot;);&#10;    System.out.println(&quot;Obiekt przed zmianą&quot;);&#10;    System.out.println(member);&#10;    Field f = member.getClass().getDeclaredField(&quot;password&quot;);&#10;    f.setAccessible(true);&#10;    f.set(member, &quot;abcd&quot;);&#10;    System.out.println(&quot;Obiekt po zmianie zmianą&quot;);&#10;    System.out.println(member);&#10;&#10;    Message m = Message.class.newInstance();&#10;    System.out.println(m.send());&#10;    User u = User.class.newInstance();&#10;    System.out.println(u);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </Course>
      </option>
    </StudyTaskManager>
  </component>
</project>