<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <Course>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Kurs języka Java dla SDA" />
          <option name="fromZip" value="true" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="name" value="Kurs Javy" />
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="items">
            <list>
              <Section>
                <option name="courseId" value="0" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Java zaawansowana" />
                <option name="position" value="0" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="units" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Dziedziczenie" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Podstawy&lt;/h1&gt;&#10;&lt;p&gt;&#10;Dziedziczenie jest przejmowaniem przez klasę właściwości innej klasy. Dana jest klasa &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public class Person {&#10;  public String firstName;&#10;  public String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  public String toString(){&#10;  return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;Utworzenie klasy &lt;samp&gt;Worker&lt;/samp&gt;, w której chcemy przechowywać informacje osobowe jak i dodatkowe np.: stanowisko, pensja,&#10;    data zatrudnienia itd., może być łatwiejsze&#10;jeśli zastosuje się dziedziczenie:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;public class Worker extends Person{&#10;  public String position;&#10;  public double salary;&#10;&#10;  public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {&#10;    this.lastName = lastName;&#10;    this.firstName = firstName;&#10;    this.birthDate = birthDate;&#10;    this.position = position;&#10;    this.salary = salary;&#10;  }&#10;&#10;  public String toString(){&#10;    return super.toString()+&quot; &quot;+position+&quot; &quot;+salary;&#10;  }&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Słowo kluczowe &lt;samp&gt;extend&lt;/samp&gt; powoduje, że do definiowanej klasy &lt;samp&gt;Worker&lt;/samp&gt; dołączane są pola i metody&#10;    klasy &lt;samp&gt;Person&lt;/samp&gt;. Dziedziczenie dotyczy wszystkich składowych, ale w klasie pochodnej dostępne&#10;    są tylko składowe nieprywatne. W Java można dziedziczyć tylko po jednej klasie.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    W przedstawionym przykładzie &lt;samp&gt;Person&lt;/samp&gt; jest klasą bazową, nadklasą, superklasą a &lt;samp&gt;Worker&lt;/samp&gt;&#10;    klasą wyprowadzoną, pochodną lub podklasą.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Task {&#10;  //put your task here&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Customer.java" value="public class Test {&#10;    // put your test here&#10;}" />
                                <entry key="test/Person.java" value="" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Zadanie 1&lt;/h1&gt;&#10;&lt;p&gt;Zdefiniuj klasę &lt;samp&gt;Customer&lt;/samp&gt; wyprowadzoną z klasy &lt;samp&gt;Person&lt;/samp&gt;. W klasie &lt;samp&gt;Customer&lt;/samp&gt; dodaj pola:&#10;  &lt;ul&gt;&#10;    &lt;li&gt;&#10;        &lt;code&gt;String shippingAddress;&lt;/code&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;       &lt;code&gt;String creditCard;&lt;/code&gt;&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Zadanie 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Customer.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Customer.java" />
                                      <option name="text" value="&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Main.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Main.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person{&#10;  public String firstName;&#10;  public String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Person{&quot; +&#10;            &quot;firstName='&quot; + firstName + '\'' +&#10;            &quot;, lastName='&quot; + lastName + '\'' +&#10;            &quot;, birthDate=&quot; + birthDate +&#10;            '}';&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Subclass.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Subclass.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Superclass.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Superclass.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/TestCustomer.java" value="import org.junit.Test;&#10;&#10;import java.time.LocalDate;&#10;&#10;import static org.junit.Assert.*;&#10;&#10;public class TestCustomer{&#10;  @Test&#10;  public void testCustomer() {&#10;    Person c = new Customer(&quot;A&quot;,&quot;B&quot;, LocalDate.of(2000,10,10),&quot;AA 12 234&quot;,&quot;23457643GB&quot;);&#10;    assertTrue(&quot;Klasa worker nie dziedziczy po Person&quot;, c instanceof Person);&#10;    assertEquals(&quot;Brak pola shippingAddress&quot;, &quot;AA 12 234&quot;,((Customer) c).shippingAddress);&#10;    assertEquals(&quot;Brak pola creditCard&quot;, &quot;23457643GB&quot;,((Customer) c).creditCard);&#10;    assertEquals(&quot;Brak pola firstName&quot;, &quot;A&quot;, c.firstName);&#10;    assertEquals(&quot;Brak pola lastName&quot;, &quot;B&quot;, c.lastName);&#10;    assertEquals(&quot;Brak pola birthDate&quot;, LocalDate.of(2000,10,10).toString(), c.birthDate.toString());&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Dziedziczenie &quot;miejsca&quot;&lt;/h1&gt;&#10;&lt;p&gt;Konsekwencją dziedziczenia jest możliwość umieszczenia w zmiennych typu bazowego obiektu (referencji) klasy wyprowadzonej. Można to porównać do dziedziczenia miejsca: tam gdzie przewidujemy przechowywać obiekty klasy rodzica można umieścić także obiekty klas potomnych:&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;Person employee = new Worker(&#10;                  &quot;Adam&quot;,&#10;                  &quot;Kowalski&quot;,&#10;                  LocalDate.of(1978, 10,19),&#10;                  &quot;magazynier&quot;,&#10;                  2400.0);&#10;Person wife = new Person(&#10;              &quot;Zofia&quot;,&#10;              &quot;Nowak&quot;,&#10;              LocalDate.of(1978, 10,19));&#10;System.out.println(w);&#10;System.out.println(p);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;  &lt;p&gt;&#10;    Obie zmienne są typu &lt;samp&gt;Person&lt;/samp&gt;, ale dzięki dziedziczeniu do zmiennej&#10;    &lt;samp&gt;employee&lt;/samp&gt; można przypisać obiekt klasy wyprowadzonej z &lt;samp&gt;Person&lt;/samp&gt; czyli &lt;samp&gt;Worker&lt;/samp&gt;.&#10; &lt;p&gt;&#10;    Referencja &lt;code&gt;employee&lt;/code&gt; ma typ &lt;code&gt;Person&lt;/code&gt;, ale przechowuje obiekt &lt;code&gt;Worker&lt;/code&gt;. Nie mamy dostępu do pola &lt;code&gt;salary&lt;/code&gt;. Żeby móc się odowołać do  składowych klasy &lt;code&gt;Worker&lt;/code&gt; musimy zrzutować zmienną referencyjną &lt;code&gt;employee&lt;/code&gt; na rzeczywisty typ tej zmiennej:&#10;  &lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;Worker w = (Worker) employee;&#10;System.out.println(w.salary);&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;h1&gt;Klasa Object i nadpisywanie - overriding&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Podobny efekt ja w poprzedniej cześci, możemy uzyskać inną metodą:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  Object employee = new Worker(&#10;                    &quot;Adam&quot;,&#10;                    &quot;Kowalski&quot;,&#10;                    LocalDate.of(1978, 10,19),&#10;                    &quot;magazynier&quot;,&#10;                    2400.0);&#10;  Object wife = new Person(&#10;                &quot;Zofia&quot;,&#10;                &quot;Nowak&quot;,&#10;                LocalDate.of(1978, 10,19));&#10;  System.out.println(employee);&#10;  System.out.println(wife);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Typ &lt;samp&gt;Object&lt;/samp&gt; jest klasą, którą niejawnie dziedzczy każda definiowana klasa, dlatego działanie tego przykładu jest identyczne z poprzednim. Klasa &lt;samp&gt;Object&lt;/samp&gt; ma metodę &lt;samp&gt;toString()&lt;/samp&gt;, którą&#10;  zdefiniowaliśmy także w klasach &lt;samp&gt;Person&lt;/samp&gt; i &lt;samp&gt;Worker&lt;/samp&gt;. Definiowanie&#10;  odziedziczonych metod w klasach potomnych to &lt;i&gt;&lt;b&gt;nadpisywanie&lt;/b&gt;&lt;/i&gt; (ang. &lt;i&gt;method overriding&lt;/i&gt;).&#10;    Stosowane są także inne określenia jak przesłanianie lub przedefiniowanie.&#10;  Aby nadpisanie się powiodło sygnatura nadpisywanej metody, czyli nazwa funkcji, argumenty i typ zwracany, muszą pasować do metody z klasy bazowej.&#10;  W przypadku pomyłki zostanie zdefiniowana nowa metoda, a nie przedefiniowanie odziedziczonej.&#10;    Popatrzmy&#10;  na przykład takiej pomyłki:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  public class Person {&#10;    public String firstName;&#10;    public String lastName;&#10;    public LocalDate birthDate;&#10;&#10;      public Person(String firstName, String lastName, LocalDate birthDate) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.birthDate = birthDate;&#10;      }&#10;&#10;      public String tostring(){&#10;      return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;}&#10;...&#10;Object wife = new Person(&#10;                &quot;Zofia&quot;,&#10;                &quot;Nowak&quot;,&#10;                LocalDate.of(1978, 10,19));&#10;System.out.println(wife);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    W efekcie tej pomyłki zostanie wyświetlony komunikat:&#10;&lt;/p&gt;&#10;&lt;samp&gt;Person@4aa298b7&lt;/samp&gt;&#10;&lt;p&gt;Jest to wynikiem działania metody &lt;samp&gt;toString()&lt;/samp&gt; odziedziczonej i zdefiniowanej w klasie&#10;    &lt;samp&gt;Object&lt;/samp&gt;, a nie naszej nadpisanej w klasie &lt;samp&gt;Person&lt;/samp&gt;.&#10;Tego typu pomyłki są trudne czasem do wykrycia, dlatego w celu zasygnalizowania intencji programisty,&#10;czy dana metoda jest nadpisywana czy też nowo definiowana stosuje się adnotację &lt;samp&gt;@Override&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  public class Person {&#10;    public String firstName;&#10;    public String lastName;&#10;    public LocalDate birthDate;&#10;&#10;      public Person(String firstName, String lastName, LocalDate birthDate) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.birthDate = birthDate;&#10;      }&#10;      @Override&#10;      public String tostring(){&#10;      return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;Umieszczenie adnotacji spowoduje wygenerowanie błędu podczas uruchomienia programu z komunikatem, że&#10;metoda oznaczona adnotacją nie nadpisuje metody z superklasy. Nie pozostaje nic innego jak poprawić błąd:&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  public class Person {&#10;    public String firstName;&#10;    public String lastName;&#10;    public LocalDate birthDate;&#10;&#10;      public Person(String firstName, String lastName, LocalDate birthDate) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.birthDate = birthDate;&#10;      }&#10;      @Override&#10;      public String toString(){&#10;        return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;      }&#10;    }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Cześć 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Manager.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Manager.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person{&#10;  public String firstName;&#10;  public String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Person{&quot; +&#10;            &quot;firstName='&quot; + firstName + '\'' +&#10;            &quot;, lastName='&quot; + lastName + '\'' +&#10;            &quot;, birthDate=&quot; + birthDate +&#10;            '}';&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ReferenceInheritanceDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/ReferenceInheritanceDemo.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class ReferenceInheritanceDemo {&#10;  public static void main(String[] args) {&#10;    Person employee = new Worker(&#10;            &quot;Adam&quot;,&#10;            &quot;Kowalski&quot;,&#10;            LocalDate.of(1978, 10,19),&#10;            &quot;magazynier&quot;,&#10;            2400.0);&#10;    Person wife = new Person(&#10;            &quot;Zofia&quot;,&#10;            &quot;Nowak&quot;,&#10;            LocalDate.of(1978, 10,19));&#10;    System.out.println(employee);&#10;    System.out.println(wife);&#10;    Worker w = (Worker) employee;&#10;    System.out.println(employee);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Worker.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Worker.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;public class Worker extends Person{&#10;  public String position;&#10;  public double salary;&#10;&#10;  public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {&#10;    super(firstName, lastName, birthDate);&#10;    this.position = position;&#10;    this.salary = salary;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Worker{&quot; +&#10;            &quot;salary=&quot; + salary +&#10;            &quot;, firstName='&quot; + firstName + '\'' +&#10;            &quot;, lastName='&quot; + lastName + '\'' +&#10;            &quot;, birthDate=&quot; + birthDate +&#10;            '}';&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;   Zdefiniowane są dwie klasy; &lt;code&gt;Person&lt;/code&gt; i  wyprowadzona z niej &lt;code&gt;Employee&lt;/code&gt;.&#10;   W pliku &lt;samp&gt;Task&lt;/samp&gt; w miejscu znacznika &lt;samp&gt;&amp;lt;typ&amp;gt;&lt;/samp&gt; wstaw odpowiedni typ tablicy &lt;code&gt;team&lt;/code&gt; a po drugiej stronie uzupełnij kod tworzący tablicę, tak aby pozostała część kodu wykonała się poprawnie. Następnie w miejscu komentarza lub pod nim przypisz wartość pola &lt;code&gt;wife&lt;/code&gt; drugim elementem tablicy &lt;code&gt;team&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Zadanie 2" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Employee.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Employee.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;public class Employee extends Person{&#10;  private String position;&#10;  private double salary;&#10;&#10;  public Employee(String firstName, String lastName, LocalDate birthDate, String position, double salary) {&#10;    super(firstName, lastName, birthDate);&#10;    this.position = position;&#10;    this.salary = salary;&#10;  }&#10;&#10;  public double getSalary(){&#10;    return salary;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Employee{&quot; +&#10;            &quot;position='&quot; + position + '\'' +&#10;            &quot;, salary=&quot; + salary +&#10;            &quot;, firstName='&quot; + firstName + '\'' +&#10;            &quot;, lastName='&quot; + lastName + '\'' +&#10;            &quot;, birthDate=&quot; + birthDate +&#10;            '}';&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Person.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Person.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person{&#10;  public String firstName;&#10;  public String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Person{&quot; +&#10;            &quot;firstName='&quot; + firstName + '\'' +&#10;            &quot;, lastName='&quot; + lastName + '\'' +&#10;            &quot;, birthDate=&quot; + birthDate +&#10;            '}';&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="11" />
                                                <option name="offset" value="65" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="62" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="typ tablicy" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="28" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="27" />
                                            <option name="offset" value="78" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="utwórz tablicę dwuelementową" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="54" />
                                                <option name="offset" value="423" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="26" />
                                            <option name="offset" value="411" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="przypisz do zmiennej wife drugi element z tablicy team" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;public class Task {&#10;  public static typ tablicy team[] = utwórz tablicę dwuelementową;&#10;  public static Employee wife;&#10;&#10;  public static void main(String[] args) {&#10;    team[0] = new Person(&quot;ADAM&quot;,&quot;KOŁEK&quot;, LocalDate.of(2000,10,10));&#10;    team[1] = new Employee(&quot;IRENA&quot;,&quot;OCHÓCKA&quot;, LocalDate.of(1960,11,23),&quot;żona prezesa&quot;,20000);&#10;    System.out.println(team[0]);&#10;    System.out.println(team[1]);&#10;    przypisz do zmiennej wife drugi element z tablicy team&#10;&#10;    System.out.println(wife.getSalary());&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/TestTask.java" value="import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;public class TestTask{&#10;  @Test&#10;  public void testCustomer() {&#10;    assertTrue(&quot;Typ tablicy team niepoprawny.&quot;, Task.team instanceof Person[]);&#10;    assertEquals(&quot;Niepoprawna wartość zmiennej wife.&quot;,Task.wife, Task.team[1]);&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Odwołanie do klasy bazowej - słowo &lt;samp&gt;super&lt;/samp&gt;&lt;/h1&gt;&#10;&lt;p&gt;&#10;Przyjrzyjmy się konstruktorowi klasy &lt;samp&gt;Worker&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;  &lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker extends Person{&#10;    ...&#10;&#10;    public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {&#10;    this.lastName = lastName;&#10;    this.firstName = firstName;&#10;    this.birthDate = birthDate;&#10;    this.position = position;&#10;    this.salary = salary;&#10;    }&#10;&#10;    ...&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Pierwsze trzy wiersze to powtórzenie zawartości konstruktora klasy &lt;samp&gt;Person&lt;/samp&gt;, który&#10;  można wywołać stosując słowo kluczowe &lt;samp&gt;super&lt;/samp&gt;, które zastępuje nazwę klasy, z której następuje dziedziczenie:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker extends Person{&#10;    ...&#10;&#10;    public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {&#10;    super(firstName, lastName, birthDate);&#10;    this.position = position;&#10;    this.salary = salary;&#10;    }&#10;&#10;    ...&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Posługując sie tym słowem, można także uprościć ciało metody &lt;samp&gt;toString()&lt;/samp&gt; wywołując&#10;  metodę &lt;samp&gt;toString()&lt;/samp&gt; zdefiniowaną w klasie &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker extends Person{&#10;    ...&#10;    public String toString(){&#10;        return super.toString()+&quot; &quot;+position+&quot; &quot;+salary;&#10;    }&#10;&#10;  }&#10;  &lt;/code&gt;&#10;  &lt;p&gt;&#10;  &lt;/p&gt;&#10;&lt;/pre&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Część 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;Zdefiniuj konstruktor klasy Airliner z trzema argumentami, aby poprawnie wykonał się kod z metody &lt;samp&gt;main&lt;/samp&gt;.&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Skorzystaj ze słowa &lt;samp&gt;super&lt;/samp&gt; w konstruktorze, żeby wowołać konstruktor klasy bazowej.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Zadanie 3" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="22" />
                                                <option name="offset" value="505" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="48" />
                                            <option name="offset" value="537" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="wpisz listę parametrów" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="22" />
                                                <option name="offset" value="534" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="71" />
                                            <option name="offset" value="589" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Wpisz kod konstruktora" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Airplane{&#10;  private String typeName;&#10;  private int numberOfEngines;&#10;&#10;  public Airplane(){&#10;    typeName= &quot;fake&quot;;&#10;  }&#10;&#10;  public Airplane(String typeName, int numberOfEngines) {&#10;    this.typeName = typeName;&#10;    this.numberOfEngines = numberOfEngines;&#10;  }&#10;&#10;  public int getNumberOfEngines(){&#10;    return numberOfEngines;&#10;  }&#10;}&#10;&#10;class Airliner extends Airplane{&#10;  private int numberOfPassengers;&#10;  //zdefiniuj konstruktor z trzema argumentami, który wywołuje konstruktor klasy Airplane&#10;  public Airliner(wpisz listę parametrów){&#10;    Wpisz kod konstruktora&#10;  }&#10;&#10;  public int getNumberOfPassengers() {&#10;    return numberOfPassengers;&#10;  }&#10;}&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Airplane plane = new Airplane(&quot;JAK23&quot;, 1);&#10;    Airplane airbus = new Airliner(&quot;A320&quot;, 2, 320);&#10;    System.out.println(airbus.getNumberOfEngines());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="import org.junit.Test;&#10;        import static org.junit.Assert.*;&#10;&#10;public class TestTask{&#10;  @Test&#10;  public void testAirliner() {&#10;    Airliner plain = new Airliner(&quot;YAK3&quot;, 3, 230);&#10;    assertEquals(&quot;Niepoprawna definicja konstruktora.&quot;, plain.getNumberOfEngines(), 3);&#10;    assertEquals(&quot;Zbyt mali liczba parametrów konstruktora.&quot;, plain.getNumberOfPassengers(), 230);&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Tworzenie obiektów klas pochodnych&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Kolejność operacji wykonywanych w trakcie inicjacji obiektu klasy pochodnej jest następująca:&#10;  &lt;ul&gt;&#10;  &lt;li&gt;&#10;    wywołanie konstruktora klasy pochodnej,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    jeśli pierwszą instrukcją konstruktora jest &lt;samp&gt;super(args) &lt;/samp&gt;to wykonywany&#10;    jest odpowiedni konstruktor klasy bazowej,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    w przypadku braku &lt;samp&gt;super&lt;/samp&gt; wykonywany jest niejawnie konstruktor&#10;    bezparametrowy klasy bazowej,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    wykonywane są instrukje konstruktora klasy pochodnej.&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Popatrzmy na przykład klasy &lt;samp&gt;Person&lt;/samp&gt; i &lt;samp&gt;Worker&lt;/samp&gt;&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Person {&#10;    String firstName;&#10;    String lastName;&#10;&#10;    public Person(){&#10;      firstName = &quot;brak&quot;;&#10;      lastName = &quot;brak&quot;&#10;    }&#10;&#10;    public Person(String firstName, String lastName){&#10;      this.firstName = firstName;&#10;      this.lastName = lastName;&#10;    }&#10;  }&#10;&#10;  class Worker extends Person{&#10;    String position;&#10;&#10;    public Worker(String position){&#10;      this.position = position;&#10;    }&#10;&#10;    @Override&#10;    public String toString(){&#10;      return firstName+&quot; &quot;+lastName+&quot; &quot;+position;&#10;    }&#10;  }&#10;&#10;  ...&#10;&#10;  Worker w = new Worker(&quot;magazynier&quot;);&#10;  System.out.println(w);&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  W efekcie zostanie wyświetlony napis:&#10;&lt;/p&gt;&#10;&lt;samp&gt;&#10;  brak brak magazynier&#10;&lt;/samp&gt;&#10;&lt;p&gt;&#10;  Ponieważ w konstruktorze klasy &lt;samp&gt;Worker&lt;/samp&gt; brak wywołania konstruktora klasy&#10;  &lt;samp&gt;Person&lt;/samp&gt; przez &lt;samp&gt;super(firstName, lastName)&lt;/samp&gt;, to niejawnie został&#10;  wywołany konstruktor bezparametrowy, w którym polom &lt;samp&gt;firstName&lt;/samp&gt; i&#10;  &lt;samp&gt;lastName&lt;/samp&gt; przypisany został napis &quot;brak&quot; i stąd taki efekt.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="7" />
                            <option name="name" value="Cześć 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Person {&#10;  protected String firstName;&#10;  protected String lastName;&#10;&#10;  public Person(){&#10;    firstName = &quot;brak&quot;;&#10;    lastName = &quot;brak&quot;;&#10;  }&#10;&#10;  public Person(String firstName, String lastName){&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  String position;&#10;&#10;&#10;  public Worker(String position){&#10;    this.position = position;&#10;  }&#10;&#10;  public String toString(){&#10;    return firstName+&quot; &quot;+lastName+&quot; &quot;+position;&#10;  }&#10;}&#10;&#10;class Task {&#10; public static void main(String[] args){&#10;   Worker w = new Worker(&quot;magazynier&quot;);&#10;   System.out.println(w);&#10; }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;    Uzupełnij kod w wyznaczonych miejscach, tak aby klasa &lt;code&gt;Laptop&lt;/code&gt; posiadała pole &lt;code&gt;ramSize&lt;/code&gt;, którego wartość&#10;    po utworzeniu obiektu ma wynosić 8. Nie modyfikuj programu poza zaznaczonymi miejscami &lt;code&gt;Laptop&lt;/code&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="8" />
                            <option name="name" value="Zadanie 4" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="33" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="43" />
                                            <option name="offset" value="35" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="uzupełnij klasę" />
                                            <option name="possibleAnswer" value="type here&#10;" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="65" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="16" />
                                            <option name="offset" value="95" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="uzuepłnij" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Computer{&#10;  int ramSize;&#10;  uzupełnij klasę}&#10;&#10;&#10;class Laptop uzuepłnij {&#10;  int batteryCellCapacity;&#10;  public Laptop(int batteryCellCapacity){&#10;    this.batteryCellCapacity = batteryCellCapacity;&#10;  }&#10;}&#10;&#10;public class Task {&#10;  public static void main(String[] args) {&#10;    Laptop acer = new Laptop(4000);&#10;    System.out.println(acer.ramSize);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/TestTask.java" value="import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;public class TestTask{&#10;  @Test&#10;  public void testLaptop() {&#10;    Laptop acer = new Laptop(4000);&#10;    Computer comp = new Computer();&#10;    assertEquals(&quot;Niepoprawna wartość pola ramSize.&quot;, acer.ramSize, 8);&#10;    assertEquals(&quot;Brak odpowiedniego konstruktora klasy Computer.&quot;, comp.ramSize, 8);&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Pokrywanie składowych&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Kolejnym elementem dziedziczenia jest możliwość pokrywania pól i metod statycznych.&#10;    W klasie pochodnej możemy dodać pole o identycznej nazwie ale innym typie i tym samym&#10;    tracimy możliwość odwoływania się do odpowiedniego pola z klasy bazowej.&#10;    W przypadku metod statycznych pokrycie polega na zdefiniowaniu metody z klasy bazowej o takiej samej sygnaturze w klasie pochodnej.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Możliwe jest także zadeklarowanie pola o tej samej nazwie co w klasie bazowej.&#10;    W klasie &lt;samp&gt;Worker&lt;/samp&gt; zmienimy typ odziedziczonego pola &lt;samp&gt;name&lt;/samp&gt; na &lt;samp&gt;char[]&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Person{&#10;  protected String name;&#10;  public Person(String name){&#10;    this.name = name;&#10;  }&#10;&#10;  public Person(){&#10;  }&#10;&#10;  public String getName(){&#10;    return name;&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  protected char[] name;&#10;  public Worker(char[] name){&#10;    this.name = name;&#10;  }&#10;&#10;  public String getName(){&#10;    return new String(name);&#10;  }&#10;}&#10;&#10;class Main {&#10;  public static void main(String[] args) {&#10;    Person p = new Worker(&quot;Adam&quot;.toCharArray());&#10;    System.out.println(p.getName());&#10;    System.out.println(p.name);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Efektem programu jest są napisy:&#10;&lt;/p&gt;&#10;&lt;samp&gt;&#10;    Adam&lt;br&gt;&#10;    null&#10;&lt;/samp&gt;&#10;&lt;p&gt;&#10;    Przykład ten ilustruje, że pole &lt;samp&gt;name&lt;/samp&gt; klasy &lt;samp&gt;Worker&lt;/samp&gt; to inne pole niż &lt;samp&gt;name&lt;/samp&gt;&#10;    z klasy &lt;samp&gt;Person&lt;/samp&gt;. Przykrycie powoduje, że chociaż zostało ono odziedziczone, to nie można się do&#10;    niego odwołać dla obiektu klasy &lt;samp&gt;Worker&lt;/samp&gt;. Ponieważ referencja &lt;samp&gt;p&lt;/samp&gt; jest typu&#10;    &lt;samp&gt;Person&lt;/samp&gt;, więc odwołanie &lt;samp&gt;p.name&lt;/samp&gt; dotyczyło pola z klasy &lt;samp&gt;Person&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Gdy odwołaliśmy się do metody &lt;samp&gt;getName()&lt;/samp&gt; to wybrana została metoda zgodna nie z typem referencji&#10;    ale z typem obiektu, dlatego została wywołana metoda należąca do klasy &lt;samp&gt;Worker&lt;/samp&gt; i&#10;    otrzymaliśmy poprawny wynik, pomimo przykrycia pola &lt;samp&gt;name&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="9" />
                            <option name="name" value="Cześć 5" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Person{&#10;  protected String name;&#10;&#10;  public Person(String name){&#10;    this.name = name;&#10;  }&#10;&#10;  public Person(){&#10;  }&#10;&#10;  public String getName(){&#10;    return name;&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  protected char[] name;&#10;&#10;  public Worker(char[] name){&#10;    this.name = name;&#10;  }&#10;&#10;  public String getName(){&#10;    return new String(name);&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Person p = new Worker(&quot;Adam&quot;.toCharArray());&#10;    System.out.println(p.getName());&#10;    System.out.println(p.name);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Blokowanie dziedziczenia&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Posługując się słowem kluczowym &lt;samp&gt;final&lt;/samp&gt; można zablokować możliwość&#10;    dziedziczenia klasy lub nadpisywania metod. Wiele klas bibliotecznych jest definniowanych&#10;    jako &lt;samp&gt;final&lt;/samp&gt; np. java.lang.String.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Przykład klasy finalnej:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;final class Point {&#10;    final int x;&#10;    final int y;&#10;    public Point(int x, int y){&#10;        this.x = x;&#10;        this.y = y;&#10;    }&#10;}&#10;        &lt;/code&gt;&#10;    &lt;/pre&gt;&#10;&lt;p&gt;&#10;    Przykład klasy z metodą finalną:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class Box{&#10;  final int width;&#10;  final int height;&#10;&#10;  public Box(int width, int height){&#10;    this.width = width;&#10;    this.height = height;&#10;  }&#10;&#10;  final public Box extend(int dw, int dh){&#10;    return new Box(width+dw, height+dh);&#10;  }&#10;}&#10;&#10;class Cube extends Box{&#10;  final int depth;&#10;&#10;  public Cube(int w, int h, int d){&#10;    super(w, h);&#10;    this.depth = d;&#10;  }&#10;&#10;  public Cube extend(int dw, int dh, int dd){&#10;    return new Cube(width + dw, height+dh, depth + dd);&#10;  }&#10;&#10;  public Box extend(int dw, int dd){&#10;      return new Box( width + dw, depth + dd);&#10;  }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;W przykładzie zablokowana została metoda &lt;samp&gt;extend&lt;/samp&gt; przed nadpisaniem w&#10;klasach pochodnych. W klasie &lt;samp&gt;Cube&lt;/samp&gt; wyprowadzonej z &lt;samp&gt;Box&lt;/samp&gt;&#10;    zdefiniowano &lt;samp&gt;extend&lt;/samp&gt;, ale nie jest to nadpisanie, gdyż ma inną sygnaturę.&lt;/p&gt;&#10;&lt;p&gt;Próba nadpisania metody finalnej spowoduje wygenerowanie błędu kompilacji:&lt;/p&gt;&#10;&lt;samp&gt;&#10;    Error:(27, 14) java: extend(int,int) in Cube cannot override extend(int,int) in Box&#10;    overridden method is final&#10;&lt;/samp&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="10" />
                            <option name="name" value="Część 6" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Box{&#10;  final int width;&#10;  final int height;&#10;&#10;  public Box(int width, int height){&#10;    this.width = width;&#10;    this.height = height;&#10;  }&#10;&#10;  final public Box extend(int dw, int dh){&#10;    return new Box(width+dw, height+dh);&#10;  }&#10;}&#10;&#10;class Cube extends Box{&#10;  final int depth;&#10;&#10;  public Cube(int w, int h, int d){&#10;    super(w, h);&#10;    this.depth = d;&#10;  }&#10;  //to nie jest metoda odziedziczona - inny typ zwracany&#10;  public Cube extend(int dw, int dh, int dd){&#10;    return new Cube(width + dw, height+dh, depth + dd);&#10;  }&#10;  //sygnatura metody odziedziczonej - nie można nadpisać bo jest&#10;  public Box extendBox(int dw, int dd){&#10;      return new Box( width + dw, depth + dd);&#10;  }&#10;}&#10;&#10;class Task {&#10;  static public void main(String[] args){&#10;    Box b = new Box(1, 4);&#10;    b = b.extend(2,5);&#10;    System.out.println(b.height+&quot; &quot;+ b.width);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Klasa abstrakcyjna&lt;/h1&gt;&#10;&lt;p&gt;&#10;  &lt;ul&gt;&#10;  &lt;li&gt;&#10;  Oznaczana słowem &lt;code&gt;abstract&lt;/code&gt;,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;  Nie może służyć do tworzenia obiektów,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;  Służy do wyprowadzania klas,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Miże posiadać pola i metody zdefiniowane,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;  Może posiadać metody abstrakcyjne, które są tylko sygnaturami,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;  Klasy potomne muszą implementować (definiować) metody abstrakcyjne.&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;Przykład klasy abstrakcyjne z metodą abstrakcyjną.&#10;&lt;pre&gt;&#10;&lt;code&gt;&#10;abstract class Vehicle {&#10;    protected final double weight;&#10;    protected double mileage;&#10;&#10;    public Vehicle(double weight){&#10;      this.weight = weight;&#10;    }&#10;    public double getMileage(){&#10;      return mileage;&#10;    }&#10;    public double getWeigth(){&#10;      return weight;&#10;    }&#10;&#10;    public abstract void start();&#10;    public abstract void stop();&#10;}&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="11" />
                            <option name="name" value="Część 7" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/AbstractDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/AbstractDemo.java" />
                                      <option name="text" value="abstract class Vehicle {&#10;  protected final double weight;&#10;  protected double mileage;&#10;&#10;  public Vehicle(double weight){&#10;    this.weight = weight;&#10;  }&#10;&#10;  public double getMileage(){&#10;    return mileage;&#10;  }&#10;&#10;  public double getWeigth(){&#10;    return weight;&#10;  }&#10;&#10;  public abstract void start()&#10;          ;&#10;  public abstract void stop();&#10;}&#10;&#10;class AbstractDemo {&#10;  public static void main(String[] args) {&#10;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/AbstractExtendsDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AbstractExtendsDemo.java" />
                                      <option name="text" value="class Bike extends Vehicle{&#10;&#10;  public Bike(double weight) {&#10;    super(weight);&#10;  }&#10;&#10;  @Override&#10;  public void start() {&#10;&#10;  }&#10;&#10;  @Override&#10;  public void stop() {&#10;&#10;  }&#10;}&#10;&#10;public class AbstractExtendsDemo {&#10;  public static void main(String[] args) {&#10;&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Uzupełnij definicję klasę abstrakcyjnej &lt;code&gt;Animal&lt;/code&gt; tak, aby Poprawnie wykonał się poniższy kod.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="12" />
                            <option name="name" value="Zadanie 5" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/DemoAnimal.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DemoAnimal.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="28" />
                                                <option name="offset" value="25" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="112" />
                                            <option name="offset" value="23" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="uzupełnij klasę abstrakcyjną" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="abstract class Animal{&#10;  uzupełnij klasę abstrakcyjną&#10;}&#10;&#10;class Dog extends Animal{&#10;&#10;  public Dog(String name) {&#10;    super(name);&#10;  }&#10;&#10;  public String getSound(){&#10;    return name + &quot; makes wuff wuff&quot;;&#10;  }&#10;}&#10;&#10;class Cat extends Animal{&#10;  public Cat(String name) {&#10;    super(name);&#10;  }&#10;&#10;  public String getSound(){&#10;    return name + &quot; makes miau miau&quot;;&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    Animal[] pets = new Animal[2];&#10;    pets[0] = new Dog(&quot;Szarik&quot;);&#10;    pets[1] = new Cat(&quot;Filemon&quot;);&#10;    for (Animal a: pets){&#10;      System.out.println(a.getSound());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/TestTask.java" value="import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;public class TestTask{&#10;  @Test&#10;  public void testLaptop() {&#10;    Dog dog = new Dog(&quot;AAAA&quot;);&#10;    Cat cat = new Cat(&quot;BBBB&quot;);&#10;    assertEquals(&quot;&quot;, dog.getSound(),  &quot;AAAA makes wuff wuff&quot;);&#10;    assertEquals(&quot;&quot;, cat.getSound(), &quot;BBBB makes miau miau&quot;);&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Polimorfizm&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Polimorfizm to różnorodne odpowiedzi na to samo pytanie. Pytaniem jest wywołanie tej samej metody dla obiektów różnych typów, odpowiedzią jest efekt wywołania. Warunkiem wywołania tej samej moetody jest, aby obiekty były klas, których superklasą jest jedna klasa, klasa referencji.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Rodzaje polimorfizmu:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        statyczny – gdy rodzaj odpowiedzi znamy przed kompilacją i uruchomieniem programu np.&#10;        &lt;pre&gt;&#10;            &lt;code&gt;&#10;    int liczba = 12;&#10;    String str = &quot;12&quot;;&#10;    System.out.println(liczba + 12);&#10;    System.out.println(str+12);&#10;&#10;            &lt;/code&gt;&#10;        &lt;/pre&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        dynamiczny – gdy rodzaj odpowiedzi jest ustalany w trakcie działania programu:&#10;        &lt;pre&gt;&#10;            &lt;code&gt;&#10;    Scanner input = new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz nazwę klasy:&quot;);&#10;    String klasa = input.nextLine();&#10;    Vehicle pojazd = null;&#10;    switch(klasa){&#10;      case &quot;Car&quot;:&#10;        pojazd = new Car(1200, 145, 50);&#10;        break;&#10;      case &quot;Bicycle&quot;:&#10;        pojazd = new Bicycle(15, 3);&#10;        break;&#10;    }&#10;    if (pojazd != null)&#10;       pojazd.start();&#10;&#10;            &lt;/code&gt;&#10;        &lt;/pre&gt;&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;    Aby rozpoznać typ obiektów, który wskazuje referencja musimy posłużyć się operatorem &lt;code&gt;instanceof&lt;/code&gt;:&#10;    &lt;pre&gt;&#10;    &lt;code&gt;&#10;        obiekt instanceof klasa&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    W przykładzie tablica zawiera obiekty trzech różnych klas pochodzących od klasy &lt;samp&gt;Vehicle&lt;/samp&gt;. Tylko klasa &lt;code&gt;Car&lt;/code&gt; posiada metodę &lt;code&gt;getFuelLevel()&lt;/code&gt;, więc nie możemy wywołać tej metody dla każdego obiektu w tablicy. Korzystając z &lt;code&gt;instanceof&lt;/code&gt; możemy rozpoznać właściwy obiekt i wywołać dla niego metodę.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;    Vehicle[] vehicles = new Vehicle[3];&#10;    vehicle[0] = new Car(1200, 100, 45);&#10;    vehicle[1] = new Bicycle(15);&#10;    vehicle[2] = new Train(25000);&#10;    for(Vehicle v: vehicles){&#10;        System.out.println(v.start());&#10;        System.out.println(v.stop());&#10;        System.out.println(v.getWeight());&#10;    }&#10;    for(Vehicle v: vehicles){&#10;        v.start();&#10;&#10;    if (v instanceof Car)&#10;        System.out.println(&quot;The fule level in car = &quot; +((Car) v).getFuelLevel());&#10;}&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Aby wywołać metodę zdefiniowaną w klasie&lt;code&gt;Vehicle&lt;/code&gt; musimy zrzutować referencję do tej klasy, stąd zapis &lt;code&gt;(Car) v&lt;/code&gt; oznacza referencję do obiektu klasy &lt;code&gt;Car&lt;/code&gt;, dla której wywołujemy metodę &lt;code&gt;getFuelLevel()&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="13" />
                            <option name="name" value="Część 8" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Bicycle.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Bicycle.java" />
                                      <option name="text" value="public class Bicycle extends Vehicle {&#10;  public Bicycle(double weight) {&#10;    super(weight);&#10;  }&#10;&#10;  @Override&#10;  public void start() {&#10;    System.out.println(&quot;Bicycle is moving&quot;);&#10;  }&#10;&#10;  @Override&#10;  public void stop() {&#10;&#10;  }&#10;&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Car.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Car.java" />
                                      <option name="text" value="class Car extends Vehicle{&#10;  int power;&#10;  int fuel;&#10;  public Car(double weight, int power, int fuel) {&#10;&#10;    super(weight);&#10;    this.power = power;&#10;    this.fuel = fuel;&#10;  }&#10;&#10;  @Override&#10;  public void start() {&#10;    System.out.println(&quot;Car is moving!&quot;);&#10;  }&#10;&#10;  @Override&#10;  public void stop() {&#10;&#10;  }&#10;&#10;  public int getFuelLevel(){&#10;    return fuel;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InstaceOfDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InstaceOfDemo.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;public class InstaceOfDemo {&#10;  public static void main(String[] args) {&#10;    Vehicle[] vehicles = new Vehicle[3];&#10;    vehicles[0] = new Car(1200, 100, 45);&#10;    vehicles[1] = new Bicycle(15);&#10;    vehicles[2] = new Train(25000);&#10;    for(Vehicle v: vehicles){&#10;      v.start();&#10;      v.stop();&#10;      System.out.println(v.getWeight());&#10;    }&#10;    for(Vehicle v: vehicles){&#10;      v.start();&#10;&#10;      if (v instanceof Car)&#10;        System.out.println(&quot;The fule level in car = &quot; +((Car) v).getFuelLevel());&#10;    }&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PolymorphismDemo.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PolymorphismDemo.java" />
                                      <option name="text" value="import java.util.Scanner;&#10;&#10;public class PolymorphismDemo {&#10;  public static void main(String[] args) {&#10;    Scanner input = new Scanner(System.in);&#10;    System.out.println(&quot;Wpisz nazwę klasy:&quot;);&#10;    String klasa = input.nextLine();&#10;    Vehicle pojazd = null;&#10;    switch(klasa){&#10;      case &quot;Car&quot;:&#10;        pojazd = new Car(1200, 125, 30);&#10;        break;&#10;      case &quot;Bicycle&quot;:&#10;        pojazd = new Bicycle(15);&#10;        break;&#10;    }&#10;    if (pojazd != null)&#10;      pojazd.start();&#10;  }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Train.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Train.java" />
                                      <option name="text" value="public class Train extends Vehicle{&#10;  public Train(double weight) {&#10;    super(weight);&#10;  }&#10;&#10;  @Override&#10;  public void start() {&#10;    System.out.println(&quot;Train is moving&quot;);&#10;  }&#10;&#10;  @Override&#10;  public void stop() {&#10;&#10;  }&#10;&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Vehicle.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Vehicle.java" />
                                      <option name="text" value="abstract class Vehicle {&#10;  protected final double weight;&#10;  protected double mileage;&#10;&#10;  public Vehicle(double weight){&#10;    this.weight = weight;&#10;  }&#10;&#10;  public double getMileage(){&#10;    return mileage;&#10;  }&#10;&#10;  public double getWeight(){&#10;    return weight;&#10;  }&#10;&#10;  public abstract void start();&#10;  public abstract void stop();&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Uzupełnij pętlę tak, aby dla obiektów typu &lt;code&gt;Car&lt;/code&gt; i &lt;code&gt;Truck&lt;/code&gt; wywołać metodę &lt;code&gt;getFuelLevel&lt;/code&gt;, a dla obiektu typu &lt;code&gt;Truck&lt;/code&gt; metodę &lt;code&gt;getWheels&lt;/code&gt;.&#10;  Program powinien wyświetlić kolejne napisy jak poniżej;&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  Car - fueal 23&#10;  Truck - fuel 120 wheels 8&#10;  Car - fueal 34&#10;&lt;/pre&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Użyj operatora instanceof&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="14" />
                            <option name="name" value="Zadanie 6" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Car.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Car.java" />
                                      <option name="text" value="class Car extends Vehicle{&#10;  int power;&#10;  int fuel;&#10;  public Car(double weight, int power, int fuel) {&#10;&#10;    super(weight);&#10;    this.power = power;&#10;    this.fuel = fuel;&#10;  }&#10;&#10;  @Override&#10;  public void start() {&#10;    System.out.println(&quot;Car is moving!&quot;);&#10;  }&#10;&#10;  @Override&#10;  public void stop() {&#10;&#10;  }&#10;&#10;  public int getFuelLevel(){&#10;    return fuel;&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Truck extends Car{&#10;  int wheels;&#10;&#10;  public Truck(double weight, int power, int fuel, int wheels) {&#10;    super(weight, power, fuel);&#10;    this.wheels = wheels;&#10;  }&#10;&#10;  public int getWheels() {&#10;    return wheels;&#10;  }&#10;}&#10;&#10;class Task{&#10;  public static void main(String[] args) {&#10;    Vehicle[] flota = new Vehicle[3];&#10;    flota[0] = new Car(900, 90, 23);&#10;    flota[1] = new Truck(5300, 300, 120, 8);&#10;    flota[2] = new Car(1200, 160, 34);&#10;    for (Vehicle v: flota){&#10;      if (v instanceof Truck)&#10;        System.out.println(&quot;Truck - fuel &quot;+((Truck) v).getFuelLevel() +&quot; wheels &quot;+((Truck) v).getWheels());&#10;      else&#10;      if (v instanceof Car)&#10;        System.out.println(&quot;Car - fueal &quot;+ ((Car) v).getFuelLevel());&#10;    }&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Train.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Train.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Vehicle.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Vehicle.java" />
                                      <option name="text" value="abstract class Vehicle {&#10;  protected final double weight;&#10;  protected double mileage;&#10;&#10;  public Vehicle(double weight){&#10;    this.weight = weight;&#10;  }&#10;&#10;  public double getMileage(){&#10;    return mileage;&#10;  }&#10;&#10;  public double getWeight(){&#10;    return weight;&#10;  }&#10;&#10;  public abstract void start();&#10;  public abstract void stop();&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Podsumowanie wiadomości o dziedziczeniu w Java:&#10;  &lt;ul&gt;&#10;  &lt;li&gt;&#10;    powoduje przejmowanie wszystkich pól i metod.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    w klasie pochodnej dostępne są tylko nieprywatne składowe,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    umożliwia przejmowanie składowych tylko z jednej klasy, nie można dziedziczyć po wielu klasach,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    każda klasa, której nie wskażemy klasy bazowej, dziedziczy domyślnie po klasie &lt;samp&gt;Object&lt;/samp&gt;,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    w zmiennych typu bazowego można umieszczać obiekty klasy wyprowadzonej, czyli w miejscu rodzica&#10;    można umieścić obiekty potomne,&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    przedefiniowanie odziedziczonych metod następuje przez nadpisywanie, metody nadpisywane oznaczamy&#10;    adnotacją &lt;samp&gt;@Override&lt;/samp&gt; a sygnatura metody w klasie pochodnej musi być identyczna&#10;    z metodą nadpisywaną.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    W klasie potomnej można odwoływać się do klasy bazowej słowem kluczowym &lt;samp&gt;super&lt;/samp&gt; np. &lt;samp&gt;&#10;    super() to wywołanie konstruktora, a &lt;samp&gt;super.metoda&lt;/samp&gt; to wywołanie metody.&#10;  &lt;/samp&gt;&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    Przy inicjowaniu obiektów klas pochodnych jest niejawnie wywoływany bezparametrowy konstruktor klasy&#10;    bazowej, jeśli w konstuktorze klasy wyprowadzonej nie ma jawnego wywołania poprzez &lt;samp&gt;super()&lt;/samp&gt;.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    zablokowanie możliwości dziedziczenia z danej klasy polega na dodaniu słowa kluczowego &lt;samp&gt;final&lt;/samp&gt;&#10;    przy deklaracji klasy.&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    zablokowanie nadpisywania metody w klasie potomnje powoduje dodanie słowa kluczowego&#10;    &lt;samp&gt;final&lt;/samp&gt; w sygnaturze metody klasy bazowej.&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="15" />
                            <option name="name" value="Podsumowanie" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/CapoeiraField.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CapoeiraField.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PlayingField.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PlayingField.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SockerFilds.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SockerFilds.java" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Task {&#10;  //put your task here&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Agregacja i kompozycja" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;Choć z terminem tym dotąd nie spotkaliśmy się, to wiele&#10;przykładów klas korzystało z tego rozwiązania.&#10;Przypomnijmy klasę &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;&lt;code&gt;&#10;public class Person {&#10;    public String firstName;&#10;    public String lastName;&#10;    public LocalDate birthDate;&#10;&#10;    public Person(String firstName, String lastName, LocalDate birthDate) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.birthDate = birthDate;&#10;    }&#10;&#10;    public String toString(){&#10;        return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;    }&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Agregacja to zawieranie się obiektów innych&#10;    klas w definiowanej klasie. W przykładzie&#10;    wszystkie pola są obiektami klas: &lt;samp&gt;String&lt;/samp&gt; i &lt;samp&gt;LocalDate&lt;/samp&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Agregacja" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person {&#10;  public String firstName;&#10;  public String lastName;&#10;  public LocalDate birthDate;&#10;&#10;  public Person(String firstName, String lastName, LocalDate birthDate) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;    this.birthDate = birthDate;&#10;  }&#10;&#10;  public String toString(){&#10;    return firstName +&quot; &quot;+lastName+&quot; &quot;+birthDate;&#10;  }&#10;}&#10;class Task {&#10;  public static void main(String[] args) {&#10;      System.out.println(new Person(&quot;RYSZAR&quot;, &quot;OCHÓCKI&quot;, LocalDate.now()));&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;hq&gt;Kompozycja&lt;/hq&gt;&#10;&lt;p&gt;&#10;Szczególnym rodzajem agregacji jest kompozycja, gdy obiekty składowe mogą istnieć tylko&#10;w obiekcie je zawierającym, tak jak i istnienie obiektu nadrzędnego nie ma sensu bez&#10;jego obiektów składowych. Przykładem może być silnik i samochód. Istnienie silnika&#10;bez samochodu nie ma sensu, bo jego przeznaczeniem jest napędzanie samochodu, jest&#10;jego składnikiem. Samochód bez silnika przestaje być samochodem, jest niekompletny.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Agregacja jest związkiem typu &quot;należy do&quot; a kompozycja &quot;jest częścią&quot;.&#10;  Dlatego nie należy mylić kompozycji z agregacją. Przykładowo klasa &lt;samp&gt;kontener na butelki&lt;/samp&gt;&#10;  i &lt;samp&gt;piwo w butelkach&lt;/samp&gt; nie są dobrym przykładem kompozycji. Sam kontener&#10;  może przechowywać różne butelki,&#10;  niekoniecznie zawierające piwo, wystarczy, że butelka będzie miała odpowiedni&#10;  wymiar. Piwo w butelce nie musi być przechowywane ciągle w kontenerze, może&#10;  potem znaleźć się w lodówce, więc może istnieć bez tego obiektu i tym samym klasy.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  W prezentowanym w poprzedniej części przykładzie zarówno typ &lt;code&gt;String&lt;/code&gt; jak i &lt;code&gt;LocalDate&lt;/code&gt;&#10;  są bardzo uniwersalne i moga stanowić zarówno składowe innych klas jak i istnieć&#10;  samodzielnie, więc klasa &lt;samp&gt;Person&lt;/samp&gt; jest przykładem agregacji.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Z drugiej strony dla klasy &lt;samp&gt;Person&lt;/samp&gt; pola typu &lt;samp&gt;firstName&lt;/samp&gt; i &lt;samp&gt;lastName&lt;/samp&gt; są niezbędnym elementem, bez tych dwóch pól klasa nie ma sensu istnienia. Zatem&#10;  znaczenie agregacji i kompozycji wynika nie tyle z klasy popla, co znaczenia pola w klasie.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Kompozycja" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Engine{&#10;  final double nominalPower;&#10;  public Engine(double pnominalPower){&#10;    this.nominalPower = pnominalPower;&#10;  }&#10;}&#10;&#10;class Car{&#10;  private Engine engine;&#10;  String name;&#10;  public Car(double power){&#10;    this.engine = new Engine(power);&#10;  }&#10;&#10;  public String start(){&#10;    if (engine != null){&#10;      return &quot;Start&quot;;&#10;    } else {&#10;      return &quot;Can't start,no engine&quot;;&#10;    }&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    System.out.println(new Car(200).start());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Kompozycja jaka alternatywa dziedziczenia&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Kompozycja (agregacja) może być częściowo alternatywą dla dziedziczenia. Popatrzmy na&#10;  przykład rozszerzenia klasy &lt;samp&gt;Worker&lt;/samp&gt; przy pomocy klasy &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker {&#10;    private Person personalData;&#10;    String position;&#10;    double salary;&#10;&#10;    public Worker(String firstName, String lastName, String position, double salary){&#10;      personalData = new Person(firstName. lastName);&#10;      this.position = position;&#10;      this.salary = salary;&#10;    }&#10;  }&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Dane osobowe są polem typu &lt;samp&gt;Person&lt;/samp&gt; i aby odczytać jej składowe mamy dwie możliwości:&#10;  &lt;ol&gt;&#10;    &lt;li&gt;&#10;      dodać getter zwracający cały obiekt personlData, wtedy dostęp do jego&#10;      pól zależy od getterów klasy &lt;samp&gt;Person&lt;/samp&gt;.&#10;    &lt;/li&gt;&#10;  &lt;li&gt;&#10;    dodać gettery dla każdego pola klasy &lt;samp&gt;Person&lt;/samp&gt;, wtedy klasa Worker&#10;    w pełni kontroluje dane.&#10;  &lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;W pierwszym przypadku definiujemy getter getPersonlaData, który zwraca obiekt klasy Person&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker {&#10;    private Person personalData;&#10;    String position;&#10;    double salary;&#10;&#10;    public Worker(String firstName, String lastName, String position, double salary){&#10;      personalData = new Person(firstName. lastName);&#10;      this.position = position;&#10;      this.salary = salary;&#10;    }&#10;&#10;    public Person getPersonalData(){&#10;      return personalData;&#10;    }&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Odczyt imienia lub nazwiska wymaga teraz znajomości metod obiektu &lt;samp&gt;Person&lt;/samp&gt;:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;    Worker builder = new Worker(&quot;ADAM&quot;, &quot;NOWAK&quot;, &quot;mistrz&quot;, 2500);&#10;    System.out.println(builder.getPersonlaData().getFistName());&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;W drugim przypadku tworzymy dla każdego pola &lt;samp&gt;personalData&lt;/samp&gt; metodę odczytującą każde pole&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;  class Worker {&#10;    private Person personalData;&#10;    String position;&#10;    double salary;&#10;&#10;    public Worker(String firstName, String lastName, String position, double salary){&#10;      personalData = new Person(firstName. lastName);&#10;      this.position = position;&#10;      this.salary = salary;&#10;    }&#10;&#10;    public String getFirstName(){&#10;      return personalData.getFirstName();&#10;    }&#10;&#10;    public String getLastName(){&#10;      return personalData.getLastName();&#10;    }&#10;  }&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;Drugie rozwiązanie wymaga więcej tworzenia kodu, ale z punktu widzenia klienta klasy jest bardzie przejrzyste.&#10;Ma też inne zalety które, omówimy w następnym rozdziale.&lt;/p&gt;&#10;&lt;p&gt;Stosując kompozycję utraciliśmy pewne właściwości wynikające z dziedziczenia i polimorfizmu,&#10;stosując interfejsy możemy odzyskać te własności.&lt;/p&gt;&#10;&lt;p&gt;&#10;  Zaletą kompozycji w stosunko do dziedziczenia jest też możliwość budowania klasy z wielu komponentów, gdy dziedziczenie możliwe jest tylko po jednej klasie.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Kompozycja jako alternatywa dziedziczenia" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="import java.time.LocalDate;&#10;&#10;class Person {&#10;  protected String firstName;&#10;  protected String lastName;&#10;&#10;  public Person(String firstName, String lastName) {&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;  }&#10;}&#10;&#10;class Worker extends Person{&#10;  protected String position;&#10;  protected double salary;&#10;&#10;  public Worker(String firstName, String lastName, String position, double salary){&#10;    super(firstName, lastName);&#10;    this.position = position;&#10;    this.salary = salary;&#10;  }&#10;}&#10;&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;  Person adam = new Worker(&quot;ADAM&quot;, &quot;KOWAL&quot;, &quot;magazynier&quot;, 2000);&#10;  System.out.println(adam.firstName);&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;  Zdefiniuj metodę statyczną &lt;samp&gt;build&lt;/samp&gt; klasy &lt;samp&gt;Computer&lt;/samp&gt; w ten sposób, aby przyjmowała trzy parametry typu: &lt;samp&gt;CPU&lt;/samp&gt;, &lt;samp&gt;Ram&lt;/samp&gt; i &lt;samp&gt;Disk&lt;/samp&gt; i zwracała obiekt tylko wtedy gdy wszystkie parametry nie są null. Gdy któryś z parametrów jest równy null funkcja też ma zwrócić tę wartość. Określ także modyfikator zasięgu, aby nie można było wywołać konstruktora.&#10;&lt;/p&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Zadanie 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="53" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="53" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="wpisz modyfikator zasięgu" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="22" />
                                                <option name="offset" value="214" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="22" />
                                            <option name="offset" value="214" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="wpisz listę parametrów" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="20" />
                                                <option name="offset" value="243" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="20" />
                                            <option name="offset" value="243" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Uzupełnij kod metody" />
                                            <option name="possibleAnswer" value="type here" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class Computer{&#10;  Ram ram;&#10;  CPU cpu;&#10;  Disk dis;&#10;&#10;  wpisz modyfikator zasięgu Computer(CPU cpu, Ram ram, Disk dis) {&#10;    this.ram = ram;&#10;    this.cpu = cpu;&#10;    this.dis = dis;&#10;  }&#10;&#10;  public static Computer build(wpisz listę parametrów){&#10;    Uzupełnij kod metody&#10;  }&#10;}&#10;&#10;class Ram{&#10;  int size;&#10;&#10;  public Ram(int size) {&#10;    this.size = size;&#10;  }&#10;}&#10;&#10;class CPU{&#10;  public CPU(String type) {&#10;    this.type = type;&#10;  }&#10;&#10;  String type;&#10;&#10;}&#10;&#10;class Disk{&#10;  public Disk(int size) {&#10;    this.size = size;&#10;  }&#10;&#10;  int size;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/TestTask.java" value="import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;public class TestTask{&#10;  @Test&#10;  public void testComputer() {&#10;    Computer comp = Computer.build(new CPU(&quot;i5&quot;), new Ram(8), new Disk(1000));&#10;    assertNotEquals(&quot;Powinien istnieć obiekt&quot;, comp, null );&#10;    Computer compNull = Computer.build(null, null, null);&#10;    assertEquals(&quot;Nie powinien istnieć obiekt&quot;, compNull, null );&#10;    compNull = Computer.build(new CPU(&quot;i5&quot;), null, null);&#10;    assertEquals(&quot;Nie powinien istnieć obiekt&quot;, compNull, null );&#10;    compNull = Computer.build(null, new Ram(8), null);&#10;    assertEquals(&quot;Nie powinien istnieć obiekt&quot;, compNull, null );&#10;    compNull = Computer.build(null, null, new Disk(1000));&#10;    assertEquals(&quot;Nie powinien istnieć obiekt&quot;, compNull, null );&#10;  }&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Hermetyzacja" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="0" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Hermetyzacja&lt;/h1&gt;&#10;&lt;p&gt;&#10;  Hermetyzacja to ukrywanie i zamykanie wewnętrznych mechanizmów klasy przed światem zewnętrznym. Klient korzystający&#10;  z naszej klasy nie powinien zaburzać działania tego co się dzieje wenątrz klasy, dlatego ukrycie i zablokowanie&#10;  dostępu do części pól i metod jest bardzo ważne. Celem jest stworzenie klas, które zachowują się&#10;  jak czarne, magiczne pudełko, które właściwie reagują tylko na udostępnione przyciski, nie dając możliwości&#10;  zajrzenia do środka, co mogłoby zaburzyć właściwe działanie.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;  Podstawową metodą ukrywania jest stosowanie modyfikatora &lt;samp&gt;private&lt;/samp&gt;. Problem pojawia się&#10;  jednak w sytuacji, gdy chcemy budować hierarchie klas z użyciem dziedziczenia, bo mamy dostęp do odziedziczonych&#10;  pól z modyfiaktorem &lt;samp&gt;public&lt;/samp&gt; lub &lt;samp&gt;protected&lt;/samp&gt;. Tym samym dostęp do tych pól&#10;  mają nie tylko klasy potomne, ale także wszystkie klasy tego samego pakietu.&#10;&lt;/p&gt;&#10;&lt;p&gt;Możemy ograniczyć dostęp do wybranych pól klas bazowych definiując je jako&#10;  pole prywatne dodając tylko akcesor publiczny dający możliwość tylko odczytu.&lt;/p&gt;&#10;&lt;pre&gt;&#10;  &lt;code&gt;&#10;class User{&#10;  private String name;&#10;&#10;  public User(String name){&#10;    this.name = name;&#10;  }&#10;&#10;  public String getName(){&#10;    return name;&#10;  }&#10;}&#10;&#10;&#10;class Admin extends User{&#10;  private String rights;&#10;  public Admin(String name, String rights){&#10;    super(name);&#10;    this.rights = rights;&#10;  }&#10;&#10;  public String getName(){&#10;    return super.getName();&#10;  }&#10;}&#10;&#10;...&#10;User p1 = new User(&quot;MISIEK&quot;);&#10;User p2 = new Admin(&quot;SUPER&quot;, &quot;AAAE&quot;);&#10;System.out.println(p1.getName());&#10;System.out.println(p2.getName());&#10;  &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;  Pomimo, że w klasie &lt;samp&gt;User&lt;/samp&gt; pole &lt;samp&gt;name&lt;/samp&gt; jest prywatne, to widoczność zapewniliśmy definiując metodę&#10;  publiczną &lt;samp&gt;getName()&lt;/samp&gt;. Pole to jest dziedziczone i inicjowane konstuktorem klasy bazowej.&#10;  Ponieważ nie mamy żadnego bezpośredniego dostępu do tego pola w klasie &lt;samp&gt;Admin&lt;/samp&gt;, więc dostęp&#10;  do niego kontroluje wyłącznie klasa bazowa. Tym samym zapewniona jest hermetyczność tego pola w klasie potomnej&#10;  jak i wszystkich pozostałych klasach na tym samym poziomie, a jednocześnie wykorzystaliśmy dziedziczenie.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Część 1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="0" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="taskFiles">
                              <map>
                                <entry key="src/Task.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.java" />
                                      <option name="text" value="class User{&#10;  private String name;&#10;&#10;  public User(String name){&#10;    this.name = name;&#10;  }&#10;&#10;  public String getName(){&#10;    return name;&#10;  }&#10;}&#10;&#10;&#10;class Admin extends User{&#10;  private String rights;&#10;  public Admin(String name, String rights){&#10;    super(name);&#10;    this.rights = rights;&#10;  }&#10;&#10;  public String getName(){&#10;    return super.getName();&#10;  }&#10;}&#10;&#10;class Task {&#10;  public static void main(String[] args){&#10;    User p1 = new User(&quot;MISIEK&quot;);&#10;    User p2 = new Admin(&quot;SUPER&quot;, &quot;AAAE&quot;);&#10;    System.out.println(p1.getName());&#10;    System.out.println(p2.getName());&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="testsText">
                              <map>
                                <entry key="test/Test.java" value="public class Test {&#10;    // put your test here&#10;}" />
                              </map>
                            </option>
                            <option name="updateDate" value="0" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="0" />
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </Course>
      </option>
    </StudyTaskManager>
  </component>
</project>