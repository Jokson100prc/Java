{
  "summary": "Kurs języka Java dla SDA",
  "title": "Kurs Javy",
  "programming_language": "JAVA",
  "language": "en",
  "course_type": "PyCharm",
  "items": [
    {
      "title": "Java podstawowa",
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "items": [
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Wstęp",
          "task_list": [
            {
              "name": "Podstawowe wiadomości",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  public static void main(String[] args) {\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eWiadomości wstępne\u003c/h1\u003e\n\u003ch2\u003eLiteratura\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003eKathy Sierra, Bert Bates, Head First Java. Edycja polska (Rusz głową!), Wydanie II. HELION\u003c/li\u003e\n  \u003cli\u003eKrzysztof Barteczko, Java Programowanie praktyczne od podstaw, PWN\u003c/li\u003e\n  \u003cli\u003eHerbert Schildt: „Java. Kompendium programisty”, Wydaw. Helion\u003c/li\u003e\n  \u003cli\u003eMarcin Lis: „Praktyczny kurs Java, Wydanie II”, Wydaw. HELION 2007\u003c/li\u003e\n  \u003cli\u003eCay Horstmann: „Java. Podstawy”, Wydanie X, HELION 2017,\u003c/li\u003e\n  \u003cli\u003eCay Horstmann: „Java. Techniki zaawansowane”, Wydanie X, HELION 2017\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eStrony\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href \u003d \"http://www.samouczekprogramisty.pl/kurs-programowania-java/\"\u003eSamouczek programisty\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href \u003d \"https://kobietydokodu.pl/kurs-javy/\"\u003eKobiety do kodu\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Pierwszy program",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  public static void main(String[] args){\n    System.out.println(\"Programowanie w Java\");\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    public static void main(String[] args){\n      System.out.println(\"Programowanie w Java\");\n    }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003ePierwszy program\u003c/H1\u003e\n\u003cp\u003ePierwszy program w języku Java wyświetla komunikat:\u003c/p\u003e\n\u003ccode\u003eclass FirstApp{\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e\u0026nbsp;\u0026nbsp;static public void main(String[] args) {\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"Programowanie w Java.\");\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e\u0026nbsp;\u0026nbsp;}\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e}\u003c/code\u003e\u003cbr\u003e\n\u003c/code\u003e\n\u003cH2\u003eKompilacja\u003c/H2\u003e\n\u003cp\u003e\n  Tekst programu musi znajdować się w pliku o nazwie klasy z rozszerzeniem \"java\",\n  czyli nasz program powinien być zapisany w pliku: \u003csamp\u003eFirstApp.java\u003c/samp\u003e\n\u003cp\u003e\n  Program można skompilować w trybie poleceń (menu \u003ccite\u003eStart→Programy→Akcesoria→Wiersz poleceń\u003c/cite\u003e):\n\u003c/p\u003e\n  \u003csamp\u003e\n    javac FirstApp.java\n  \u003c/samp\u003e\n  \u003cp\u003elub\u003c/p\u003e\n  \u003csamp\u003e\n    \"C:\\Program Files\\java\\jdk1.numer_wersji\\bin\\javac\" FirstApp.java\n  \u003c/samp\u003e\n  \u003cp\u003eW wyniku kompilacji powstaje plik \u003ccite\u003eFirstApp.class\u003c/cite\u003e\u003c/p\u003e\n\u003cH2\u003eUruchomienie\u003c/H2\u003e\n\u003cp\u003e\n  Wykonanie programu to wywołanie interpretera JWM, któremu należy wskazać wywoływaną klasę (uwaga na wielkość\n  znaków, nazwa musi być zgodny z nazwą klasy w pliku), nie podajemy rozszerzenia:\n  \u003cblockquote\u003e\n    java FirstApp\n  \u003c/blockquote\u003e\n\u003c/p\u003e\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Typy danych",
          "task_list": [
            {
              "name": "Wiadomości",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  public static void main(String[] args){\n    System.out.println(1_000_000_000);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003eTypy danych\u003c/H1\u003e\n\u003cp\u003e\nDla komputera wszystko jest liczbą, która jest zapisana w kodzie binarnym.  Popatrzmy na kilka przykładów:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Obraz to liczby zapisane w postaci tabeli, które oznaczają jakim kolorem wyświetlić dany punkt na obrazie.\n  \u003c/li\u003e\n  \u003cli\u003e\n      Tekst to ciąg liczb, którym przydzielono kolejne znaki alfabetu.\u003c/li\u003e\n  \u003cli\u003e\n    Dźwięk to ciąg liczb, których wartości są wychyleniem membrany głośnika w kolejnych chwilach czasu.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nTe same wartości liczbowe można przedstawiać w różnych systemach liczbowych np.\ndziesiętnym, dwójkowym, ósemkowym itd. Poniższe równanie wydaję się bezsensowne,\nale może być prawdziwe, jeśli są to cztery różne zapisy tej samej liczby dziesiętnej 15:\n\u003c/p\u003e\n\u003cp\u003e\n \u003csamp\u003e \u003cbr\u003e\n1111 \u003d 15 \u003d 17 \u003d 0F\u003cbr\u003e\n \u003c/samp\u003e\n\u003c/p\u003e\n\u003cp\u003e\nZapis dziesiętny (cyfry od 0 do 9):\n\u003csamp\u003e \u003cbr\u003e\n10\u003csup\u003e1\u003c/sup\u003e 10\u003csup\u003e0\u003c/sup\u003e \u003cbr\u003e\n1  \u0026nbsp;\u0026nbsp;5 \u003d 1*10 + 5*1 \u003d 15 \u003cbr\u003e\n\u003c/samp\u003e\n\u003c/p\u003e\n\u003cp\u003e\nZapis binarny, dwie cyfry (0 i 1):\n \u003csamp\u003e\u003cbr\u003e\n2\u003csup\u003e3\u003c/sup\u003e 4\u003csup\u003e2\u003c/sup\u003e 2\u003csup\u003e1\u003c/sup\u003e 2\u003csup\u003e0\u003c/sup\u003e \u003cbr\u003e\n1\u0026nbsp; 1\u0026nbsp; 1\u0026nbsp; 1 \u003d 1*8 + 1*4 + 1*2 + 1*1 \u003d 15\n \u003c/samp\u003e \u003cbr\u003e\n\u003c/p\u003e\n\u003cp\u003eZapis ósemkowy (cyfry od 0 do 7)\n\u003csamp\u003e \u003cbr\u003e\n8\u003csup\u003e1\u003c/sup\u003e 8\u003csup\u003e0\u003c/sup\u003e\u003cbr\u003e\n1 \u0026nbsp;7 \u003d 1*8 + 7*1 \u003d 15\n \u003c/samp\u003e\u003cbr\u003e\n\u003c/p\u003eZapis szesntastkowy (szestaście cyfr od 0 do F\u003d15)\n\u003csamp\u003e \u003cbr\u003e\n16\u003csup\u003e1\u003c/sup\u003e 16\u003csup\u003e0\u003c/sup\u003e\u003cbr\u003e\n0 \u0026nbsp;\u0026nbsp;F \u003d 0*16 + 15*1 \u003d 15\n\u003c/samp\u003e\u003cbr\u003e\n\u003c/p\u003e\n\u003c/p\u003e\n\u003cp\u003e\nLiczby także dzielimy na dodatnie, ujemne, całkowite, rzeczywiste, wymierne, niewymierne,\nułamki itd.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eTyp danych\u003c/strong\u003e określa rodzaj liczby (całkowita, rzeczywista), zakres jej wartośći, oraz sposób jej\ninterpretacji. Z zakresem wartości związana jest ilość miejsca w pamieci. Im typ ma większy zakres\n  tym więcej miejsca potrzeba na zapis liczby tego typu.\n\u003c/p\u003e\n\u003cp\u003e\n  Interpretacja oznacza rodzaj umowy, zgodnie z którą należy daną liczbę traktować. Więc nazwa typu będzie swoistym\n  kontraktem, umową. Jednocześnie, w każdej chwili możemy taki typ potraktować jak \"zwykłą\" liczbę,\n  zrywająć kontrakt. W ten sposób liczba może być w jednej chwili znakiem wyświetlanym na ekranie, potem\n  można ją \"zamienić\" na liczbę dziesiętną.\n\u003c/p\u003e\n\u003ch2\u003eRodzaje typów\u003c/h2\u003e\n\u003cp\u003e\n    W języku Java typy dzielimy na dwa podstawowe rodzaje:\n\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003etypy proste\u003c/li\u003e\n    \u003cli\u003etypy złożone\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTypy proste to wartości liczbowe, do których możemy się bezpośrednio odwoływać. Jednocześnie typy proste to takie,\n    które mają charakter jednostkowy, co oznacza, że w takim typie możemy przechowywać jedną\n    i tylko jedną wartość.\u003c/p\u003e\n\u003cp\u003e\n    Typy złożone, jak nazwa wskazuje, służą do przehowywania wielu, i to różnych typów, są więc rodzajem pojemnika\n    na różne typy proste i złożone.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Typy całkowite",
              "stepic_id": 0,
              "task_files": {
                "src/IntegerTypes.java": {
                  "name": "src/IntegerTypes.java",
                  "placeholders": [
                    {
                      "offset": 21,
                      "length": 11,
                      "hints": [],
                      "possible_answer": "",
                      "placeholder_text": "10_milionów"
                    },
                    {
                      "offset": 21,
                      "length": 12,
                      "hints": [],
                      "possible_answer": "",
                      "placeholder_text": "10_miliardów"
                    },
                    {
                      "offset": 21,
                      "length": 10,
                      "hints": [],
                      "possible_answer": "",
                      "placeholder_text": "2_binarnie"
                    },
                    {
                      "offset": 21,
                      "length": 10,
                      "hints": [],
                      "possible_answer": "",
                      "placeholder_text": "8_ósemkowo"
                    },
                    {
                      "offset": 21,
                      "length": 15,
                      "hints": [],
                      "possible_answer": "",
                      "placeholder_text": "16_szesnastkowo"
                    }
                  ],
                  "is_visible": true,
                  "text": "class IntegerTypes {\n16_szesnastkowo8_ósemkowo2_binarnie10_miliardów10_milionów\n  public static int getTenM(){\n    return 1;\n  }\n\n  public static long getTenB(){\n    return 1;\n  }\n\n  public static String getBinary(){\n    return \"liczba_binarna\";\n  }\n  public static String getOctal(){\n    return \"liczba_ósemkowa\";\n  }\n\n  public static String getHex(){\n    return \"liczba_szestastkowa\";\n  }\n\n  public static void main(String[] args){\n    System.out.println(getTenM());\n    System.out.println(getTenB());\n    System.out.println(getBinary());\n    System.out.println(getOctal());\n    System.out.println(getHex());\n    System.out.println(9.3e6);\n  }\n}"
                }
              },
              "test_files": {
                "test/IntegerTypesTest.java": "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class IntegerTypesTest {\n\n  @Test\n  public void testSolution() {\n    Assert.assertEquals(IntegerTypes.getTenM(), 10_000_000);\n    Assert.assertEquals(IntegerTypes.getTenB(), 10_000_000_000L);\n    Assert.assertEquals(Integer.parseInt(IntegerTypes.getBinary().substring(2), 2), 2);\n    Assert.assertEquals(Integer.parseInt(IntegerTypes.getOctal(), 8), 8);\n    Assert.assertEquals(Integer.parseInt(IntegerTypes.getHex().substring(2), 16), 16);\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTypy całkowite\u003c/h1\u003e\n\u003cp\u003e\n    Typy całkowite służą do przechowywania liczb całkowitych i należą do typów prostych. Do typów całkowityh należą:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003ebyte\u003c/code\u003e wartości od -128 do 127, zajmuje 1 bajt\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eshort\u003c/code\u003e wartości od -32768 do 32767, zajmuje 2 bajty\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eint\u003c/code\u003e wartość od ok. -2 10\u003csup\u003e9\u003c/sup\u003e do ok. 2 10\u003csup\u003e9\u003c/sup\u003e zajmuje 4 bajty\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003elong\u003c/code\u003e wartości od ok. -2 10\u003csup\u003e18\u003c/sup\u003e do ok. 2 10\u003csup\u003e18\u003c/sup\u003e zajmuje 8 bajtów\n    \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/p\u003e\n\u003ch2\u003eLiterały\u003c/h2\u003e\n\u003cp\u003eLiterał to napis reprezentujący bezpośrednio wartość. Liczby typu całkowitego  można zapisywać w kilku\nsystemach liczbowych:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        w kodzie dziesiętnym np. \u003ccode\u003e12, 234\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        w kodzie dwójkowym np. \u003ccode\u003e0b11001100\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        w kodzie ósemkowy np. \u003ccode\u003e 03, 010\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        w kodzie szesnastkowym np. \u003ccode\u003e0xF3B\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        zapis dziesiętny oznacza typ \u003ccode\u003eint\u003c/code\u003e np. \u003ccode\u003e100\u003c/code\u003e, to znaczy, że literał zajmuje 4 bajty i ma zakres typu int.\n    \u003c/li\u003e\n    \u003cli\u003e\n        zapis dziesiętny z przyrostkiem \u003ccode\u003el\u003c/code\u003e lub \u003ccode\u003eL\u003c/code\u003e oznacza typ \u003ccode\u003elong\u003c/code\u003e np. \u003ccode\u003e100L\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        zapis z separatorem (_) pozwala na grupowanie cyfr w długich literałach np. \u003ccode\u003e1_000\u003c/code\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eĆwiczenie 1\u003c/h2\u003e\nUzupełnij w pliku \u003csamp\u003eTask.java\u003c/samp\u003e kolejne funkcje \u003ccode\u003eprintln\u003c/code\u003e:\n\u003col\u003e\n    \u003cli\u003e\n        Wpisz liczbę 10 milionów w kodzie dziesiętnym w miejscu napisu \u003csamp\u003e10_milionów\u003c/samp\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n        Wpisz liczbę 10 miliardów w kodzie dziesiętnym w miejscu napisu \u003csamp\u003e10_miliardów\u003c/samp\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n        Wpisz liczbę 2 w kodzie binarnym w miejscu napisu \u003csamp\u003e2_binarnie\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        Wpisz liczbę 8 w kodzie ósemkowym w miejscu \u003csamp\u003e8_ósemkowo\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        Wpisz liczbę 16 w kodzie szestnastkowym w miejscu napisu \u003csamp\u003e16_szestnastkowo\u003c/samp\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\nW punktach 2\n\u003c/html\u003e\u003cbr\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eWykorzystaj znak _ do grupowania cyfr w dużych liczbach.\u003c/div\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eWykorzystaj typ long do tak dużej liczby.\u003c/div\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eZapis binarny zaczynamy ciągiem 0b. Liczba 4 binarnie to 0b100\u003c/div\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eZapis w kodzie ósemkowym zaczynamy od 0 np. 012 to liczba 10.\u003c/div\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eZapis szesnastkowy ropoczyna 0x np. 0x0A to 10\u003c/div\u003e\n\u003cbr\u003e\n",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Typy rzeczywiste",
              "stepic_id": 0,
              "task_files": {
                "src/RealTypes.java": {
                  "name": "src/RealTypes.java",
                  "placeholders": [
                    {
                      "offset": 63,
                      "length": 15,
                      "hints": [],
                      "possible_answer": "1",
                      "placeholder_text": "10 do potęgi 30"
                    },
                    {
                      "offset": 130,
                      "length": 21,
                      "hints": [],
                      "possible_answer": "1",
                      "placeholder_text": "0,1234 jako typ float"
                    }
                  ],
                  "is_visible": true,
                  "text": "class RealTypes {\n\n  public static double getBig(){\n    return 10 do potęgi 30;\n  }\n\n  public static float getSmall(){\n    return 0,1234 jako typ float;\n  }\n\n  public static void main(String[] args){\n    System.out.println(getBig());\n    System.out.println(getSmall());\n  }\n}"
                }
              },
              "test_files": {
                "test/RealTypesTest.java": "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class RealTypesTest {\n\n  @Test\n  public void testSolution() {\n    Assert.assertEquals(RealTypes.getBig(), 10e30, Math.ulp(10e30));\n    Assert.assertEquals(RealTypes.getSmall(), 0.1234f, Math.ulp(0.1234f));\n  }\n}"
              },
              "description_text": "\u003cp\u003e\n\u003ch1\u003eTypy rzeczywiste\u003c/h1\u003e\n\u003cp\u003eTypy rzeczywiste służa do przechowywania liczb rzeczywistych w zapisie dziesiętnym. Dostępne są dwa typy proste\n  do tego typu liczb:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003ccode\u003efloat\u003c/code\u003e, który ma zakres od ok. - 3,4 10\u003csup\u003e38\u003c/sup\u003e do 3,4 10\u003csup\u003e38\u003c/sup\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003ccode\u003edouble\u003c/code\u003e, który ma zakres od ok. - 1,7 10\u003csup\u003e308\u003c/sup\u003e do 1,7 10\u003csup\u003e308\u003c/sup\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n  \u003cp\u003e\n    Literały do zapisu liczb rzeczywistych tworzymy wg poniższych reguł:\n  \u003c/p\u003e\n    \u003cul\u003e\n    \u003cli\u003e\n      miejsce dziesiętne oznaczmay kropką np. \u003ccode\u003e2.45\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      duże liczby można zpaisywać w notacji naukowej np. \u003ccode\u003e 9.3e6 \u003d 9300000\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      domyślnie powyższe zapisy są traktowane jako liczby typu \u003ccode\u003edouble\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      literały z przyrostkiem \u003ccode\u003ef\u003c/code\u003e lub \u003ccode\u003eF\u003c/code\u003e oznaczają wartości typu \u003ccode\u003efloat\u003c/code\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/p\u003e\n\u003ch2\u003eĆwiczenie 1\u003c/h2\u003e\n\u003cul\u003e\n \u003cli\u003e\n   W miejscu napisu \u003csamp\u003e10 do potęgi 30\u003c/samp\u003e wpisz taką właśnie liczbę\n \u003c/li\u003e\n  \u003cli\u003e\n    W miejscu napisu \u003csamp\u003e0,1234\u003c/samp\u003e wpisz taką wartość typu \u003ccode\u003efloat\u003c/code\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/html\u003e\u003cbr\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eWykorzystaj zapis naukowy.\u003c/div\u003e\n\u003cdiv class\u003d\u0027hint\u0027\u003eStosuj przyrostek do oznaczania typu float.\u003c/div\u003e\n\u003cbr\u003e\n",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Typ znakowy",
              "stepic_id": 0,
              "task_files": {
                "src/CharType.java": {
                  "name": "src/CharType.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class CharType {\n  static public void main(String[] args){\n    //Ćwiczenie 1\n    System.out.println(\u0027 \u0027);\n    //Ćwiczenie 2\n    System.out.print(\u0027 \u0027);\n    System.out.print(\u0027 \u0027);\n    System.out.print(\u0027 \u0027);\n    System.out.print(\u0027 \u0027);\n    System.out.print(\u0027 \u0027);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTyp znakowy\u003c/h1\u003e\n\u003cp\u003e\n  Do przechowywania znaków alfanumerycznych w Unicode służy typ char. Zajmuje on 2 bajty i przyjmuje wartości\nod 0 do 65535. Literały tego typu tworzymy poprzez:\n  \u003cul\u003e\n  \u003cli\u003e\n    pojedyncze znaki w apostrofach np. \u0027a\u0027, \u0027C\u0027, \u0027\u003c\u0027\n  \u003c/li\u003e\n  \u003cli\u003e\n    znaki specjalne w apostrofach:\n    \u003cul\u003e\n      \u003cli\u003e\n        \u0027\\n’ - nowy wiersz\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\t\u0027 - tabulator\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\r\u0027 - powrót karetki\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\b\u0027 - backspace\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\f\u0027 - wysunięcie\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\\\\u0027 - znak ukośnika \\\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\\u0027\u0027 - znak apostrofu \u0027\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u0027\\\"\u0027 - znak podwójnego apostrofu \"\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    kod szesnastkowy Unicode w apostrofach np. ‘\\u006E’ (litera n)\n    (Uwaga! w taki sposób nie wolno podawać znaków CR i LF, zamiast tego podajemy ‘\\n’, ‘\\r’)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n\u003ch2\u003eĆwiczenie 1\u003c/h2\u003e\n\u003cp\u003e\n    Korzystając z aplikacji Tablica znaków (Akcesoria) odszukaj znak  greckiej litery alfa i wyświetl go\n    korzystając z jego unikodu.\n\u003c/p\u003e\n\u003ch2\u003eĆwiczenie 2\u003c/h2\u003e\n\u003cp\u003e\nKorzystając tylko z wywołania \u003ccode\u003eSystem.out.print()\u003c/code\u003e wyświetl poniższy obrazek:\u003cbr\u003e\n    /\\\u003cbr\u003e\n    \\/\u003cbr\u003e\n\u003c/p\u003e\n\u003ch2\u003eUwaga\u003c/h2\u003e\nWykonane ćwiczenia samodzielnie oceniamy. Nie naciskamy przycisku Check.\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Typ logiczny",
              "stepic_id": 0,
              "task_files": {
                "src/BooleanType.java": {
                  "name": "src/BooleanType.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class BooleanType {\n  static public void main(String[] args){\n    System.out.println(true);\n    System.out.println(false);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTyp logiczny\u003c/h1\u003e\nTyp logiczny \u003ccode\u003eboolean\u003c/code\u003e służy do przechowywania tylko dwóch wartości reprezentowanych przez dwa słowa kluczowe: \u003ccode\u003etrue\u003c/code\u003e i\n\u003ccode\u003efalse\u003c/code\u003e. Typ ten zajmuje 1 bajt.\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zmienne",
              "stepic_id": 0,
              "task_files": {
                "src/Variables.java": {
                  "name": "src/Variables.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Variables{\n\n  static public void main(String[] args){\n    int   n     \u003d 10;\n    float kwota \u003d 12.89f;\n    char  znak  \u003d \u0027A\u0027;\n    System.out.println(n);\n    System.out.println(kwota);\n    System.out.println(znak);\n    System.out.println(stan);\n    boolean stan \u003d true;\n    {\n      int a \u003d 5;\n    }\n    System.out.println(a);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003c\u003e\n\u003ch1\u003eZmienne\u003c/h1\u003e\n\u003cp\u003e\nNie ma programu bez zmiennych. Zmienną można porównać do pojemnika, w którym można coś przechować.\nMożna pojemnik całkowicie zapełnić, można trzymać pusty lub wypełnić w części.\nMogą być pojemniki, w których można trzymać różne towary np. mąkę, cukier, mleko,\nsą takie w których można trzymać tylko jeden rodzaj zawartości np. tylko płyny.\n\u003c/p\u003e\n\u003cp\u003e\nW programie zmienną jest wydzielony obszar pamięci, w której można zapisać dowolną wartość, pod warunkiem,\n    że ta wartość jest zgodna z typem zmiennej. Zmienna ma swoją nazwę – identyfikator,\n    który musi być zbudowany zgodnie z pewnymi regułami:\n    \u003cul\u003e\n    \u003cli\u003e\n        nazwa zmiennej nie może być identyczna ze słowem kluczowym języka JAVA czyli: \u003cbr\u003e\n        \u003ccode\u003e\n            abstract default if package synchronized assert do implements private\n            this boolean double import protected throw break else instanceof public\n            throws byte extends int return transient case false interface short true\n            catch final long static try char finally native\n            strictfp void class float new super volatile const for null switch while continue goto\n        \u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        nie może zaczynać się od znaku cyfry,\n    \u003c/li\u003e\n    \u003cli\u003e\n        może zawierać znaki alfabetu a-z i A-Z, cyfry 0-9, znak podkreślenia _ i znak dolara $,\n    \u003c/li\u003e\n    \u003cli\u003e\n        rozróżniane są wielkie i małe litery.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\nPrzykładowe poprawne nazyw zmiennych: \u003cbr\u003e\n    \u003cul\u003e\n    \u003cli\u003e\u003csamp\u003eliczba\u003c/samp\u003e\u003c/li\u003e\n    \u003cli\u003e\u003csamp\u003eliczba_01\u003c/samp\u003e\u003c/li\u003e\n    \u003cli\u003e\u003csamp\u003eliczba$\u003c/samp\u003e\u003c/li\u003e\n    \u003cli\u003e\u003csamp\u003eLiczba\u003c/samp\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Niepoprawnymi nazwami zmiennych są:\n    \u003cul\u003e\n    \u003cli\u003e\u003csamp\u003e0liczba\u003c/samp\u003e - zaczyna się od cyfry\u003c/li\u003e\n    \u003cli\u003e\u003csamp\u003e@iczba\u003c/samp\u003e - zawiera niedozwolony znak @\u003c/li\u003e\n    \u003cli\u003e\u003csamp\u003ećma\u003c/samp\u003e- zawiera polski znak diakrytyczny\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003ch2\u003eDeklarowanie zmiennych\u003c/h2\u003e\n\u003cp\u003e\n    Deklaracja zmiennej to inaczej wprowadzenie nazwy zmiennej w programie, a także związanie jej z typem.\n    Po zadeklarowaniu nasza zmienna będzie zajmowała odpowiedni obszar pamięci, której zawartość\n    będzie interpretowana zgodnie z jej typem. Po zadeklarowaniu można zmiennej przypisać dowolną\n    wartość zgodną z typem i można te operację dowolnie powtarzać.\n    Na razie zmienne będziemy deklarować wg schematu:\u003c/p\u003e\n\u003cp\u003e\n\u003csamp\u003e\n    typ_danych nazwa_zmiennej;\u003cbr\u003e\n\u003c/samp\u003e\n\u003c/p\u003e\n    np.\n\u003cp\u003e\n    \u003ccode\u003echar znak; \u003c/code\u003e \u003cbr\u003e\n    \u003ccode\u003eint kwota;\u003c/code\u003e \u003cbr\u003e\n    \u003ccode\u003efloat temperatura;\u003c/code\u003e \u003cbr\u003e\n    \u003ccode\u003eboolean isValid;\u003c/code\u003e \u003cbr\u003e\n\u003c/p\u003e\n    \u003cp\u003e\n    Można połączyć deklarację z nadaniem zmiennej wartości początkowej tzw. inicjalizacją.\n        Korzystamy wtedy z poznanych literałów i znaku równości \u003d:\u003c/p\u003e\n\n\u003ccode\u003echar znak \u003d ’a’;\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint kwota \u003d 100; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003efloat temperatura \u003d 36.8f; \u003c/code\u003e \u003cbr\u003e\n\u003ccode\u003eboolean isValid \u003d false;\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\n    Wartości umieszczone po znaku równości to poznane wześniej literały. Należy pamiętać, aby stosować literały\n    typu zgodnego z typem zmiennej.\n\u003c/p\u003e\n\u003cp\u003e\n    Deklaracje zmiennych można umieszczać w dowolnym miejscu bloku programu, trzeba jednak pamiętać, że:\n    \u003cul\u003e\n    \u003cli\u003ezmienna istnieje tylko dla kodu programu położonego za miejscem jej deklaracji,\n        czyli najpierw deklarujemy potem używamy,\u003c/li\u003e\n\n    \u003cli\u003ezmienna jest widoczna tylko w bloku jej deklaracji, czyli można ją odczytać lub zmienić\n        tam, gdzie jest zadeklarowana,\n    \u003c/li\u003e\n    \u003cli\u003e\n    gdy kod naszego programu opuszcza blok to zmienna przestaje istnieć.\n    \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003c/code\u003e\n\u003ch3\u003ePrzykłady\u003c/h3\u003e\n\u003cp\u003eNiepoprawna kolejność, nie można odwoływać się do zmiennej przed jej deklaracją: \u003c/p\u003e\n\u003ccode\u003eSystem.out.println(liczba);\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint liczba \u003d 10;\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003eZmienna zadeklarowana w bloku po jego opuszczeniu przestaje istnieć, więc nie wolno do niej się odwoływać poza nim\n\u003c/p\u003e\n\u003ccode\u003e{\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint liczba \u003d 10;\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e}\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eSystem.out.println(liczba);\u003c/code\u003e\u003cbr\u003e\n\u003ch2\u003eĆwiczenie 1\u003c/h2\u003e\n\u003cP\u003eZmień kolejność dwóch wierszy kodu w Variables.java, aby program się skompilował.\u003c/P\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Operatory i wyrażenia",
          "task_list": [
            {
              "name": "Wiadomości",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eWiadomości wstępne\u003c/h1\u003e\n\u003cp\u003eWyrażenie to ciąg operatorów i wartości, które zwracają także wartość. Operatorami są symbole operacji\n  np. arytmetycznych jak dodawanie \u0027+\u0027, a wartościami moga być liczby, które dodajemy.\u003c/p\u003e\n\u003ccode\u003e2 + 3\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e2 + a\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e2 + funkcja()\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003eWartościami w wyrażeniach moga być zmienne, literały, inne wyrażenia czy funkcje (które poznanmy później), czyli wszystkie\n  te elementy języka, które reprezentują wartości zgodnych typów. Oznacza to, że dodawać możemy tylko wartości liczbowe,\nale nie można do liczby dodać typu boolean. Łączyć możemy łańcuchy z wartościami liczbowymi, ale nie możemy\nmnożyć łańcuchów.\u003c/p\u003e\n\u003cp\u003eWartości w wyrażeniach nazywane są operandami. Liczba wymaganych operandów określa rodzaj operatora, stąd mamy\n  operatory:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    unarne\n  \u003c/li\u003e\n  \u003cli\u003e\n    binarne\n  \u003c/li\u003e\n  \u003cli\u003e\n    ternarne\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNajwięcej jest operatorów binarnych, czyli takich które wymagają dwóch operandów,\n  ale są także operatory unarne (z jednym operandem) i ternarne (z trzema operandami).\u003c/p\u003e\n\u003cp\u003e\n  Umiejscowienie operatora względem operandów decyduje o jego rodzaju, stąd rozróźnia się:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eprefiksowe - gdy operator występuje przed operandem np. +5\u003c/li\u003e\n  \u003cli\u003einfiksowe - gdy operator znajduje się miedzy operandami np. 2+4\u003c/li\u003e\n  \u003cli\u003epostfiksowe - gdy operator znajduje się za operandem np. i++\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOperatory posiadają priorytet, który określa w jakiej kolejności są wykonywane działania w wyrażeniu.\nJeśli operator * ma wyższy priorytet od + to w wyrażeniu \u003csamp\u003e 2*4+5\u003c/samp\u003e wykonane zostanie najpierw\n  działanie \u003csamp\u003e 2*4\u003c/samp\u003e, a potem dodawanie \u003csamp\u003e(2*4)+5.\u003c/samp\u003e\u003c/p\u003e\n\u003cp\u003e\n  Operatory określone mają także wiązanie, czyli kolejność jego operandów. Dzięki\n  wiązaniu można jednoznacznie zinterpretować wyrażenie w sytuacji, gdy występują operatory o\n  takim samym priorytecie np. w wyrażeniu \u003csamp\u003e2+5-4\u003c/samp\u003e przy lewostronnym wiązaniu wyrażenie zostanie zinterpretowane\n  jako \u003csamp\u003e(2+5)-4\u003c/samp\u003e. Dla wiązania prawostronnego otrzymalibyśmy \u003csamp\u003e2+(5-4)\u003c/samp\u003e\u003c/p\u003e\n\u003cp\u003eDo grupowamia wyrażeń i jawnego określania priorytetu możemy stosować nawiasy okrągłe \u003csamp\u003e()\u003c/samp\u003e.\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Operatory arytmetyczne",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eOperatory arytmetyczne\u003c/h1\u003e\n\u003cH2\u003eOperatory binarne\u003c/H2\u003e\nSą to głównie operatory powszechnie znane, realizujące podstawowe operacje takie jak:\n\u003cul\u003e\n \u003cli\u003e\n     dodawanie liczb i łańcuchów: \u003csamp\u003e+\u003c/samp\u003e\n \u003c/li\u003e\n  \u003cli\u003e\n    odejmowanie liczb: \u003csamp\u003e-\u003c/samp\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n      mnożenie liczb: \u003csamp\u003e*\u003c/samp\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n      dzielenie liczb: \u003csamp\u003e/\u003c/samp\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePriorytet dzielenia i mnożenia jest wyższy od dodawania i odejmowania. Wszystkie mają wiązanie lewostronne.\u003c/p\u003e\n\u003cp\u003eOperator dzielenia zwraca typ wyniku zgodny z typem operandów np. \u003csamp\u003e 10/3\u003c/samp\u003e zwróci wartość \u003csamp\u003e3\u003c/samp\u003e, bo\n    oba operandy są typu całkowitego więc i wynik jest całkowity. Jest to dzielenie całkowite. Dla \u003csamp\u003e 10/3.0\u003c/samp\u003e wynikiem będzie \u003csamp\u003e3.33333\u003c/samp\u003e,\nbo jeden z operandów jest typu zmiennoprzecinkowego.\u003c/p\u003e\n\n\u003cp\u003e Z dzieleniem całkowitym związany jest operator modulo \u003csamp\u003e%\u003c/samp\u003e, którego zadaniem jest wyznaczenie reszty\n    z dzielenia całkowitego. Wyrażenie \u003csamp\u003e10%3\u003c/samp\u003e zwróci wartość 1, gdyż w wyniku dzielenia 10/3 otrzymamy 3 i 1\n    reszty. \u003c/p\u003e\n\u003ch2\u003eInkrementacja i dekrementacja\u003c/h2\u003e\n\u003cp\u003eSą dwa operatory unarne występujce w dwóch formach:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        inkrementacja prefiksowa - zwiększenie o 1 \u003csamp\u003e++a\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        inkrementacj postfiksowa - zwiększenie o 1 \u003csamp\u003ea++\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        dekrementacja prefiskowa - zmniejszenie o 1 \u003csamp\u003e--a\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        dekrementacja postfiksowa - zmniejszenie o 1 \u003csamp\u003ea--\u003c/samp\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOperandem moży być wyłącznie tzw. modyfikowalna l-wartość, co oznacza, że może to być wyłącznie zmienna typu\n    prostego liczbowego np.\n\u003c/p\u003e\n\u003ccode\u003e int a \u003d 10;\u003c/code\u003e \u003cbr\u003e\n\u003ccode\u003e a++; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e System.out.println(a);\u003c/code\u003e \u003cbr\u003e\u003cbr\u003e\n\u003csamp\u003e-11\u003c/samp\u003e\n\n\u003cp\u003eRóżnica miedzy postacią post- i prefiksową polega na wykonaniu modyfikacji operandu. W przypadku\n    postaci prefiksowej modyfikacja jest wykonywana jako pierwsza np:\u003c/p\u003e\n\u003ccode\u003eint a \u003d 10;\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint b \u003d ++a + 5; \u003c/code\u003e\u003cbr\u003e\n\u003cp\u003ezmienna \u003ccode\u003eb\u003c/code\u003e będzie miała wartość 16, gdyż przed wykonaniem przypisania wartości nastąpi zwiększenie\n    \u003ccode\u003ea\u003c/code\u003e o 1, a dopiero potem obliczenia wyrażenia \u003ccode\u003ea + 5\u003c/code\u003e, czyli 11+5 \u003d 16\u003c/p\u003e\n\u003cp\u003ePostać postfiksowa powoduje modyfikację zmiennej na samym końcu opracowania wyrażenia np.:\u003c/p\u003e\n\u003ccode\u003eint a \u003d 10;\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint b \u003d a-- + 5; \u003c/code\u003e\u003cbr\u003e\n\u003cp\u003ezmienna \u003ccode\u003eb\u003c/code\u003e będzie miała wartość 15, gdyż najpierw zostanie obliczone wyrażenie \u003ccode\u003ea + 5\u003c/code\u003e\n    i przypisana wartość do zmiennej \u003ccode\u003eb\u003c/code\u003e, a na końcu zmienna \u003ccode\u003ea\u003c/code\u003e zmniejszona o 1.\u003c/p\u003e\n\n\n",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Operatory przypisania",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eOperatory przypisania\u003c/h1\u003e\n\u003cp\u003ePodstawowym operatorem przypisania jest poznany już symbol równości \u003csamp\u003e\u003d\u003c/samp\u003e. Służy do\n  przeniesienia wartości operandu z prawej strony znaku \u003ccode\u003e\u003d\u003c/code\u003e do operandu po lewej. Z tego też względu lewy operand musi\n  być modyfikowalną l-wartością, czyli zmienną.\u003c/p\u003e\n\u003ccode\u003eint a \u003d 10;\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ea \u003d a + 5 * a\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e Zmienna \u003ccode\u003ea\u003c/code\u003e po przypisaniu będzie miała wartość 60.\u003c/p\u003e\n\u003cp\u003ePowyższy przykład ilustruje dość często występującą modyfikację zmiennej o wartość wyrażenia z jej udziałem.\nKrótszy zapis takiej modyfikacji można uzyskać stosując operatory przypisania połączone z operatorami arytmetycznymi:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ea +\u003d b\u003c/code\u003e, który odpowiada zapisowi \u003ccode\u003ea \u003d a + b\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ea -\u003d b\u003c/code\u003e, który odpowiada zapisowi \u003ccode\u003ea \u003d a - b\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ea *\u003d b\u003c/code\u003e, który odpowiada zapisowi \u003ccode\u003ea \u003d a * b\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ea /\u003d b\u003c/code\u003e, który odpowiada zapisowi \u003ccode\u003ea \u003d a / b\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ea %\u003d b\u003c/code\u003e, który odpowiada zapisowi \u003ccode\u003ea \u003d a % b\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Operatory logiczne i relacji",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eOperatory logiczne i relacji\u003c/h1\u003e\n\u003cp\u003eOperatory te służą do tworzenia wyrażeń zwracających wartość logiczną. Do \u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Podstawy programowania obiektowego",
          "task_list": [
            {
              "name": "Klasa",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003eKlasa\u003c/H1\u003e\n\u003cp\u003e\nKlasa jest podstawowym i jedynym typem złożonym w Java. Określenie złożony dotyczy sytuacji, gdy zmienna\npozwala na przechowywanie wielu wartości różnych typów, zarówno prostych i złożonych.\nKlasa to także jedyne miejsce, w którym można umieszczać kod wykonywalny, więc każda instrukcja\nmusi być umieszczona w jakiejś klasie.\u003c/p\u003e\n\u003cp\u003e\nZ pojęciem klasy wiąże się także inne określenie - obiekt. Związek między klasą a obiektem jest taki jak między\n  planem budowy a budynkiem, schematem elektrycznym a komputerem itd. Klasa jest opisem budowy,\n  schematem konstrukcji i specyfikacją zachowań wszystkich obiektów, które będą tworzone na podstawie klasy.\n\u003c/p\u003e\n\u003cp\u003e\nObiekt to konkretny przedstawiciel rodziny obiektów, które mają wspólny opis w postaci klasy. Zatem klasa\nbędzie opisywać jakie cechy (np. kolor, długość) i zachowania (otwórz, zamknij, wyślij itd.) będą miały\nobiekty a obiekt posiada zestaw indywidualnych wartości tych cech (kolor: zielony, długość: 10).\n\u003c/p\u003e\n\u003cp\u003e\nDefinicja klasy zaczyna się od słowa kluczowego \u003ccode\u003eclass\u003c/code\u003e, po którym podajemy nazwę klasy:\n\u003c/p\u003e\n\u003cpre\u003e\u003csamp\u003e\n  class nazwa-klasy{\n    lista-definicji-pól\n    lista-definicji-metod\n  }\u003c/samp\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nW nawiasach klamrowych umieszcza się dwie listy: lista definicji (można też deklaracje) pól,\n  czyli zmiennych, które będą jakoś opisywać cechy obiektów, oraz lista definicji funkcji,\n  które nazywane są metodami, opisujących zachowania obiektów. Listy te nie muszą występować w\n  takiej kolejności, można przeplatać jedną listę z drugą np. pole 1, metoda2, pole3, metoda4 itd.\n  Jednak ze względu na czytelność jest powszechnie przyjęte stosowanie takiej kolejności i wydzielanie\n  osobno pól i metod.\n\u003c/p\u003e\n\u003cp\u003e\nKażda klasa jest definiowana w osobnym pliku, który musi mieć nazwę identyczną z nazwą klasy.\n  Rozszerzeniem plików źródłowych Javy jest \u003csamp\u003e.java\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Pola",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePOLA\u003c/h1\u003e\n\u003cp\u003e\nZacznijmy od prostej klasy zawierającej tylko pola. Pole często jest także utożsamiane z atrybutem lub stanem.\n  Atrybut to jakaś dana charakteryzująca obiekt, gdy stan to zazwyczaj zmienna informująca o kondycji obiektu,\n  co często przekłada się na jego zachowanie. \u003c/p\u003e\n\u003cp\u003eTypowy przykład klasy, która jest wymagana w większości aplikacji czyli osoba, użytkownik, klient,\n  konsument itp.: \u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  class Person{\n    String firstName;\n    String lastName;\n    String education;\n    String address;\n    int height;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Utworzenie obiektu typu Person polega na zastosowaniu wspomnianego wcześniej operatora \u003csamp\u003enew\u003c/samp\u003e: \u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  Person user \u003d new Person();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nObiekt został utworzony jako zmienna user typu \u003csamp\u003ePerson\u003c/samp\u003e, czyli dokładnie wg poznanego już schematu\n  deklaracji zmiennych typów prostych. Jednocześnie została ta zmienna zainicjowana wartością czyli został\n  przydzielony obszar pamięci na wszystkie pola. Wartości tych pól, czyli \u003csamp\u003efirstName, lastName \u003c/samp\u003eitd.\n  będą równe \u003csamp\u003enull\u003c/samp\u003e lub 0. Obiekty nazywane są także instancjami klasy.\u003c/p\u003e\n\u003cp\u003e\n  Odwołanie się do pól obiektu odbywa się przez operator dostępu w postaci kropki: \u003c/p\u003e\n  \u003cpre\u003e\u003ccode\u003e\n  user.firstName \u003d ”Adam”;\n  user.height \u003d 175;\n  System.out.prinln(“imię” + user.firstName);\n  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nSiła obiektów polega na zgromadzeniu wszystkich powiązanych ze sobą, a jednocześnie różnorodnych, informacji\n  w jednym miejscu.\n  W ten sposób nie można pomylić np. wzrostu Kowalskiego ze wzrostem Nowaka\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Metody",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003cbr\u003e\n\u003ch1\u003eFUNKCJA\u003c/h1\u003e\n\u003cp\u003e\nObiekt może posiadać także zbiór zachowań, które są metodami klasy. W przeciwieństwie do pól, wszystkie metody\n  danej klasy są wspólne dla obiektów.\u003c/p\u003e\n\u003cp\u003e\nCzym jest metoda? Metoda to szczególny rodzaj funkcji, czyli podprogramu. Podprogram, jak nazwa sugeruje to jakiś\n  fragment kodu programu, który często się powtarza. Porównując program do książki, podprogramem może być ciągle\n  powtarzający się cytat z innej książki. Jeśli za każdym razem w treści książki występowałaby treść takiego cytatu,\n  to objętość książki by rosła. Dodatkowo podczas składu książki istniałaby możliwość, że przy kolejnym cytowaniu\n  może wystąpić pomyłka. Zamiast tego można umieścić tylko odnośnik informujący, gdzie ten cytat został przytoczony\n  pierwszy raz. Wtedy każde wystąpienia takiego odnośnika byłoby wywołaniem podprogramu, numer strony z cytatem\n  byłby adresem podprogramu w pamięci.\u003c/p\u003e\n\u003cp\u003e\nWróćmy teraz do pojęcia funkcji, która jest szczególnym podprogramem. Po pierwsze może posiadać tzw.\n  argumenty oraz może zwracać wartość, podobnie jak znane funkcje matematyczne. Argumentami i wartością\n  zwracaną mogą być poznane dotąd typy, w tym także klasy.\u003c/p\u003e\n\u003cp\u003e\n  Na razie będziemy definiować funkcje (metody) zgodnie ze schematem:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  typ-zwracany nazwa-funkcji(lista-parametrów){\n    lista-deklaracji-zmiennych-lokalnych\n    lista-instrukcji\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nTutaj także kolejność obu list jest dowolna, przeplatanie definicji zmiennych z instrukcjami jest możliwe.\n  Dodatkowo wskazane jest deklarowanie zmiennych lokalnych tuż przed miejscem ich wykorzystania, w podblokach,\n  które ograniczają zasięg. Grupowanie zmiennych i instrukcji w funkcji nie ma znaczenia, ważne\n  aby kod był czytelny, spójny i zwięzły.\u003c/p\u003e\n\u003cp\u003e\nLista parametrów nie jest obowiązkowa. Jeśli występuje to lista ma postać deklaracji parametrów: \u003c/p\u003e\n\u003cpre\u003e\n\u003csamp\u003e\n  typ nazwa-parametru-1, typ nazwa-parametru-2, …\n\u003c/samp\u003e\u003c/pre\u003e\n\u003cp\u003e\nNależy też odróżniać termin parametr od argumentu. Parametr to zmienna, której używamy podczas definiowania funkcji,\n  gdy piszemy jej ciało. Argument to wartość przekazywana podczas wywołania funkcji. \u003c/p\u003e\n\u003ch1\u003eRETURN\u003c/h1\u003e\n\u003cp\u003e\nZ funkcją związany jest trzeci rodzaj skoku bezwarunkowego czyli instrukcja return. Dodatkowo instrukcja\n  ta może posiadać argument, który jest wartością zwracaną przez funkcję. Popatrzmy na prostą funkcję\n  dodającą dwie liczby:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  int add(int a, int b) {\n    return a + b;\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\n  \u003cp\u003e\nFunkcja jest zdefiniowana dla dwóch parametrów typu całkowitego (a, b) i zwraca liczbę całkowitą.\n    Zgodnie z nazwą powinna zwrócić sumę obu argumentów dlatego mamy wyrażenie a+b poprzedzone instrukcją return,\n    która zwróci sumę.\n  \u003ch1\u003eVOID\u003c/h1\u003e\n  \u003cp\u003e\nJeśli nie chcemy wartości zwracanej przez funkcję to wtedy można zastosować typ void, który sygnalizuje\n    ignorowanie wartości funkcji. Przykładem będzie funkcja wyświetlająca elementy tablicy: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  void printArray(int[] arr){\n    for(int item: arr) {\n      System.out.prinln(item);\n    }\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n  \u003cp\u003e\n    Brak instrukcji \u003csamp\u003ereturn\u003c/samp\u003e nie jest wymogiem dla funkcji, która nie zwraca wartości.\n    W takich funkcjach też można jej używać, ale bez argumentu. Poniższy przykład to modyfikacja poprzedniej\n    funkcji, która nie wyświetla tabeli jeśli jej rozmiar jest zbyt duży:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void printArray(int[] arr){\n    if (array.length \u003e 100)\n      return;\n    for(int item: arr) {\n      System.out.prinln(item);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  W instrukcji \u003csamp\u003eif\u003c/samp\u003e znajduje się wywołanie \u003csamp\u003ereturn\u003c/samp\u003e, które spowoduje skok na koniec\n  funkcji i tym samym pominięcie całej pętli. Ponieważ nie ma argumentu nie zwróci wartości.\u003c/p\u003e\n\u003ch1\u003eMETODY I THIS\u003c/h1\u003e\n\u003cp\u003e\nMetoda to funkcja, która opisuje zachowanie danego obiektu. Dobrze zdefiniowana metoda powinna operować wyłącznie\n  na polach obiektu i swoich argumentach. Nie musi zawsze zwracać wartości i wtedy będzie zachowywać się jak procedura\n  z innych języków programowania. W języku Java można definiować wyłącznie funkcje, które są metodami jakiejś klasy.\u003c/p\u003e\n\u003cp\u003e\nPierwszym przykładem będzie zdefiniowanie tzw. getterów i setterów. Choć obecnie są głosy, że settery i gettery\n  są zbędne, to jest to technika nadal stosowana. Nazwa getter wzięła się od polecenia get czyli pobierz\n  a setter od set - ustaw. Ich zadaniem jest ustawianie i pobieranie wartości pól. \u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  class Person{\n    String firstName;\n    String lastName;\n    String education;\n    String address;\n    int height;\n\n    String getFirstName(){\n      return this.firstName;\n    }\n\n    void setFirstName(String firstName){\n      this.firstName \u003d firstName;\n    }\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Pierwsza metoda nie posiada parametrów. Wykonuje tylko jedną czynność zwraca pole \u003csamp\u003efirstName\u003c/samp\u003e rozkazem\n  \u003csamp\u003ereturn\u003c/samp\u003e.\n  Zmienna \u003csamp\u003ethis\u003c/samp\u003e jest słowem kluczowym, które wskazuje na instancję klasy. Jest to trochę mylące,\n  bo definiujemy klasę,\n  jednak należy pamiętać, że metody są dzielone między wszystkie obiekty tej samej klasy. Definiując więc klasę musimy\n  sobie wyobrażać, jak ta funkcja będzie się wykonywać “na obiekcie”. Zmienna \u003csamp\u003ethis\u003c/samp\u003e jest takim właśnie\n  referencją na konkretny obiekt, który wywołuje metodę. Inaczej mówiąc, gdy wywołamy metodę \u003csamp\u003egetFirstName\u003c/samp\u003e\n  dla obiektu \u003csamp\u003euser\u003c/samp\u003e,\n  którego wartość pola \u003csamp\u003efirstName\u003c/samp\u003e jest ”KOWALSKI” to \u003csamp\u003ethis.firstName\u003c/samp\u003e jest polem tego\n  konkretnego obiektu i tam będzie nazwisko „KOWALSKI”. Co prawda bez słowa \u003csamp\u003ethis\u003c/samp\u003e funkcja działała by poprawnie,\n  gdyż referencja \u003csamp\u003ethis\u003c/samp\u003e\n  jest stosowana domyślnie, to dobrze jest ją umieszczać jawnie.\u003c/p\u003e\n\u003cp\u003e\nDruga metoda posiada jeden parametr, którym jest łańcuch. W ciele metody mamy tylko przypisanie do pola \u003csamp\u003e\n  this.firstName\u003c/samp\u003e parametru \u003csamp\u003efirstName\u003c/samp\u003e. Tutaj słowo \u003csamp\u003ethis\u003c/samp\u003e jest konieczne\n  gdyż pomijając go otrzymalibyśmy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void setFirstName(String firstName){\n    firstName \u003d firstName;\n  }\n  …\u003c/code\u003e\n  \u003c/pre\u003e\n\u003cp\u003e\nW tej sytuacji kompilator przyjąłby nazwę \u003csamp\u003efirstName\u003c/samp\u003e, która jest najbliżej zdefiniowana czyli parametr\n  wywołania. Pole \u003csamp\u003efirstName\u003c/samp\u003e klasy nie zostałoby przypisane wartością parametru i nadal byłoby\n  równe \u003csamp\u003enull\u003c/samp\u003e. Możemy się o tym przekonać wywołując metodę: \u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  Person user \u003d new Person();\n  user.setFirstName(”KOWALSKI”); //wywołanie settera z argumentem\n  System.out.prinln(user.getFirstName()); //wywołanie gettera bezargumentowego\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nDostęp do metody obiektu odbywa się tak samo jak do pól - poprzez kropkę. Wywołanie funkcji to podanie\n  jej nazwy z parą nawiasów okrągłych na końcu. Nawiasy są operatorem wywołania metody (funkcji).\n  Jeśli metoda wymaga podania argumentów to należy je podać w nawiasach, w tej samej kolejności jak\n  przy definicji.\u003c/p\u003e\n\u003cp\u003e\n  Wracając do ostatniej wersji settera to instrukcja\u003c/p\u003e\n\u003ccode\u003eSystem.out.println(user.getFirstName()) \u003c/code\u003e\u003cbr\u003e\n\u003cp\u003ewyświetli\n  \u003csamp\u003enull\u003c/samp\u003e,\n  gdyż pominęliśmy słowo \u003csamp\u003ethis\u003c/samp\u003e i po obu stronach przypisania mamy ten sam parametr\n  \u003csamp\u003efirstName\u003c/samp\u003e.\n  Więc argument wywołania przypisany zostanie do siebie samego, a nie do pola \u003csamp\u003efirstName\u003c/samp\u003e obiektu\n  \u003csamp\u003euser\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nUniknęlibyśmy takiej sytuacji, gdybyśmy inaczej nazwali parametr settera:\u003c/p\u003e\n\u003cpre\u003e  \u003ccode\u003e\n  function setFirstName(String fName){\n    firstName \u003d fName;\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 1",
              "stepic_id": 0,
              "task_files": {
                "src/Book.java": {
                  "name": "src/Book.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": ""
                }
              },
              "test_files": {
                "test/TestBook.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestBook{\n\n  @Test\n  public void testSolution() {\n    Book b \u003d new Book();\n    assertEquals(\"Niepoprawne pole\", null, b.author);\n    assertEquals(\"Niepoprawne pole\", null, b.title);\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\nW pliku Book.java zdefiniuj klasę Book, która posiada dwa pola: author i title.\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 2",
              "stepic_id": 0,
              "task_files": {
                "src/Car.java": {
                  "name": "src/Car.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Car{\n  int power;\n  String id;\n\n  public String toString(){\n    return id +\" \"+power;\n  }\n}"
                }
              },
              "test_files": {
                "test/TestCar.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestCar{\n\n  @Test\n  public void testSolution() {\n    Car c \u003d new Car();\n    c.id \u003d \"TK 6798S\";\n    c.power \u003d 156;\n    assertEquals(\"Niewłaściwa funkcja toString()!\", \"id \u003d TK 6798S, power \u003d 156\", c.toString());\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n    Zdefiniuj bezargumentową metodę \u003csamp\u003etoString()\u003c/samp\u003e, która zwróci łańcuch składający się\n    z wartości wszystkich pól. Przykładowo dla klasy \u003csamp\u003ePoint\u003c/samp\u003e, która ma dwa pola \n    \u003csamp\u003ex\u003c/samp\u003e i \u003csamp\u003ey\u003c/samp\u003e funkcja \u003csamp\u003etoString()\u003c/samp\u003e\n    może wyglądać tak:\n\u003c/p\u003e\n    \u003cpre\u003e\n        \u003ccode\u003e  \n    class Point{\n        int x, y;\n        \n        public String toString(){\n           return \"Point x \u003d \" + x + \" y \u003d \" + y;\n        }\n    }\n        \u003c/code\u003e\n        \n    \u003c/pre\u003e\n\u003cp\u003e\n    Dla auta o atrybutach: id \u003d \"TK 8914S\" i power \u003d 100 zwrócony przez funkcję łańcuch powinien mieć postać:\n\u003c/p\u003e\n\u003csamp\u003e\n    id \u003d TK 8914S, power \u003d 100\n\u003c/samp\u003e\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Konstruktory",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKONSTRUKTOR\u003c/h1\u003e\n\u003cp\u003e\nSpecjalną metodą jest konstruktor, który jest niejawnie wywoływany podczas tworzenia każdego obiektu.\n  Konstruktor ma nazwę identyczną jak klasa, nie zwraca żadnej wartości (nawet void).\n  Jeśli nie zostanie zdefiniowany to zostanie utworzony bezargumentowy konstruktor domyślny.\n  Zadaniem konstruktora jest najczęściej nadanie polom wartości już podczas tworzenia obiektu. \u003c/p\u003e\n\u003cp\u003e\n  Aby to osiągnąć należy zdefiniować konstruktor parametryczny: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Person{\n    String firstName;\n    String lastName;\n    Person(String fName, String lName) {\n      this.firstName \u003d fName;\n      this.lastName \u003d lName;\n    }\n  }\n    \u003c/code\u003e\n  \u003c/pre\u003e\n\u003cp\u003e\nKonstruktor posiada dwa parametry, które są łańcuchami zawierającymi kolejno imię i nazwisko,\n  które przypisujemy do odpowiednich pól. \u003c/p\u003e\n\u003cp\u003e\nMożna teraz skorzystać z tego konstruktora podczas tworzenia obiektu:\n\u003c/p\u003e\n\u003ccode\u003e\nPerson userA \u003d new Person(\"LUCJAN\", \"NOWACKI\");\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\nMożemy teraz spojrzeć na tworzenie obiektu jak na wywołanie specjalnej metody, która jest konstruktorem.\n  Operator new oznacza tworzenie obiektu, potem występuje nazwa klasy, która też jest nazwą\n  konstruktora za którym w nawiasach znajdują się argumenty wywoływanej metody. Wywołanie\n  konstruktora zwraca gotowy obiekt, który przypisywany jest do zmiennej userA.\u003c/p\u003e\n\u003cp\u003e\nPorównajmy obecny przykład z poprzednim tworzeniem obiektu, zanim zdefiniowaliśmy konstruktor.\n\u003c/p\u003e\n\u003ccode\u003e  Person user \u003d new Person();\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\nTutaj też wywołujemy konstruktor, tylko jest to niejawnie utworzony konstruktor bezargumentowy.\n  Co robi taki domyślny konstruktor? Wywołuje odpowiedni konstruktor superklasy, a ponieważ\n  nie wskazaliśmy takiej superklasy (później wyjaśnimy to pojęcie) to zostanie wywołany\n  bezargumentowy konstruktor klasy Object.\u003c/p\u003e\n\u003cp\u003e\nKlasa Object jest podstawową klasą, która jest wbudowana w język Java. Każda klasa,\n  której nie wskażemy superklasy będzie posiadać klasę Object jako swoją superklasę.\n  A ponieważ w klasie Object jest zdefiniowany konstruktor bezargumentowy, dlatego i\n  nasza Person taki posiada. Konstruktor dostarczony z Object w istocie prawie nic nie\n  robi, choć można przyjąć, że nadaje polom wartości domyślne, dlatego obiekt userB będzie\n  miał pola z wartościami null.\u003c/p\u003e\n\u003cp\u003e\nOba przykłady pokazują, że klasa może posiadać wiele konstruktorów, a każdy może mieć inną listę parametrów.\n  Rozpoznawanie, który konstruktor wywołać podczas tworzenia obiektu odbywa się na podstawie typu argumentów.\n  Stąd nie można zdefiniować dwóch konstruktorów z identyczną listą parametrów. Jeśli podczas tworzenia\n  obiektu pomylimy typ argumentu to pojawi się błąd kompilacji:\u003c/p\u003e\n\u003ccode\u003ePerson user \u003d new Person(1,\"KOWAL\"); //to spowoduje błąd kompilacji\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\nKompilator wyśle komunikat informujący, że podaliśmy typ argumentu, którego nie da się rzutować\n  na typ String. Istotnie 1 jest literałem całkowitym, który automatycznie nie może zostać poddany konwersji.\n\u003c/p\u003e\n\u003cp\u003e\nJeśli nasza klasa Person będzie inaczej zdefiniowana: \u003c/p\u003e\n\u003ccode\u003eclass Person{ \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eString firstName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eString lastName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint age; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ePerson(String firstName, String lastName) {\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ethis.firstName \u003d firstName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ethis.lastName \u003d lastName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e} \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ePerson(int age, String firstName){ \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ethis.firstName \u003d firstName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ethis.age \u003d age; \u003c/code\u003e\u003cbr\u003e}\n\u003ccode\u003e}\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\nto jeden z konstruktorów będzie odpowiadał naszej liście argumentów: \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ePerson user \u003d new Person(1,\"ADAM\"); //teraz nie będzie błędów, jest odpowiedni konstruktor\u003c/code\u003e\u003cbr\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 3",
              "stepic_id": 0,
              "task_files": {
                "src/Box.java": {
                  "name": "src/Box.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Box {\n  int fill;\n}"
                }
              },
              "test_files": {
                "test/TestBox.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestBox{\n\n  @Test\n  public void testSolution() {\n    Box b \u003dnew Box();\n    assertEquals(\"Niewłaściwa wartość pola fill!\", 100, b.fill );\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\nZdefiniuj bezargumentowy konstruktor klasy Box, który zainicjuje pole fill wartością 100;\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 4",
              "stepic_id": 0,
              "task_files": {
                "src/Player.java": {
                  "name": "src/Player.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Player {\n  int health;\n  String name;\n}"
                }
              },
              "test_files": {
                "test/TestPlayer.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestPlayer{\n\n  @Test\n  public void testSolution() {\n    Player p \u003d new Player(-1);\n    assertEquals(\"Niepoprawny index środkowego znaku\", 100, p.health);\n    p \u003d new Player(89);\n    assertEquals(\"Niepoprawny index środkowego znaku\", 89, p.health);\n    p \u003d new Player(104);\n    assertEquals(\"Niepoprawny index środkowego znaku\", 100, p.health);\n    p \u003d new Player(\"Cipka\");\n    assertEquals(\"Niepoprawny index środkowego znaku\", \"Cipka\", p.name);\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Zdefiniuj dwa konstruktory jednoargumentowe klasy \u003csamp\u003ePlayer\u003c/samp\u003e.\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n  Pierwszy z argumentem typu całkowitego\nma zainicjować pole \u003csamp\u003ehealth\u003c/samp\u003e wartością argumentu, którego wartość musi mieścić się w zakresie od 1 do 100.\n  Jeśli wartość argumentu nie mieści się w zakresie przypisz polu wartość 100.\u003c/li\u003e\n\u003cli\u003e\nDrugi konstruktor z argumentem typu \u003csamp\u003eString\u003c/samp\u003e powinien przypisać polu \u003csamp\u003ename\u003c/samp\u003e wartość argumentu.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Modyfikatory static i final",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003eModyfikator static\u003c/H1\u003e\n\u003cp\u003e\nModyfikator static może wystąpić przed:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003edeklaracją klasy - klasa statyczna\u003c/li\u003e\n  \u003cli\u003edeklaracją pola – pole statyczne\u003c/li\u003e\n  \u003cli\u003edeklaracją metody– metoda statyczna\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nKlasa statyczna może istnieć jedynie jako klasa wewnętrzna.\n  Ponieważ na razie nie będziemy się tego rodzaju klasami zajmować, wyjaśnimy później jej zastosowanie.\n\u003c/p\u003e\n\u003cp\u003e\nPole statyczne klasy to pole, które jest wspólne dla wszystkich obiektów tej klasy i\n  istnieje nawet w sytuacji, gdy nie istnieje żaden obiekt tej klasy.\n  Tym samym do pola statycznego można się odwołać poprzez samą klasę. Jest to trochę\n  złamanie idei klasy jako schematu, który tylko opisuje jak utworzyć rzeczywiste obiekty, ale\n  sama klasa nie jest żadnym rzeczywistym bytem.\nMetoda statyczna to metoda, którą można wywołać bez potrzeby tworzenia obiektu tej klasy.\n\u003c/p\u003e\n\u003cp\u003e\n  W metodzie statycznej nie wolno odwoływać się do niestatycznych składowych klasy.\n\u003c/p\u003e\n\u003ch1\u003eModyfikator final\u003c/h1\u003e\n\u003cp\u003e\nSłowo kluczowe final może wystąpić przed:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003edeklaracją klasy - nie można wyprowadzić z niej innej klasy (klasa nie może być dziedziczona)\u003c/li\u003e\n  \u003cli\u003edeklaracją pola – nie można go modyfikować, pole jest niezmienne\u003c/li\u003e\n  \u003cli\u003edeklaracją metody – nie można jej implementować w klasie pochodnej, metoda jest niezmienna\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nNa obecnym etapie nauki zajmiemy się jedynie zastosowaniem final w odniesieniu do pola.\n  Pole niezmienne oznacza, że nie można będzie już do niego przypisać żadnej wartości.\n  Jednak tę wartość choć raz trzeba przypisać i można to zrobić:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003einicjując pole podczas deklaracji,\u003c/li\u003e\n  \u003cli\u003eprzypisując wartość pola w konstruktorze.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  \u003ch1\u003ePrzykład wykorzystania\u003c/h1\u003e\n\u003cp\u003e\nWróćmy do przykładu obliczania cen brutto. Zadeklarujemy klasę reprezentującą cenę produktu:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Price{\n    //cena w groszach\n    private int price;\n    //vat w promilach\n    private int vat;\n\n    public Price(int price){\n      this.price \u003d price;\n    }\n\n    public long getBrutto(){\n      return price*(1000+vat)/1000;\n    }\n\n    public float getBruttoZL(){\n      return this.getBrutto()/100f;\n    }\n\n    public void setVat(int vat){\n      this.vat \u003d vat;\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nLiczba stawek VAT jest skończona, więc można by zastosować listę stałych,\nktóre miałyby wartości VAT-u. Dodatkowo uniknęlibyśmy pomyłek wynikających z faktu,\nże VAT w naszej klasie podawany jest w promilach, gdy zazwyczaj podawany jest w procentach.\n  Skorzystajmy z poznanych słów kluczowych \u003csamp\u003estatic\u003c/samp\u003e i \u003csamp\u003efinal\u003c/samp\u003e do zdefiniowania stałych ze stawkami VAT:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Price{\n    public static final int VAT_23 \u003d 230;\n    public static final int VAT_8 \u003d 80;\n    public static final int VAT_5 \u003d 50;\n    //cena w groszach\n    final public int price;\n    //vat w promilach private\n    int vat; public Price(int price, int vat){\n      this.price \u003d price; this.vat \u003d vat;\n    }\n\n    public long getBrutto(){\n      return price*(1000+vat)/1000;\n    }\n\n    public float getBruttoZL(){\n      return this.getBrutto()/100f;\n    }\n\n    public void setVat(int vat){\n      this.vat \u003d vat;\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nUtworzyliśmy trzy pola statyczne i jednocześnie niezmienne z dostępem publicznym, które\n  zawierają obowiązujące stawki VAT. Dodatkowo pole \u003csamp\u003eprice\u003c/samp\u003e zmieniliśmy na publiczne i finalne.\nPrzykład wykorzystania naszej klasy:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  Price priceApple \u003d new Price(300_000, Price.VAT_23);\n  System.out.println(\"Cena netto: \"+ priceApple.price/100f +\"; cena brutto: \" + priceApple.getBruttoZL());\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Możemy też zdefiniować metodę statyczną, która będzie liczyć cenę podaną jako argument wywołania: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    class Price{\n      public static final int VAT_23 \u003d 230;\n      public static final int VAT_8 \u003d 80;\n      public static final int VAT_5 \u003d 50;\n      . . .\n      public static long getBrutto(int priceInGrosz, int vatInPromile) {\n        return priceInGrosz *(1000+vatInPromile)/1000;\n      }\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W metodzie statycznej nie można odwoływać się do pól niestatycznych obiektu, bo\n  metoda statyczna wywoływana może być na rzecz klasy, a nie obiektu, która nie\n  posiada pól niestatycznych.\u003c/p\u003e\n\u003cp\u003e\nKorzystając tylko z klasy, bez tworzenia obiektu tej klasy, możemy obliczyć cenę brutto: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n  System.out.println(Price.getBrutto(3000, Price.VAT_5));\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nMożna też wywołać metodę statyczną na rzecz obiektu:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  System.out.println(priceApple.getBrutto(40040, Price.VAT_8));\n\u003c/code\u003e\n  \u003c/pre\u003e\n\u003cp\u003e\nJest to jednak dość mylące, gdyż korzystamy z metody obiektu bez związku z nim samym,\n  w tym przypadku cena wyświetlona przez metodę nie ma nic wspólnego z ceną przechowywaną w obiekcie.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Metody o zmiennej liczbie parametrów",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eMetody o zmiennej liczbie argumentów- VarArgs\u003c/h1\u003e\n\u003cp\u003e\nMożliwe jest zdefiniowanie metody o zmiennej liczbie argumentów. Oznacza to, że\n    tę samą metodę można wywołać raz tak:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    obiekt.metodaVarargs(3, 3);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\na innym razem tak:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    obiekt.metodaVarargs(3, 3, 5, 7, 8);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nSchemat definiowania takiej funkcji wygląda następująco: \u003c/p\u003e\n\u003cpre\u003e\n\u003csamp\u003e\n    typ-zwracany nazwa-metody(typ parametr-stały, typ ... parametry)\n\u003c/samp\u003e\n    \u003c/pre\u003e\n\u003cp\u003e\n    \u003csamp\u003eparametr-stały\u003c/samp\u003e – to ostatni parametr, który musi wystąpić jako argument podczas wywołania,\u003cbr\u003e\n    \u003csamp\u003eparametry\u003c/samp\u003e – to pozostałe parametry, których liczba może się zmieniać. Jest to tablica, po której\nmożna iterować.\n\u003c/p\u003e\n\u003cp\u003e\nZdefiniujmy prostą metodę, która obliczy sumę liczb podanych jako argumenty:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    class Operations {\n        public int add(int first, int ... numbers) {\n            int sum \u003d first;\n            for (int number: numbers){\n                sum+\u003dnumber;\n            }\n            return sum;\n        }\n    }\n        \u003c/code\u003e\n    \u003c/pre\u003e\n\u003cp\u003e\n    Listę parametrów \u003csamp\u003enumbers\u003c/samp\u003e traktujemy jak tablicę, którą możemy przeglądać\n    instrukcją \u003csamp\u003efor each\u003c/samp\u003e.\n    Parametr \u003csamp\u003efirst\u003c/samp\u003e jest ostatnim stałym parametrem.\nPrzykład wywołania: \u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    Operations op \u003d new Operations();\n    System.out.println(op.add(1,2,3,4,5,6,7,8,9));\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nMożna tę metodę wywołać z jednym argumentem:\n\u003cpre\u003e\n\u003ccode\u003e\n    op.add(5);\n\u003c/code\u003e\n    \u003c/pre\u003e\nnatomiast próba wywołania jej bez argumentów:\n\u003cpre\u003e\n\u003ccode\u003e\n    op.add(); \u003c/code\u003e\u003c/pre\u003e\nzakończy się wygenerowaniem błędu kompilacji.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Pakiety",
          "task_list": [
            {
              "name": "Wiadomości",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePodstawowe wiadomości\u003c/h1\u003e\n\u003cp\u003e\u003c/p\u003e\nRozbudowane programy mogą zawierać bardzie wiele klas, część tych klas będzie współpracować ze sobą,\ntworząc jakąś odrębną całość, dodatkowo można te klasy wykorzystać w innych aplikacjach.\nAby łatwiej zarządzać kodem w Java stworzono kolejny, wyższy poziom organizacji zwany pakietami.\nPakiet to po prostu zbiór klas, które powinny mieć coś wspólnego ze sobą.\n\u003c/p\u003e\n\u003cp\u003e\nNazwy pakietów budowane są podobnie jak adresy domenowe, z użyciem małych liter (łacińskich),\n    tylko w odwrotnej kolejności np.:\u003c/p\u003e\n\u003csamp\u003e pl.sdacademy.javaistqb\u003c/samp\u003e\n\u003cp\u003e\nPodobnie też jak adresy można budować hierarchie pakietów tzn. pakiet może zawierać inne pakiety\n\u003c/p\u003e\n   \u003csamp\u003epl.tarr.istqbjava.javapodstawy\u003c/samp\u003e \u003cbr\u003e\n\u003csamp\u003epl.tarr.istqbjava.javaprogramowanie\u003c/samp\u003e \u003cbr\u003e\n\u003csamp\u003epl.tarr.istqbjava.javaprogramowaniezaawansowane\u003c/samp\u003e\u003cbr\u003e\n\u003cp\u003e\nFrazy użyte w nazwie pakietu nie muszą mieć żadnego związku z istniejącymi adresami domenowy,\n    choć często się je wykorzystuje. Jednocześnie należy budować je tak, aby były unikalne\n    i nie wchodziły w konflikt z istniejącymi pakietami Javy. Nazwy też powinny coś znaczyć\n    i informować co znajduje się w pakiecie np.: java.util jasno wskazuje, że jest to pakiet Java\n    z klasami użytkowymi.\n    \u003cp\u003e\nKażda klasa musi być przypisana do jakiegoś pakietu. Jeśli go nie zdefiniujemy to zostanie\n    utworzony pakiet domyślny, nienazwany.\u003c/p\u003e\n\u003cp\u003e\nOdzwierciedleniem fizycznym pakietów jest struktura katalogów, choć specyfikacja Javy tego nie wymaga.\n    Wtedy związek między nazwą pakietu a strukturą katalogu byłby następujący:\u003c/p\u003e\npakiet: \u003csamp\u003e pl.com.tarr.istqbjava \u003c/samp\u003e \u003cbr\u003e\nkatalog pakietu: \u003csamp\u003epl\\com\\tarr\\istqbjava\u003c/samp\u003e\u003cbr\u003e\n\u003cp\u003e\nWiększość środowisk IDE wspierających Javę fizycznie przechowuje tworzony kod w ten sposób.\n\u003c/p\u003e\n\u003cp\u003e\nUtworzenie pakietu polega na nadaniu mu nazwy i umieszczeniu w pierwszej linii pliku klasy deklaracji\n    pakietu: \u003c/p\u003e\n\u003ccode\u003e\n    package nazwa-pakietu;\n\u003c/code\u003e\n\u003cp\u003e\n    Umieśćmy klasę \u003csamp\u003ePerson\u003c/samp\u003e w pakiecie \u003csamp\u003epl.sdacademy.javaistqb\u003c/samp\u003e: \u003c/p\u003e\n\u003ccode\u003e package pl.sdacademy.javaistqb; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eclass Person{ \u003c/code\u003e \u003cbr\u003e\n\u003ccode\u003eString firstName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eString lastName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eint age; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ePerson(String firstName, String lastName) {\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e this.firstName \u003d firstName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e this.lastName \u003d lastName; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e} \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ePerson(int age, String firstName){ \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e this.firstName \u003d firstName; this.age \u003d age; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e} \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e}\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\n    Aby skorzystać z \u003csamp\u003ePerson\u003c/samp\u003e w innej klasie należącej do innego pakietu, należy ją zaimportować:\n\u003c/p\u003e\n\u003ccode\u003eimport nazwa-pakietu.*; //import wszystkich typów z pakietu import \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003enazwa-pakietu.NazwaKlasy; //import danej klasy\u003c/code\u003e\u003cbr\u003e\n\u003cp\u003e\nGdyby poprawnie została zdefiniowana nasza klasa Person to można ją by zaimportować w innym pakiecie:\n\u003c/p\u003e\n\u003ccode\u003eimport pl.sdacademy.javaistqb.Person; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eclass User{ Person userData; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eString password; \u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003eString login; \u003c/code\u003e\u003cbr\u003e\n\u003ccode}\u003c/code\u003e\u003cbr\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Modyfikatory dostępu",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eModyfikatory dostępu\u003c/h1\u003e\n\u003cp\u003e\nModyfikatory dostępu określają czy element danej klasy czy pakietu jest widoczny w innej klasie\n  lub pakiecie. Może się wydawać, że ograniczanie dostępu utrudnia pracę nad programem,\n  bo nie można się odwołać do każdego pola, metody czy klasy. W istocie jest odwrotnie,\n  odpowiednie sterowanie widocznością czyni program bardziej czytelnym, niezawodnym i bezpiecznym.\n\u003c/p\u003e\n\u003cp\u003e\nWszystkie modyfikatory są przedstawione w tabeli:\n\u003c/p\u003e\n\u003ctable border\u003d\"\" bgcolor\u003d\"#123456\" cellpadding\u003d\"4\" align\u003d\"center\"\u003e\n  \u003ctr bgcolor\u003d\"#455612\" align\u003d\"center\" \u003e\n    \u003ctd\u003emodyfikator\u003c/td\u003e\n    \u003ctd\u003eskładowe klasy\u003c/td\u003e\n    \u003ctd\u003eklasy w tym \u003cbr\u003esamym pakiecie\u003c/td\u003e\n    \u003ctd\u003epodklasy w \u003cbr\u003einnym pakiecie\u003c/td\u003e\n    \u003ctd\u003ereszta\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr align\u003d\"center\"\u003e\n    \u003ctd\u003epublic\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr align\u003d\"center\"\u003e\n    \u003ctd\u003eprotected\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr align\u003d\"center\"\u003e\n    \u003ctd\u003ebez modyfikatora\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr align\u003d\"center\"\u003e\n    \u003ctd\u003epublic\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#009955\"\u003edostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n    \u003ctd bgcolor\u003d\"#992211\"\u003enie dostępny\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nZ tabeli wynika, że dla każdego modyfikatora składowe klasy są widoczne wewnątrz niej samej,\n  czyli klasa zawsze widzi wszystkie swoje składowe.\n  Modyfikator \u003csamp\u003epublic\u003c/samp\u003e powoduje, że każda składowa klasy lub klasa jest widoczna we wszystkich pakietach.\u003c/p\u003e\n\u003cp\u003e\n  Słowo \u003csamp\u003eprotected\u003c/samp\u003e ogranicza widoczność dla wszystkich klas spoza pakietu, które nie są wyprowadzone z danej klasy.\nBez podawania modyfikatora składowe danej klasy są widoczne we wszystkich klasach swojego pakietu. W innych\n  pakietach są już niewidoczne.\u003c/p\u003e\n\u003cp\u003e\n  Modyfikator \u003csamp\u003eprivate\u003c/samp\u003e wprowadza najbardziej rygorystyczne ograniczenie, powodujące, że składowa jest widoczna\n  tylko wewnątrz swojej klasy.\n\u003c/p\u003e\n\u003cp\u003e\nW prezentowanych przykładach brak było jakichkolwiek modyfikatorów, czyli zdefiniowaliśmy wszystkie elementy\n  jako widoczne w obrębie pakietu, zatem próba importu pakietu z poprzedniej strony w innym pakiecie nie\n  odniosłaby skutku. Nasza klasa \u003csamp\u003ePerson\u003c/samp\u003e nie byłaby widoczna poza pakietem.\n  Należy zatem poprawić jej definicję:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\npackage pl.sdacademy.javaistqb;\n\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n\n    public Person(String firstName, String lastName) {\n        this.firstName \u003d firstName;\n        this.lastName \u003d lastName;\n    }\n\n    public Person(int a, String firstName) {\n        this.firstName \u003d firstName;\n        this.age \u003d a;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        firstName \u003d firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName \u003d lastName;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age \u003d age;\n    }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nWszystkie pola zostały zdefiniowane jako prywatne, są więc tylko widoczne wewnątrz klasy.\n  Klasa \u003csamp\u003ePerson\u003c/samp\u003e ma modyfikator \u003csamp\u003epublic\u003c/samp\u003e, więc jest widoczna wszędzie.\n  Wszystkie metody,   w tym konstruktor też są publiczne.\u003c/p\u003e\n\u003cp\u003e\nImportujmy klasę do innego pakietu: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    package pl.com.recordit.java\n    import pl.sdacademy.javaistqb.Person;\n\u003c/code\u003e\n\u003c/pre\u003e\n  \u003cp\u003e\nSprawdźmy działanie modyfikatorów poprzez stworzenie obiektu i wywołanie metod: \u003cp\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    Person userB \u003d new Person(”ADAM”,”CAŁA”);\n    userB.setAge(49);\n    System.out.println(userB.getLastName()+” ”+userB.getAge());\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nNa ekranie powinny poprawnie wyświetlić się dane użytkownika. Natomiast próba odwołania się bezpośrednio\n  do pól np. \u003csamp\u003efirstName\u003c/samp\u003e skończy się niepowodzeniem: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    userB.firstName \u003d ”CAŁKA”;\n    System.out.prinln(userB.firstName);\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nZostanie wyświetlony błąd kompilacji z informacją, że pole firstName ma dostęp prywatny, co oznacza,\n  że nie można go odczytać ani zapisać poza klasą.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Data i czas",
          "task_list": [
            {
              "name": "LocalTime",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "LoaclaDate",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "LocalDateTime",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Łańcuchy",
          "task_list": [
            {
              "name": "Klasa String",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKlasa String\u003c/h1\u003e\n\u003cp\u003e\n    Często typ łańcuchowy \u003csamp\u003eString\u003c/samp\u003e postrzega się jako jeden z typów prostych. W rzeczywistości\n    jest to typ złożony czyli klasa, która służy do zapamiętywania dowolnych napisów.\u003c/p\u003e\n\u003cp\u003eŁańcuchy można tworzyć dwoma metodami:\n\u003cul\u003e\n    \u003cli\u003e\n        na wzór tworzenia zmiennych typów prostych:\n        \u003cpre\u003e\u003ccode\u003e\nString title \u003d \"Pierwszy program\";\n                \u003c/code\u003e\n            \u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        metodą tworzenia obiektów:\n        \u003cpre\u003e\u003ccode\u003e\nString title \u003d new String(\"Pierwszy program\");\n                \u003c/code\u003e\n            \u003c/pre\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Łańcuchy tworzone pierwszą metodą umieszczane są w specjalnej puli łańcuchów. Gdy tworzona jest\n    zmienna łańcuchowa, która jest identyczny z jednym z łańcuchów w puli, to wykorzystywany jest łańcuch z puli,\n    a zmiennej jest przypisywana referenja do niego. W tej sposób wszystkie identyczne łańcuchy mają tę samą\n    referencję.\n\u003c/p\u003e\n\u003cp\u003e\n    Gdy łańcuch tworzony jest operatorem \u003csamp\u003enew\u003c/samp\u003e, to traktowany jest tak, jak wszystkie inne obiekty, i bez\n    względu na zawartość, każdej zmiennej przypisywana jest inna referencja.\n\u003c/p\u003e\n\u003cp\u003e\n    Jest to jedyna klasa, dla której przedefiniowano działanie operatora ‘+’: \u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    String text \u003d message +\" Tomek\";\n    \u003c/code\u003e\n    \u003c/pre\u003e\n\u003cp\u003e\n    Łączenie dotyczy także łańcuchów z typami prostymi, przy czym wartość takiego typu zamieniana jest na łańcuch\n    reprezentujący wartość:\n\u003c/p\u003e\n\u003cpre\u003e\n        \u003ccode\u003e\n    int radius \u003d 10;\n    float PI \u003d 3.14f;\n    System.out.println(\"Pole powierzchni koła o r \u003d\"+radius+\" wynosi \"+ radius*radius*PI);\n        \u003c/code\u003e\n    \u003c/pre\u003e\n\u003cp\u003e\n    Cechą charakterystyczną klasy \u003csamp\u003eString\u003c/samp\u003e jest też to, że jej obiekty są niemodyfikowalne. Mając dostęp do\n    referencji obiektu nie można zmienić zawartości łańcucha. Jeśli łączymy łańcuchy to tworzony jest nowy\n    obiekt z połączonych napisów. Jeśli istnieje potrzeba modyfikacji łańcucha to należy skorzystać ze\n    specjalizowanych klas StringBuilder lub StringBufor. Dają one możliwość modyfikowania każdego znaku obiektu.\n\u003c/p\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eString\u003c/samp\u003e posiada wiele metod do przetwarzania łańcuchów:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003csamp\u003estr.length()\u003c/samp\u003e - zwraca liczbę znaków w łańcuchu str,\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.charAt(index)\u003c/samp\u003e - zwraca znak znajdujący się na pozycji index w str (pierwszy znak ma indeks 0)\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.contains(text)\u003c/samp\u003e - zwraca true, jeśli w łańcuchu str zawarty jest text\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.indexOf(ch)\u003c/samp\u003e - zwraca indeks pierwszego wystąpienia w łańcuchu str znaku ch\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.indexOf(substr)\u003c/samp\u003e - zwraca indeks pierwszego wystąpienia w łańcuchu str podłańcucha substr\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.indexOf(ch, index)\u003c/samp\u003e – zwraca indeks pierwszego wystąpienia we fragmencie łańcucha str, zaczynającego się od indeksu\nindex, znaku ch\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.indexOf(substr, index)\u003c/samp\u003e - zwraca indeks pierwszego wystąpienia we fragmencie łańcucha str, zaczynającego się od\nindeksu index, podłańcucha substr\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.lastIndexOf(ch), str.lastIndexOf(ch,index), str.lastIndexOf(substr), str.lastIndexOf(substr,index)\u003c/samp\u003e – działają7\npodobnie jak indexOf, z tą różnicą, że przeszukują łańcuch str od końca.\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.startsWith(prefix), str.endsWith(postfix) \u003c/samp\u003e– testują odpowiednio czy str zaczyna się, czy kończy się przekazanym\nargumentem.\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.substring(startIndex) str.substring(startIndex, endIndex)\u003c/samp\u003e – zwracają podłańcuchy z str odpowiednio: pierwsza\npocząwszy od podanego indeksu do końca, druga od podanego indeksu startIndex do indeksu endIndex.\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.replace(oldCh, newCh), str.replace(targetStr, replacementStr)\u003c/samp\u003e – zwracają łańcuch z zamienionymi znakami lub\npodłańcuchami\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.toLowerCase() \u003c/samp\u003e– zamienia wszystkie litery na małe\u003c/li\u003e\n\u003cli\u003e\u003csamp\u003estr.toUpperCase() \u003c/samp\u003e– zamienia wszystkie litery na duże\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    Żadna z metod nie modyfikuje łańcucha, który je wywołuje. Jeśli zwracany jest łańcuch to jest to kopia odpowiednio\n    zmodyfikowanego łańcucha wywołującego metodę.\n\u003c/p\u003e\n\u003cp\u003e\nKilka przykładów wykorzystania przedstawionych metod:\n    \u003cpre\u003e\n        \u003ccode\u003e\n    final String str \u003d \"\u0026lt;p\u0026gt;Tekst w kilku \\nwierszach zwierający\\nznacznik HTML\u0026lt;/p\u0026gt;\";\n\n    System.out.println(str.codePointAt(0));\n    --\n    60\n\n    System.out.println(str.contains(\"\u0026lt;p\u0026gt;\"));\n    --\n    True\n\n    System.out.println(str.indexOf(\u0027T\u0027));\n    --\n    3\n\n    System.out.println(str.indexOf(\u0027t\u0027,3));\n    --\n    7\n\n    System.out.println(str.indexOf(\"kilku\"));\n    --\n    11\n\n    System.out.println(str.lastIndexOf(\u0027L\u0027));\n    --\n    52\n\n    System.out.println(str.startsWith(\"\u0026lt;p\u0026gt;\"));\n    --\n    true\n\n    System.out.println(str.substring(1,11));\n    --\n    p\u003eTekst w\n\n    System.out.println(str.replace(\u0027a\u0027, \u0027@\u0027));\n    --\n    \u0026lt;p\u0026gt;Tekst w kilku wiersz@ch zwier@jący zn@cznik HTML \u0026lt;/p\u0026gt;\n\n    System.out.println(str.toLowerCase());\n    --\n    \u0026lt;p\u0026gt;tekst w kilku wierszach zwierający znacznik html \u0026lt;/p\u0026gt;\n\n    System.out.println(str.toUpperCase());\n    --\n    \u0026lt;p\u0026gt;TEKST W KILKU WIERSZACH ZWIERAJĄCY ZNACZNIK HTML \u0026lt;/p\u0026gt;\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n\n  //Funkcja 1\n  static public char getMiddleChar(String s){\n    char result \u003d \u0027 \u0027;\n    //napisz funkcję, która zwróci środkowy znak łańcucha s\n\n    return result;\n  }\n\n  //Funckja 2\n  static public boolean hasHexDigit(String s){\n    boolean result \u003d false;\n    //napisz funkcję, która zwróći prawdę jeśli w łańcuchu s występuje litera A B C D E F\n    return result;\n  }\n\n  //Funkcja 3\n  static public int countBetween(String s, char symbol){\n    int result \u003d 0;\n    //napisz funkcję, która zwróci ile znaków znajduję się w łańcuchy s między pierwsza i ostatnim znakiem symbol\n    return result;\n  }\n\n  static public void main(String[] args){\n\n  }\n}"
                }
              },
              "test_files": {
                "test/TestTask.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestTask{\n\n  @Test\n  public void testSolution() {\n    assertEquals(\"Niepoprawny index środkowego znaku\", \u0027d\u0027, Task.getMiddleChar(\"abcdefg\") );\n    assertEquals(\"Ten łańcuh zawiera cyfrę Hex\", true, Task.hasHexDigit(\"adhjkdf$%F\"));\n    assertEquals(\"Ten łańcuh nie zawiera znaku HEX\", false, Task.hasHexDigit(\"adhjkdf$%hjua\"));\n    assertEquals(\"Niepoprawna liczba\", 5, Task.countBetween(\"gbcaedfjhagb\", \u0027a\u0027) );\n    assertEquals(\"Niepoprawna liczba\", 0, Task.countBetween(\"gbcaedfjhagb\", \u0027z\u0027) );\n    assertEquals(\"Niepoprawna liczba\", 0, Task.countBetween(\"gbcaezfjhagb\", \u0027z\u0027) );\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003eUzupełnij trzy funkcje. Wpisz kod tylko wewnątrz funkcji, wyznacz wartość zmiennej result.\u003c/p\u003e\n\u003ch3\u003eFunkcja 1\u003c/h3\u003e\n\u003cp\u003e\nZwróć środkowy znak łańcucha np. dla łańcucha \"1234567\" funkcja powinna zwrócić znak \u00274\u0027. Przyjmij, że łańcuch\ns zawsze zawiera nieparzystą liczbę n znaków, przy czym n \u003e 2.\n\u003c/p\u003e\n\u003ch3\u003eFunkcja 2\u003c/h3\u003e\n\u003cp\u003e\n   Zwróć wartość logiczną true, jeśli w łańcuch s występuje choć jedna z cyfr szesntastkowych A, B, C, D, E ,F\n    np. dla łańcucha s \u003d \"a78984\" powinna zwrócić false, dla s \u003d \"7896aHF\" wynikiem jest true.\n\u003c/p\u003e\n\u003ch3\u003eFunkcja 3\u003c/h3\u003e\n\u003cp\u003e\n    Zwróć liczbę znaków występujących w s między pierwszym i ostanim znakiem symbol np. dla\n    łańcucha s \u003d \"abcadfg\" i symbol \u003d \u0027a\u0027 funkcja powinna zwrócić 2. Jeśli znak symbol nie występuje, lub jest tylko\n    jeden taki znak to funkcja powinna zwrócić 0.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Wyrażenia regularne",
              "stepic_id": 0,
              "task_files": {
                "src/RegExpExamples.java": {
                  "name": "src/RegExpExamples.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.regex.Pattern;\n\nclass RegExpExamples {\n  public static void main(String[] args){\n    System.out.println(Pattern.matches(\"^B.*\",\"Beata\"));\n    System.out.println(Pattern.matches(\".*ala.*\",\"balaton\"));\n    System.out.println(Pattern.matches(\".*\\\\d.*\",\"a9a\"));\n    System.out.println(Pattern.matches(\"^[ab\\\\s]+$\",\"aabaabba\"));\n    System.out.println(Pattern.matches(\"\\\\d{2}-\\\\d{3}\",\"22-456\"));\n    System.out.println(Pattern.matches(\"^\\\\b.*[aA]\\\\b$\",\"Tomek Alina\"));\n    System.out.println(Pattern.matches(\"\\\\d{2}\\\\s+\\\\d{9}\",\"48 567812386\"));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eWyrażenia regularne\u003c/h1\u003e\n\u003cp\u003e\nW praktyce tworzenia programów dość często trzeba operować na łańcuchach, w których przechowuje\n  się wiele różnorodnych danych. Przykładem może być np. nr rejestracyjny samochodu, który\n  może składać się z liter i cyfr. Jak rozpoznać, czy zapisany w zmiennej String numer jest poprawny?\n  Czy zaczyna się od dwóch liter? Czy kombinacja tych liter jest właściwa? Oczywiście takich pytań można\n  stawiać wiele i muszą istnieć odpowiednie narzędzia do uzyskania na nie odpowiedzi.\n\u003c/p\u003e\n\u003cp\u003e\nWłaściwym narzędziem do przetwarzania łańcuchów są wyrażenia regularne. Wyrażenie kojarzy się z\n  ciągiem działań i dokładnie tak jest: wyrażenie regularne jest zapisem ciągu działań jakie\n  należy podjąć na łańcuchu, aby stwierdzić, czy łańcuch pasuje do wzorca.\n  A gdzie zapisujemy ten wzór? Właśnie w tym wyrażeniu.\u003c/p\u003e\n\u003cp\u003e\n  Popatrzmy na pierwszy przykład testujący czy w zmiennych strA i StrB jest napis ”ab”: \u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  import java.util.regex.Pattern;\n  String strA \u003d \"ab\";\n  String strB \u003d \"abc\";\n  boolean isPattern \u003d Pattern.matches(\"ab\", strA);\n  System.out.println(isPattern);\n  isPattern \u003d Pattern.matches(\"ab\", strB);\n  System.out.println(isPattern);\n  --\n  true\n  false\n  \u003c/code\u003e\n  \u003c/pre\u003e\n  \u003cp\u003e\n    Jest to najbardziej prymitywny sposób porównywania łańcuchów. Nasze wyrażenie zawierało\n  dokładnie te znaki jakie chcemy, aby występowały w testowanym łańcuchu.\n  Wykorzystaliśmy klasę Pattern posiadająca metodę statyczną, która potrzebuje dwóch\n  argumentów: wyrażenia regularnego i łańcucha testowanego. Metoda zwraca true jeśli\n  wynik porównania jest pozytywny.\n\u003c/p\u003e\n\u003cp\u003e\nTworzenie bardziej rozbudowanych wyrażeń wymaga stosowania oprócz znaków także specjalnych symboli:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eZnaki\u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003eX - dowolny znak\u003c/li\u003e\n    \u003cli\u003e\\\\ - znak backslash\u003c/li\u003e\n    \u003cli\u003e\\0n - znak o kodzie w postaci liczby ósemkowa 0n (0\u003c\u003dn\u003c\u003d7)\u003c/li\u003e\n    \u003cli\u003e\\0nn - znak o kodzie w postaci liczby ósemkowa 0nn (0\u003c\u003dn\u003c\u003d7)\u003c/li\u003e\n    \u003cli\u003e\\0mnn - znak o kodzie w postaci liczby ósemkowa 0mnn (0\u003c\u003dn\u003c\u003d7, 0\u003c\u003d m \u003c\u003d 3)\u003c/li\u003e\n    \u003cli\u003e\\xhh - znak o kodzie w postaci liczby heksadecymalnej 0xhh\u003c/li\u003e\n    \u003cli\u003e\\uhhhh - znak o kodzie w postaci liczby heksadecymalnej 0xhhhh\u003c/li\u003e\n    \u003cli\u003e\\x{h.. h} - znak o kodzie w postaci liczby heksadecymalnej 0xh..h\u003c/li\u003e\n    \u003cli\u003e\\t - znak tabulatora (‘\\u0009’)\u003c/li\u003e\n    \u003cli\u003e\\n - znak nowej linii (‘\\u000A’)\u003c/li\u003e\n    \u003cli\u003e\\r - znak powrotu karetki (kursora tekstowego) (‘\\u000D’)\u003c/li\u003e\n    \u003cli\u003e\\f - znak przesunięcia (‘\\u000C’)\u003c/li\u003e\n    \u003cli\u003e\\a - znak dzwonka (alarmu) (‘\\u0007’)\u003c/li\u003e\n    \u003cli\u003e\\e - znak ucieczki (escape) (‘\\u001B’)\u003c/li\u003e\n    \u003cli\u003e\\cx - znak kontrolny x\u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Symbole powtórzeń, występują za dowolnym znakiem X, który ma się powtarzać we wzorcu\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      X? - X może wystąpić raz lub wcale\n    \u003c/li\u003e\n    \u003cli\u003e\n      X* - X może powtarzać się wielokrotnie lub wcale\n    \u003c/li\u003e\n    \u003cli\u003e\n      X+ - X może powtarzać się wielokrotnie albo wystąpić chociaż raz\n    \u003c/li\u003e\n    \u003cli\u003e\n      X{n} - X musi się powtórzyć dokładnie n razy\n    \u003c/li\u003e\n    \u003cli\u003e\n      X{n,} - X musi powtórzyć się co najmniej n razy\n    \u003c/li\u003e\n    \u003cli\u003e\n      X{n. m} - X może się powtarzać od n do m razy\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Predefiniowane symbole klas znaków, zastępują pewne typowe grupy znaków\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      . - dowolny znak\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\d - znak cyfry: [0:9]\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\D - znak nie będący cyfrą\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\s - znak biały: spacja, tabulator, nowa linia\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\w - dowolny znak słowa, czyli znak alfabetu\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\W - znak nie należący do alfabetu\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Klasy znaków, czyli własne grupy znaków\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      [abc] - grupa składająca się ze znaków a, b, c\n    \u003c/li\u003e\n    \u003cli\u003e\n      [^abc] - każdy znak nie będący znakiem a, b, c, neguje podany zbiór\n    \u003c/li\u003e\n    \u003cli\u003e\n      [a-zA-z] - znaki należące do przedziału od a do z i od A do Z\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Asercje (kotwice), czyli znaczniki miejsca, w którym musi wystąpić dopasowanie:\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      ^ - początek tekstu, linii\n    \u003c/li\u003e\n    \u003cli\u003e\n      $ - koniec tekstu. Linii\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\A - początek tekstu\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\Z - koniec tekstu\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\b - granice słowa, koniec lub początek\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\B - wnętrze słowa, nie koniec ani nie początek\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\G - koniec poprzedniego dopasowania\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Operatory\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      | - alternatywa np. X|Y oznacza X lub Y\n    \u003c/li\u003e\n    \u003cli\u003e\n      XY - X przed Y\n    \u003c/li\u003e\n    \u003cli\u003e\n      (X) - X jest grupą przechwytywaną, wyłuskaną\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003e\n    Referencje wsteczne\n  \u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \\n - odniesienie do przechwyconej grupy o numerze n (numery od 1)\n    \u003c/li\u003e\n    \u003cli\u003e\n      \\k\u0026lt;nazwa\u0026gt; - odniesienie do przechwyconej grupy nazwanej\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cli\u003eKonstrukcje grup\u003c/li\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      (?\u0026lt;nazwa\u0026gt;X) - nazwana grupa do wyłuskania\n    \u003c/li\u003e\n    \u003cli\u003e\n      (?:X) - grupa nie przychwytywana\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Przykłady",
              "stepic_id": 0,
              "task_files": {
                "src/RegExpExamples.java": {
                  "name": "src/RegExpExamples.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.regex.Pattern;\n\nclass RegExpExamples {\n  public static void main(String[] args){\n    System.out.println(Pattern.matches(\"^B.*\",\"Beata\"));\n    System.out.println(Pattern.matches(\".*ala.*\",\"balaton\"));\n    System.out.println(Pattern.matches(\".*\\\\d.*\",\"a9a\"));\n    System.out.println(Pattern.matches(\"^[ab\\\\s]+$\",\"aabaabba\"));\n    System.out.println(Pattern.matches(\"\\\\d{2}-\\\\d{3}\",\"22-456\"));\n    System.out.println(Pattern.matches(\"^\\\\b.*[aA]\\\\b$\",\"Tomek Alina\"));\n    System.out.println(Pattern.matches(\"\\\\d{2}\\\\s+\\\\d{9}\",\"48 567812386\"));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePrzykłady\u003c/h1\u003e\n\u003cp\u003e\nCzy łańcuch zaczyna się literą B:\n\u003c/p\u003e\n\u003csamp\u003e^B.*\u003c/samp\u003e\n\u003cp\u003e\n  Czy łańcuch zawiera frazę \"ala\"\n\u003c/p\u003e\n\u003csamp\u003e.*ala.*\u003c/samp\u003e\n\u003cp\u003e\n  Czy w łańcuchu znajduje się cyfra\n\u003c/p\u003e\n\u003csamp\u003e\n  .*\\d.*\n\u003c/samp\u003e\n\u003cp\u003e\n  Czy łańcuch składa się tylko z liter a i b\n\u003c/p\u003e\n\u003csamp\u003e\n  ^[ab\\s]+$\n\u003c/samp\u003e\n\u003cp\u003e\n  Czy łańcuch jest kodem pocztowym\n\u003c/p\u003e\n\u003csamp\u003e\n  \\d{2}-\\d{3}\n\u003c/samp\u003e\n\u003cp\u003e\n  Czy ostatni wyraz jest imieniem żeńskim lub kończy się literą a\n\u003c/p\u003e\n\u003csamp\u003e\n  ^\\b.*[aA]\\b$\n\u003c/samp\u003e\n\u003cp\u003e\n  Czy łańcuch zawiera nr telefonu\n\u003c/p\u003e\n\u003csamp\u003e\n  \\d{2}\\s+\\d{9}\n\u003c/samp\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        }
      ],
      "type": "section"
    },
    {
      "title": "Java - programowanie podstawowe",
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "items": [
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Rekurencja",
          "task_list": [
            {
              "name": "MergeSort",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "  class Main {\n    //\n    static void mergeSort(int[] arr, int start, int end){\n      int m;\n      if (start \u003c end){\n        m \u003d (end - start) / 2;\n        mergeSort(arr, start , start + m);\n        mergeSort(arr, start + m + 1, end);\n        merge(arr, start, end, start + m);\n      }\n    }\n\n    // start - index of the first element in subarray\n    // end - index of the last element in subarray\n    static void merge(int[] arr, int start, int end, int m){\n      int[] t \u003d new int[1 + end - start];\n      int a \u003d start;\n      int b \u003d m + 1;\n      for (int j \u003d 0; j \u003c t.length; j++) {\n        if (a \u003c\u003d m \u0026\u0026 b \u003c\u003d end) {\n          t[j] \u003d arr[a] \u003c arr[b] ? arr[a++] : arr[b++];\n          continue;\n        }\n        if (a \u003c\u003d m) {\n          t[j] \u003d arr[a++];\n          continue;\n        }\n        if (b \u003c\u003d end){\n          t[j] \u003d arr[b++];\n          continue;\n        }\n      }\n      int j \u003d 0;\n      for (int i \u003d start; i \u003c\u003d end; i++){\n        arr[i] \u003d t[j++];\n      }\n    }\n\n    public static void main(String[] args) {\n      int[] arr \u003d { 2, 6, 6, 8, 4, 3, 1, 2, 4 , 5, 6};\n      mergeSort(arr,0 ,arr.length-1);\n      for (int e: arr){\n        System.out.print(e+\" \");\n      }\n    }\n  }"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        }
      ],
      "type": "section"
    },
    {
      "title": "Java zaawansowana",
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "items": [
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Dziedziczenie",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Person.java": "",
                "test/Customer.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePodstawy\u003c/h1\u003e\n\u003cp\u003e\nDziedziczenie jest przejmowaniem przez klasę właściwości innej klasy. Dana jest klasa \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic class Person {\n  public String firstName;\n  public String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  public String toString(){\n  return firstName +\" \"+lastName+\" \"+birthDate;\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nUtworzenie klasy \u003csamp\u003eWorker\u003c/samp\u003e, w której chcemy przechowywać informacje osobowe jak i dodatkowe np.: stanowisko, pensja,\n    data zatrudnienia itd., może być łatwiejsze\njeśli zastosuje się dziedziczenie:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic class Worker extends Person{\n  public String position;\n  public double salary;\n\n  public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {\n    this.lastName \u003d lastName;\n    this.firstName \u003d firstName;\n    this.birthDate \u003d birthDate;\n    this.position \u003d position;\n    this.salary \u003d salary;\n  }\n\n  public String toString(){\n    return super.toString()+\" \"+position+\" \"+salary;\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Słowo kluczowe \u003csamp\u003eextend\u003c/samp\u003e powoduje, że do definiowanej klasy \u003csamp\u003eWorker\u003c/samp\u003e dołączane są pola i metody\n    klasy \u003csamp\u003ePerson\u003c/samp\u003e. Dziedziczenie dotyczy wszystkich składowych, ale w klasie pochodnej dostępne\n    są tylko składowe nieprywatne. W Java można dziedziczyć tylko po jednej klasie.\n\u003c/p\u003e\n\u003cp\u003e\n    W przedstawionym przykładzie \u003csamp\u003ePerson\u003c/samp\u003e jest klasą bazową, nadklasą, superklasą a \u003csamp\u003eWorker\u003c/samp\u003e\n    klasą wyprowadzoną, pochodną lub podklasą.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 1",
              "stepic_id": 0,
              "task_files": {
                "src/Customer.java": {
                  "name": "src/Customer.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "\n"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Person{\n  public String firstName;\n  public String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return \"Person{\" +\n            \"firstName\u003d\u0027\" + firstName + \u0027\\\u0027\u0027 +\n            \", lastName\u003d\u0027\" + lastName + \u0027\\\u0027\u0027 +\n            \", birthDate\u003d\" + birthDate +\n            \u0027}\u0027;\n  }\n}"
                }
              },
              "test_files": {
                "test/TestCustomer.java": "import org.junit.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.Assert.*;\n\npublic class TestCustomer{\n  @Test\n  public void testCustomer() {\n    Person c \u003d new Customer(\"A\",\"B\", LocalDate.of(2000,10,10),\"AA 12 234\",\"23457643GB\");\n    assertTrue(\"Klasa worker nie dziedziczy po Person\", c instanceof Person);\n    assertEquals(\"Brak pola shippingAddress\", \"AA 12 234\",((Customer) c).shippingAddress);\n    assertEquals(\"Brak pola creditCard\", \"23457643GB\",((Customer) c).creditCard);\n    assertEquals(\"Brak pola firstName\", \"A\", c.firstName);\n    assertEquals(\"Brak pola lastName\", \"B\", c.lastName);\n    assertEquals(\"Brak pola birthDate\", LocalDate.of(2000,10,10).toString(), c.birthDate.toString());\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eZadanie 1\u003c/h1\u003e\n\u003cp\u003eZdefiniuj klasę \u003csamp\u003eCustomer\u003c/samp\u003e wyprowadzoną z klasy \u003csamp\u003ePerson\u003c/samp\u003e. W klasie \u003csamp\u003eCustomer\u003c/samp\u003e dodaj pola:\n  \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eString shippingAddress;\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n       \u003ccode\u003eString creditCard;\u003c/code\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Cześć 2",
              "stepic_id": 0,
              "task_files": {
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Person{\n  public String firstName;\n  public String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return \"Person{\" +\n            \"firstName\u003d\u0027\" + firstName + \u0027\\\u0027\u0027 +\n            \", lastName\u003d\u0027\" + lastName + \u0027\\\u0027\u0027 +\n            \", birthDate\u003d\" + birthDate +\n            \u0027}\u0027;\n  }\n}"
                },
                "src/ReferenceInheritanceDemo.java": {
                  "name": "src/ReferenceInheritanceDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Task {\n  public static void main(String[] args) {\n    Person employee \u003d new Worker(\n            \"Adam\",\n            \"Kowalski\",\n            LocalDate.of(1978, 10,19),\n            \"magazynier\",\n            2400.0);\n    Person wife \u003d new Person(\n            \"Zofia\",\n            \"Nowak\",\n            LocalDate.of(1978, 10,19));\n    System.out.println(employee);\n    System.out.println(wife);\n    Worker w \u003d (Worker) employee;\n    System.out.println(employee);\n  }\n}"
                },
                "src/Worker.java": {
                  "name": "src/Worker.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\npublic class Worker extends Person{\n  public String position;\n  public double salary;\n\n  public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {\n    super(firstName, lastName, birthDate);\n    this.position \u003d position;\n    this.salary \u003d salary;\n  }\n\n  @Override\n  public String toString() {\n    return \"Worker{\" +\n            \"salary\u003d\" + salary +\n            \", firstName\u003d\u0027\" + firstName + \u0027\\\u0027\u0027 +\n            \", lastName\u003d\u0027\" + lastName + \u0027\\\u0027\u0027 +\n            \", birthDate\u003d\" + birthDate +\n            \u0027}\u0027;\n  }\n}\n"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eDziedziczenie \"miejsca\"\u003c/h1\u003e\n\u003cp\u003eKonsekwencją dziedziczenia jest możliwość umieszczenia w zmiennych typu bazowego obiektu (referencji) klasy wyprowadzonej. Można to porównać do dziedziczenia miejsca: tam gdzie przewidujemy przechowywać obiekty klasy rodzica można umieścić także obiekty klas potomnych:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nPerson employee \u003d new Worker(\n                  \"Adam\",\n                  \"Kowalski\",\n                  LocalDate.of(1978, 10,19),\n                  \"magazynier\",\n                  2400.0);\nPerson wife \u003d new Person(\n              \"Zofia\",\n              \"Nowak\",\n              LocalDate.of(1978, 10,19));\nSystem.out.println(w);\nSystem.out.println(p);\n  \u003c/code\u003e\n\u003c/pre\u003e\n  \u003cp\u003e\n    Obie zmienne są typu \u003csamp\u003ePerson\u003c/samp\u003e, ale dzięki dziedziczeniu do zmiennej\n    \u003csamp\u003eemployee\u003c/samp\u003e można przypisać obiekt klasy wyprowadzonej z \u003csamp\u003ePerson\u003c/samp\u003e czyli \u003csamp\u003eWorker\u003c/samp\u003e.\n \u003cp\u003e\n    Referencja \u003ccode\u003eemployee\u003c/code\u003e ma typ \u003ccode\u003ePerson\u003c/code\u003e, ale przechowuje obiekt \u003ccode\u003eWorker\u003c/code\u003e. Nie mamy dostępu do pola \u003ccode\u003esalary\u003c/code\u003e. Żeby móc się odowołać do  składowych klasy \u003ccode\u003eWorker\u003c/code\u003e musimy zrzutować zmienną referencyjną \u003ccode\u003eemployee\u003c/code\u003e na rzeczywisty typ tej zmiennej:\n  \u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nWorker w \u003d (Worker) employee;\nSystem.out.println(w.salary);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003ch1\u003eKlasa Object i nadpisywanie - overriding\u003c/h1\u003e\n\u003cp\u003e\n  Podobny efekt ja w poprzedniej cześci, możemy uzyskać inną metodą:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  Object employee \u003d new Worker(\n                    \"Adam\",\n                    \"Kowalski\",\n                    LocalDate.of(1978, 10,19),\n                    \"magazynier\",\n                    2400.0);\n  Object wife \u003d new Person(\n                \"Zofia\",\n                \"Nowak\",\n                LocalDate.of(1978, 10,19));\n  System.out.println(employee);\n  System.out.println(wife);\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Typ \u003csamp\u003eObject\u003c/samp\u003e jest klasą, którą niejawnie dziedzczy każda definiowana klasa, dlatego działanie tego przykładu jest identyczne z poprzednim. Klasa \u003csamp\u003eObject\u003c/samp\u003e ma metodę \u003csamp\u003etoString()\u003c/samp\u003e, którą\n  zdefiniowaliśmy także w klasach \u003csamp\u003ePerson\u003c/samp\u003e i \u003csamp\u003eWorker\u003c/samp\u003e. Definiowanie\n  odziedziczonych metod w klasach potomnych to \u003ci\u003e\u003cb\u003enadpisywanie\u003c/b\u003e\u003c/i\u003e (ang. \u003ci\u003emethod overriding\u003c/i\u003e).\n    Stosowane są także inne określenia jak przesłanianie lub przedefiniowanie.\n  Aby nadpisanie się powiodło sygnatura nadpisywanej metody, czyli nazwa funkcji, argumenty i typ zwracany, muszą pasować do metody z klasy bazowej.\n  W przypadku pomyłki zostanie zdefiniowana nowa metoda, a nie przedefiniowanie odziedziczonej.\n    Popatrzmy\n  na przykład takiej pomyłki:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  public class Person {\n    public String firstName;\n    public String lastName;\n    public LocalDate birthDate;\n\n      public Person(String firstName, String lastName, LocalDate birthDate) {\n        this.firstName \u003d firstName;\n        this.lastName \u003d lastName;\n        this.birthDate \u003d birthDate;\n      }\n\n      public String tostring(){\n      return firstName +\" \"+lastName+\" \"+birthDate;\n}\n...\nObject wife \u003d new Person(\n                \"Zofia\",\n                \"Nowak\",\n                LocalDate.of(1978, 10,19));\nSystem.out.println(wife);\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W efekcie tej pomyłki zostanie wyświetlony komunikat:\n\u003c/p\u003e\n\u003csamp\u003ePerson@4aa298b7\u003c/samp\u003e\n\u003cp\u003eJest to wynikiem działania metody \u003csamp\u003etoString()\u003c/samp\u003e odziedziczonej i zdefiniowanej w klasie\n    \u003csamp\u003eObject\u003c/samp\u003e, a nie naszej nadpisanej w klasie \u003csamp\u003ePerson\u003c/samp\u003e.\nTego typu pomyłki są trudne czasem do wykrycia, dlatego w celu zasygnalizowania intencji programisty,\nczy dana metoda jest nadpisywana czy też nowo definiowana stosuje się adnotację \u003csamp\u003e@Override\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  public class Person {\n    public String firstName;\n    public String lastName;\n    public LocalDate birthDate;\n\n      public Person(String firstName, String lastName, LocalDate birthDate) {\n        this.firstName \u003d firstName;\n        this.lastName \u003d lastName;\n        this.birthDate \u003d birthDate;\n      }\n      @Override\n      public String tostring(){\n      return firstName +\" \"+lastName+\" \"+birthDate;\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eUmieszczenie adnotacji spowoduje wygenerowanie błędu podczas uruchomienia programu z komunikatem, że\nmetoda oznaczona adnotacją nie nadpisuje metody z superklasy. Nie pozostaje nic innego jak poprawić błąd:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  public class Person {\n    public String firstName;\n    public String lastName;\n    public LocalDate birthDate;\n\n      public Person(String firstName, String lastName, LocalDate birthDate) {\n        this.firstName \u003d firstName;\n        this.lastName \u003d lastName;\n        this.birthDate \u003d birthDate;\n      }\n      @Override\n      public String toString(){\n        return firstName +\" \"+lastName+\" \"+birthDate;\n      }\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 2",
              "stepic_id": 0,
              "task_files": {
                "src/Employee.java": {
                  "name": "src/Employee.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\npublic class Employee extends Person{\n  private String position;\n  private double salary;\n\n  public Employee(String firstName, String lastName, LocalDate birthDate, String position, double salary) {\n    super(firstName, lastName, birthDate);\n    this.position \u003d position;\n    this.salary \u003d salary;\n  }\n\n  public double getSalary(){\n    return salary;\n  }\n\n  @Override\n  public String toString() {\n    return \"Employee{\" +\n            \"position\u003d\u0027\" + position + \u0027\\\u0027\u0027 +\n            \", salary\u003d\" + salary +\n            \", firstName\u003d\u0027\" + firstName + \u0027\\\u0027\u0027 +\n            \", lastName\u003d\u0027\" + lastName + \u0027\\\u0027\u0027 +\n            \", birthDate\u003d\" + birthDate +\n            \u0027}\u0027;\n  }\n}\n"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Person{\n  public String firstName;\n  public String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return \"Person{\" +\n            \"firstName\u003d\u0027\" + firstName + \u0027\\\u0027\u0027 +\n            \", lastName\u003d\u0027\" + lastName + \u0027\\\u0027\u0027 +\n            \", birthDate\u003d\" + birthDate +\n            \u0027}\u0027;\n  }\n}"
                },
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\npublic class Task {\n  public static \u003ctyp\u003e team[] \u003d \u003cutwórz tablicę\u003e;\n  public static Employee wife;\n\n  public static void main(String[] args) {\n    team[0] \u003d new Person(\"ADAM\",\"KOŁEK\", LocalDate.of(2000,10,10));\n    team[1] \u003d new Employee(\"IRENA\",\"OCHÓCKA\", LocalDate.of(1960,11,23),\"żona prezesa\",20000);\n    System.out.println(team[0]);\n    System.out.println(team[1]);\n    //przypisz do zmiennej wife obiekt z team[1]\n\n    System.out.println(wife.getSalary());\n  }\n}\n"
                }
              },
              "test_files": {
                "test/TestTask.java": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestTask{\n  @Test\n  public void testCustomer() {\n    assertTrue(\"Typ tablicy team niepoprawny.\", Task.team instanceof Person[]);\n    assertEquals(\"Niepoprawna wartość zmiennej wife.\",Task.wife, Task.team[1]);\n  }\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n   Zdefiniowane są dwie klasy; \u003ccode\u003ePerson\u003c/code\u003e i  wyprowadzona z niej \u003ccode\u003eEmployee\u003c/code\u003e.\n   W pliku \u003csamp\u003eTask\u003c/samp\u003e w miejscu znacznika \u003csamp\u003e\u0026lt;typ\u0026gt;\u003c/samp\u003e wstaw odpowiedni typ tablicy \u003ccode\u003eteam\u003c/code\u003e a po drugiej stronie uzupełnij kod tworzący tablicę, tak aby pozostała część kodu wykonała się poprawnie. Następnie w miejscu komentarza lub pod nim przypisz wartość pola \u003ccode\u003ewife\u003c/code\u003e drugim elementem tablicy \u003ccode\u003eteam\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eOdwołanie do klasy bazowej - słowo \u003csamp\u003esuper\u003c/samp\u003e\u003c/h1\u003e\n\u003cp\u003e\nPrzyjrzyjmy się konstruktorowi klasy \u003csamp\u003eWorker\u003c/samp\u003e:\n\u003c/p\u003e\n  \u003cpre\u003e\n  \u003ccode\u003e\n  class Worker extends Person{\n    ...\n\n    public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {\n    this.lastName \u003d lastName;\n    this.firstName \u003d firstName;\n    this.birthDate \u003d birthDate;\n    this.position \u003d position;\n    this.salary \u003d salary;\n    }\n\n    ...\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Pierwsze trzy wiersze to powtórzenie zawartości konstruktora klasy \u003csamp\u003ePerson\u003c/samp\u003e, który\n  można wywołać stosując słowo kluczowe \u003csamp\u003esuper\u003c/samp\u003e, które zastępuje nazwę klasy, z której następuje dziedziczenie:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Worker extends Person{\n    ...\n\n    public Worker(String firstName, String lastName, LocalDate birthDate, String position, double salary) {\n    super(firstName, lastName, birthDate);\n    this.position \u003d position;\n    this.salary \u003d salary;\n    }\n\n    ...\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Posługując sie tym słowem, można także uprościć ciało metody \u003csamp\u003etoString()\u003c/samp\u003e wywołując\n  metodę \u003csamp\u003etoString()\u003c/samp\u003e zdefiniowaną w klasie \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Worker extends Person{\n    ...\n    public String toString(){\n        return super.toString()+\" \"+position+\" \"+salary;\n    }\n\n  }\n  \u003c/code\u003e\n  \u003cp\u003e\n  \u003c/p\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Cześć 4",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Person {\n  protected String firstName;\n  protected String lastName;\n\n  public Person(){\n    firstName \u003d \"brak\";\n    lastName \u003d \"brak\";\n  }\n\n  public Person(String firstName, String lastName){\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n  }\n}\n\nclass Worker extends Person{\n  String position;\n\n\n  public Worker(String position){\n    this.position \u003d position;\n  }\n\n  public String toString(){\n    return firstName+\" \"+lastName+\" \"+position;\n  }\n}\n\nclass Task {\n public static void main(String[] args){\n   Worker w \u003d new Worker(\"magazynier\");\n   System.out.println(w);\n }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTworzenie obiektów klas pochodnych\u003c/h1\u003e\n\u003cp\u003e\n  Kolejność operacji wykonywanych w trakcie inicjacji obiektu klasy pochodnej jest następująca:\n  \u003cul\u003e\n  \u003cli\u003e\n    wywołanie konstruktora klasy pochodnej,\n  \u003c/li\u003e\n  \u003cli\u003e\n    jeśli pierwszą instrukcją konstruktora jest \u003csamp\u003esuper(args) \u003c/samp\u003eto wykonywany\n    jest odpowiedni konstruktor klasy bazowej,\n  \u003c/li\u003e\n  \u003cli\u003e\n    w przypadku braku \u003csamp\u003esuper\u003c/samp\u003e wykonywany jest niejawnie konstruktor\n    bezparametrowy klasy bazowej,\n  \u003c/li\u003e\n  \u003cli\u003e\n    wykonywane są instrukje konstruktora klasy pochodnej.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Popatrzmy na przykład klasy \u003csamp\u003ePerson\u003c/samp\u003e i \u003csamp\u003eWorker\u003c/samp\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Person {\n    String firstName;\n    String lastName;\n\n    public Person(){\n      firstName \u003d \"brak\";\n      lastName \u003d \"brak\"\n    }\n\n    public Person(String firstName, String lastName){\n      this.firstName \u003d firstName;\n      this.lastName \u003d lastName;\n    }\n  }\n\n  class Worker extends Person{\n    String position;\n\n    public Worker(String position){\n      this.position \u003d position;\n    }\n\n    @Override\n    public String toString(){\n      return firstName+\" \"+lastName+\" \"+position;\n    }\n  }\n\n  ...\n\n  Worker w \u003d new Worker(\"magazynier\");\n  System.out.println(w);\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W efekcie zostanie wyświetlony napis:\n\u003c/p\u003e\n\u003csamp\u003e\n  brak brak magazynier\n\u003c/samp\u003e\n\u003cp\u003e\n  Ponieważ w konstruktorze klasy \u003csamp\u003eWorker\u003c/samp\u003e brak wywołania konstruktora klasy\n  \u003csamp\u003ePerson\u003c/samp\u003e przez \u003csamp\u003esuper(firstName, lastName)\u003c/samp\u003e, to niejawnie został\n  wywołany konstruktor bezparametrowy, w którym polom \u003csamp\u003efirstName\u003c/samp\u003e i\n  \u003csamp\u003elastName\u003c/samp\u003e przypisany został napis \"brak\" i stąd taki efekt.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Cześć 5",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Person{\n  protected String name;\n\n  public Person(String name){\n    this.name \u003d name;\n  }\n\n  public Person(){\n  }\n\n  public String getName(){\n    return name;\n  }\n}\n\nclass Worker extends Person{\n  protected char[] name;\n\n  public Worker(char[] name){\n    this.name \u003d name;\n  }\n\n  public String getName(){\n    return new String(name);\n  }\n}\n\nclass Task {\n  public static void main(String[] args) {\n    Person p \u003d new Worker(\"Adam\".toCharArray());\n    System.out.println(p.getName());\n    System.out.println(p.name);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePokrywanie składowych\u003c/h1\u003e\n\u003cp\u003e\n    Kolejnym elementem dziedziczenia jest możliwość pokrywania pól i metod statycznych.\n    W klasie pochodnej możemy dodać pole o identycznej nazwie ale innym typie i tym samym\n    tracimy możliwość odwoływania się do odpowiedniego pola z klasy bazowej.\n    W przypadku metod statycznych pokrycie polega na zdefiniowaniu metody z klasy bazowej o takiej samej sygnaturze w klasie pochodnej.\n\u003c/p\u003e\n\u003cp\u003e\n    Możliwe jest także zadeklarowanie pola o tej samej nazwie co w klasie bazowej.\n    W klasie \u003csamp\u003eWorker\u003c/samp\u003e zmienimy typ odziedziczonego pola \u003csamp\u003ename\u003c/samp\u003e na \u003csamp\u003echar[]\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Person{\n  protected String name;\n  public Person(String name){\n    this.name \u003d name;\n  }\n\n  public Person(){\n  }\n\n  public String getName(){\n    return name;\n  }\n}\n\nclass Worker extends Person{\n  protected char[] name;\n  public Worker(char[] name){\n    this.name \u003d name;\n  }\n\n  public String getName(){\n    return new String(name);\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Person p \u003d new Worker(\"Adam\".toCharArray());\n    System.out.println(p.getName());\n    System.out.println(p.name);\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Efektem programu jest są napisy:\n\u003c/p\u003e\n\u003csamp\u003e\n    Adam\u003cbr\u003e\n    null\n\u003c/samp\u003e\n\u003cp\u003e\n    Przykład ten ilustruje, że pole \u003csamp\u003ename\u003c/samp\u003e klasy \u003csamp\u003eWorker\u003c/samp\u003e to inne pole niż \u003csamp\u003ename\u003c/samp\u003e\n    z klasy \u003csamp\u003ePerson\u003c/samp\u003e. Przykrycie powoduje, że chociaż zostało ono odziedziczone, to nie można się do\n    niego odwołać dla obiektu klasy \u003csamp\u003eWorker\u003c/samp\u003e. Ponieważ referencja \u003csamp\u003ep\u003c/samp\u003e jest typu\n    \u003csamp\u003ePerson\u003c/samp\u003e, więc odwołanie \u003csamp\u003ep.name\u003c/samp\u003e dotyczyło pola z klasy \u003csamp\u003ePerson\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Gdy odwołaliśmy się do metody \u003csamp\u003egetName()\u003c/samp\u003e to wybrana została metoda zgodna nie z typem referencji\n    ale z typem obiektu, dlatego została wywołana metoda należąca do klasy \u003csamp\u003eWorker\u003c/samp\u003e i\n    otrzymaliśmy poprawny wynik, pomimo przykrycia pola \u003csamp\u003ename\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 6",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Box{\n  final int width;\n  final int height;\n\n  public Box(int width, int height){\n    this.width \u003d width;\n    this.height \u003d height;\n  }\n\n  final public Box extend(int dw, int dh){\n    return new Box(width+dw, height+dh);\n  }\n}\n\nclass Cube extends Box{\n  final int depth;\n\n  public Cube(int w, int h, int d){\n    super(w, h);\n    this.depth \u003d d;\n  }\n  //to nie jest metoda odziedziczona - inny typ zwracany\n  public Cube extend(int dw, int dh, int dd){\n    return new Cube(width + dw, height+dh, depth + dd);\n  }\n  //sygnatura metody odziedziczonej - nie można nadpisać bo jest\n  public Box extend(int dw, int dd){\n      return new Box( width + dw, depth + dd);\n  }\n}\n\nclass Task {\n  static public void main(String[] args){\n    Box b \u003d new Box(1, 4);\n    b \u003d b.extend(2,5);\n    System.out.println(b.height+\" \"+ b.width);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eBlokowanie dziedziczenia\u003c/h1\u003e\n\u003cp\u003e\n    Posługując się słowem kluczowym \u003csamp\u003efinal\u003c/samp\u003e można zablokować możliwość\n    dziedziczenia klasy lub nadpisywania metod. Wiele klas bibliotecznych jest definniowanych\n    jako \u003csamp\u003efinal\u003c/samp\u003e np. java.lang.String.\n\u003c/p\u003e\n\u003cp\u003e\n    Przykład klasy finalnej:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nfinal class Point {\n    final int x;\n    final int y;\n    public Point(int x, int y){\n        this.x \u003d x;\n        this.y \u003d y;\n    }\n}\n        \u003c/code\u003e\n    \u003c/pre\u003e\n\u003cp\u003e\n    Przykład klasy z metodą finalną:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Box{\n  final int width;\n  final int height;\n\n  public Box(int width, int height){\n    this.width \u003d width;\n    this.height \u003d height;\n  }\n\n  final public Box extend(int dw, int dh){\n    return new Box(width+dw, height+dh);\n  }\n}\n\nclass Cube extends Box{\n  final int depth;\n\n  public Cube(int w, int h, int d){\n    super(w, h);\n    this.depth \u003d d;\n  }\n\n  public Cube extend(int dw, int dh, int dd){\n    return new Cube(width + dw, height+dh, depth + dd);\n  }\n\n  public Box extend(int dw, int dd){\n      return new Box( width + dw, depth + dd);\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eW przykładzie zablokowana została metoda \u003csamp\u003eextend\u003c/samp\u003e przed nadpisaniem w\nklasach pochodnych. W klasie \u003csamp\u003eCube\u003c/samp\u003e wyprowadzonej z \u003csamp\u003eBox\u003c/samp\u003e\n    zdefiniowano \u003csamp\u003eextend\u003c/samp\u003e, ale nie jest to nadpisanie, gdyż ma inną sygnaturę.\u003c/p\u003e\n\u003cp\u003ePróba nadpisania metody finalnej spowoduje wygenerowanie błędu kompilacji:\u003c/p\u003e\n\u003csamp\u003e\n    Error:(27, 14) java: extend(int,int) in Cube cannot override extend(int,int) in Box\n    overridden method is final\n\u003c/samp\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Podsumowanie",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Podsumowanie wiadomości o dziedziczeniu w Java:\n  \u003cul\u003e\n  \u003cli\u003e\n    powoduje przejmowanie wszystkich pól i metod.\n  \u003c/li\u003e\n  \u003cli\u003e\n    w klasie pochodnej dostępne są tylko nieprywatne składowe,\n  \u003c/li\u003e\n  \u003cli\u003e\n    umożliwia przejmowanie składowych tylko z jednej klasy, nie można dziedziczyć po wielu klasach,\n  \u003c/li\u003e\n  \u003cli\u003e\n    każda klasa, której nie wskażemy klasy bazowej, dziedziczy domyślnie po klasie \u003csamp\u003eObject\u003c/samp\u003e,\n  \u003c/li\u003e\n  \u003cli\u003e\n    w zmiennych typu bazowego można umieszczać obiekty klasy wyprowadzonej, czyli w miejscu rodzica\n    można umieścić obiekty potomne,\n  \u003c/li\u003e\n  \u003cli\u003e\n    przedefiniowanie odziedziczonych metod następuje przez nadpisywanie, metody nadpisywane oznaczamy\n    adnotacją \u003csamp\u003e@Override\u003c/samp\u003e a sygnatura metody w klasie pochodnej musi być identyczna\n    z metodą nadpisywaną.\n  \u003c/li\u003e\n  \u003cli\u003e\n    W klasie potomnej można odwoływać się do klasy bazowej słowem kluczowym \u003csamp\u003esuper\u003c/samp\u003e np. \u003csamp\u003e\n    super() to wywołanie konstruktora, a \u003csamp\u003esuper.metoda\u003c/samp\u003e to wywołanie metody.\n  \u003c/samp\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    Przy inicjowaniu obiektów klas pochodnych jest niejawnie wywoływany bezparametrowy konstruktor klasy\n    bazowej, jeśli w konstuktorze klasy wyprowadzonej nie ma jawnego wywołania poprzez \u003csamp\u003esuper()\u003c/samp\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    zablokowanie możliwości dziedziczenia z danej klasy polega na dodaniu słowa kluczowego \u003csamp\u003efinal\u003c/samp\u003e\n    przy deklaracji klasy.\n  \u003c/li\u003e\n  \u003cli\u003e\n    zablokowanie nadpisywania metody w klasie potomnje powoduje dodanie słowa kluczowego\n    \u003csamp\u003efinal\u003c/samp\u003e w sygnaturze metody klasy bazowej.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Klasy abstrakcyjne",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "abstract class Vehicle {\n  protected final double weight;\n  protected double mileage;\n\n  public Vehicle(double weight){\n    this.weight \u003d weight;\n  }\n  public double getMileage(){\n    return mileage;\n  }\n\n  public double getWeigth(){\n    return weight;\n  }\n}\n\nclass Car extends Vehicle{\n  private final double power;\n  private final double fuelCapacity;\n  private double fuelLevel;\n\n  public Car(double weight, double power, double fuelCapacity) {\n    super(weight);\n    this.fuelCapacity \u003d fuelCapacity;\n    this.power \u003d power;\n  }\n\n  public double getFuelLevel(){\n    return fuelLevel;\n  }\n}\n\npublic class Task{\n  static public void main(String[] args){\n    Vehicle car \u003d new Car(1000, 100, 50);\n    System.out.println(car.getWeigth());\n  }\n}\n"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n    KLasy abtrakcyjne to inaczej klasy uogólniające, które służą jedynie do budowy klasa bazowych. nie jest\n    możliwe tworzenie obiektów takich klas, można jedynie ich używać do dziedziczenia.\n\u003c/p\u003e\n\u003cp\u003e\n    Przykład klasy abstrakcyjnej:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic abstract class Vehicle {\n  protected final double weight;\n  protected double mileage;\n\n  public Vehicle(double weight){\n     this.weight \u003d weight;\n  }\n  public double getMileage(){\n    return mileage;\n  }\n\n  public double getWeigth(){\n   return weigth;\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eVehicle\u003c/samp\u003e posłuży do budowy klas konkretnych pojazdów:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic class Car extends Vehicle{\n  private final double power;\n  private final double fuelCapacity;\n  private double fuelLevel;\n\n  public Car(double weight, double power, double fuelCapacity) {\n    super(weight);\n    this.fuelCapacity \u003d fuelCapacity;\n    this.power \u003d power;\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W klasie abtrakcyjnej pola, które mają być dziedziczone nie mogą być prywatne, dlatego pola\n    \u003csamp\u003eweight\u003c/samp\u003e i \u003csamp\u003emileage\u003c/samp\u003e są typu \u003csamp\u003eprotected\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Aby utworzyć obiekt typu \u003csamp\u003eCar\u003c/samp\u003e można posłużyć się referencją do klasy bazowej:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nVehicle car \u003d new Car(10, 100, 45);\nSystem.out.println(car.getWeigth());\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Każda próba zastosowania operatora new dla klasy abstrakcyjnej spowoduje wygenerowanie błędu podczas kompilacji:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n        Vehicle car \u003d new Vahicle(1000);\n\n        --\n        Error:(35, 19) java: Vehicle is abstract; cannot be instantiated\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  W klasach abtrakcyjnych można także umieszczać metody abtrakcyjne, które nie są w niej definiowane.\n  Klasa dziedzicząca po klasie abtrakcyjne ma obowiązek zdefiniować wszyskie takie metody.\n  Metody abtrakcyjne są metodą tworzenia interfejsu, czy zbioru zachowań, które muszą realizować\n  wszystkie klasy potomne.\n\u003c/p\u003e\n\u003cp\u003e\n  Wróćmy do klasy \u003csamp\u003eVehicle\u003c/samp\u003e, w której zdefiniujmy dwie metody abstrakcyjne \u003csamp\u003estart()\u003c/samp\u003e i \u003csamp\u003estop()\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\npublic abstract class Vehicle {\n  protected double weight;\n  protected double mileage;\n\n  public Vehicle(double weight){\n    this.weight \u003d weight;\n  }\n\n  public abstract void start();\n\n  public abstract void stop();\n\n  public double getMileage(){\n    return mileage;\n  }\n\n  public double getWeigth(){\n    return weigth;\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Metoda abstrakcyjna zawiera jedynie nagłówek zawierający typ zwracany, nazwę i listę argumentów, nie\n  ma natomiast bloku z instrukcjami.\n\u003c/p\u003e\n\u003cp\u003eKlasa \u003csamp\u003eCar\u003c/samp\u003e musi teraz zdefiniować obie metody abstrakcyjne:\n\u003cpre\u003e\n  \u003ccode\u003e\npublic class Car extends Vehicle{\n  private double power;\n  private double fuelCapacity;\n  private double fuelLevel;\n\n  public Car(double weight, double power, double fuelCapacity) {\n      super(weight);\n      this.fuelCapacity \u003d fuelCapacity;\n      this.power \u003d power;\n  }\n\n  @Override\n  public void start() {\n      System.out.println(\"The car is moving\");\n  }\n\n  @Override\n  public void stop() {\n      System.out.println(\"The car stops\");\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Jeśli utworzymy kolejne klasy konkretnych pojazdów jak \u003csamp\u003eBicycle\u003c/samp\u003e, \u003csamp\u003eTrain\u003c/samp\u003e,\n  to każda z klas, będzie musiała zdefiniować obie metody abstrakcyjne (przyjmijmy, że będzie to\n  tylko wyświetlanie podobnego komunkatu jak w klasie Car).\n\u003c/p\u003e\n\u003cp\u003e\n  Wszystie metody zdefiniowane w klasie abtrakcyjnej pełnią rolę interfejsowych, gdyż możemy teraz tworzyć\n  obiekty każdej konkretnej klasy i przypisać je do referencji typu klasy bazowej \u003csamp\u003eVehicle\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    Vehicle[] vehicles \u003d new Vehicle[3];\n    vehicle[0] \u003d new Car(1200, 100, 45);\n    vehicle[1] \u003d new Bicycle(15);\n    vehicle[2] \u003d new Train(25000);\n    for(Vehicle v: vehicles){\n      System.out.println(v.start());\n      System.out.println(v.stop());\n      System.out.println(v.getWeight());\n    }\n\n    ---\n    The car is moving\n    The car stops\n    1200\n    The bicycle is moving\n    The bicycle stops\n    15\n    The train is moving\n    The train stops\n    25000\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "abstract class Vehicle {\n  protected final double weight;\n  protected double mileage;\n\n  public Vehicle(double weight){\n    this.weight \u003d weight;\n  }\n  public double getMileage(){\n    return mileage;\n  }\n\n  public double getWeigth(){\n    return weight;\n  }\n  public abstract void start();\n  public abstract void stop();\n}\n\nclass Car extends Vehicle{\n  private final double power;\n  private final double fuelCapacity;\n  private double fuelLevel;\n\n  public Car(double weight, double power, double fuelCapacity) {\n    super(weight);\n    this.fuelCapacity \u003d fuelCapacity;\n    this.power \u003d power;\n  }\n\n  public double getFuelLevel(){\n    return fuelLevel;\n  }\n\n  @Override\n  public void start() {\n    System.out.println(\"The car starts moving\");\n  }\n\n  @Override\n  public void stop() {\n    System.out.println(\"The car stops\");\n  }\n}\n\nclass Bicycle extends Vehicle{\n  private int gears;\n\n  public Bicycle(double weight, int gears) {\n    super(weight);\n    this.gears \u003d gears;\n  }\n\n  @Override\n  public void start() {\n    System.out.println(\"The bike starts moving\");\n  }\n\n  @Override\n  public void stop() {\n    System.out.println(\"The bike stops\");\n  }\n}\n\nclass Train extends Vehicle{\n\n  private double power;\n\n  public Train(double weight, double power) {\n    super(weight);\n    this.power \u003d power;\n  }\n\n  @Override\n  public void start() {\n    System.out.println(\"The train starts moving\");\n  }\n\n  @Override\n  public void stop() {\n    System.out.println(\"The train stops\");\n  }\n}\n\npublic class Task{\n  static public void main(String[] args){\n    Vehicle[] vehicles \u003d new Vehicle[3];\n    vehicles[0] \u003d new Car(1200, 100, 50);\n    vehicles[1] \u003d new Bicycle(15, 5);\n    vehicles[2] \u003d new Train(250000, 1000);\n    for(Vehicle v: vehicles){\n      v.start();\n      if (v instanceof Car)\n        System.out.println(\"The fule level in car \u003d \" +((Car) v).getFuelLevel());\n    }\n  }\n}\n"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003einstanceof\u003c/h1\u003e\n\u003cp\u003e\n  Po przypisaniu do referencji klasy bazowej obiekt klasy potomnej, możemy odwoływać się tylko do metod\n  klasy bazowej ale tracimy dostęp do metod dadonych klasie potomnej.\n  Można przywrócić właściwą referencję poprzez rzutowanie. Pojawia się jednak pytanie skąd zdobyć informację\n  jakiego właściwego typu jest referencja. Do testowania czy referencja jest danego typu służy operator\n  \u003csamp\u003einstanceof\u003c/samp\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Klasa \u003csamp\u003eCar\u003c/samp\u003e ma dodaną metodę \u003csamp\u003egetFuelLevel()\u003c/samp\u003e do odczytywania poziomu zatankowanego paliwa\u003c/p\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  public class Car extends Vehicle{\n    private double power;\n    private double fuelCapacity;\n    private double fuelLevel;\n\n    public Car(double weight, double power, double fuelCapacity) {\n        super(weight);\n        this.fuelCapacity \u003d fuelCapacity;\n        this.power \u003d power;\n    }\n\n    @Override\n    public void start() {\n        System.out.println(\"The car is moving\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"The car stops\");\n    }\n\n    public double getFuelLevel(){\n      return fuelLevel;\n    }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eW poprzednim przykładzie umieścilismy obiekty wszystkich klas wyprowadzonych z \u003csamp\u003eVehicle\u003c/samp\u003e w tablicy\ntego typu:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    Vehicle[] vehicles \u003d new Vehicle[3];\n    vehicle[0] \u003d new Car(1200, 100, 45);\n    vehicle[1] \u003d new Bicycle(15);\n    vehicle[2] \u003d new Train(25000);\n    for(Vehicle v: vehicles){\n      System.out.println(v.start());\n      System.out.println(v.stop());\n      System.out.println(v.getWeight());\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W pętli \u003csamp\u003eforeach\u003c/samp\u003e odczytujemy kolejne obiekty i wywołujemy metody z klasy bazowej. Jeśli\n  chcielibyśmy odczytać stan paliwa to możliwe będzie to tylko dla obietów typu \u003csamp\u003eCar\u003c/samp\u003e. Żeby rozpoznać\n  który z elmentów tablicy \u003csamp\u003evehicle\u003c/samp\u003e jest takim obiektem zsotujemy operator \u003csamp\u003einstanceof\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  for(Vehicle v: vehicles){\n    v.start();\n    if (v instanceof Car)\n      System.out.println(\"The fule level in car \u003d \" +((Car) v).getFuelLevel());\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  wyrażenie \u003csamp\u003ev instanceof Car\u003c/samp\u003e zwraca wartość \u003csamp\u003etrue\u003c/samp\u003e, gdy obiet \u003csamp\u003ev\u003c/samp\u003e jest klasy\n  \u003csamp\u003eCar\u003c/samp\u003e. Po upewnieniu się jakiej klasy jest obiekt możemy wykonać rzutowanie na właściwą klasę\n  \u003csamp\u003e(Car) v\u003c/samp\u003e, a potem wywołać metodę tej klasy \u003csamp\u003e((Car) v).getFuelLevel()\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Polimorfizm",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\nPolimorfizm, inaczej wielopostaciowość, to mechanizm, z którym już spotkaliśmy się.\n    Popatrzmy na prosty przykład dwóch wyrażeń:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    int liczba \u003d 12;\n    String str \u003d \"12\";\n    System.out.println(liczba + 12);\n    System.out.println(str+12);\n\n    --\n    24\n    1212\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nW obu wyrażeniach wykorzystaliśmy ten sam operator \u0027+\u0027, ale wyniki obu działń są różne.\nOperator + jest polimorficzny, gdyż wykonuje dwa różne działania: dla typów prostych\n    liczbowych wykonuje arytemtyczne dodawania, a w sytuacji, gdy jednym z operandów\n    jest łańcuch wykonywana jest konkatenacja z zamienionym na łańcuch drugim operandem.\nZatem polimorfizm do różne działanie tego samego operatora lub metody w zależności od kontekstu.\n\u003c/p\u003e\n\u003cp\u003e\n    Z polimorfizmem metod spotkaliśmy się już kilkukrotnie omawiając dziedziczenie i klasy abstrakcyjne.\n    Dla przypomnienia wywoływanie metod toString() obiektów róznych klas jest przykładem polimorfizmu,\n    gdyż każdy z obiektów innaczej ją realizuje. Także metody start() i stop() w klasie abstrakcyjne, a następnie\n    definiowane w klasach Car, Bicycle i Train są także polimorficzne.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eRodzaje polimorfizmu\u003c/h1\u003e\n\u003cp\u003e\n  Rozróżnia się dwa rodzaje polimorfizmu:\n  \u003cul\u003e\n  \u003cli\u003e\n    statyczny\n  \u003c/li\u003e\n  \u003cli\u003e\n    dynamiczny\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\n\u003cp\u003e\n  Przykładem polimorfizmu statycznego jest opisany operator \u0027+\u0027, gdyż już\n  na podstawie wyrażenia i typu jego operandów można przewidzić jakie zostanie wykonane zachowanie\n  i to zachowanie nie zmieni się w trakcie działania programu.\n\u003cp\u003e\n  Szczególnym rodzajem polimorfizmu jest przeładowanie metody (ang. overriding), z czym skotkaliśmy się\n  przy okazji definiowania konstruktorów. Tam określenie, który konstruktor jest wywoływany,\n  następowało na podstawie typu argumentu.\n\u003c/p\u003e\n  W przypadku polimorfizm dynamicznego określenie, które działanie dla danej metody jest wywoływane,\nnastępuje dopiero podczas działania programu. Wnioskowanie następuje na podstawie rzeczywistej klasy\nobiektu, na rzecz którego wywoływan jest metoda polimorficzna.\n\u003c/p\u003e\n\u003cp\u003e\n  Popatrzmy na poniższy przykład:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    Scanner input \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz nazwę klasy:\");\n    String klasa \u003d input.nextLine();\n    Vehicle pojazd \u003d null;\n    switch(klasa){\n      case \"Car\":\n        pojazd \u003d new Car(1200, 145, 50);\n        break;\n      case \"Bicycle\":\n        pojazd \u003d new Bicycle(15, 3);\n        break;\n    }\n\n    if (pojazd !\u003d null)\n      pojazd.start();\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  To co znajdzie się w zmiennej \u003csamp\u003epojazd\u003c/samp\u003e, zależy od użytkownika, więc na etapie opacowywania programu\n  nie wiadomo, która metoda \u003csamp\u003epojazd.start()\u003c/samp\u003e zostanie wywołana. Dopiero w trakcie działania programu\n  zostanie utworzony obiekt i przypisany do zmiennej. Wtedy też zostanie wybrana właściwa metoda\n  \u003csamp\u003estart()\u003c/samp\u003e. Informacji tej dostarcza rzeczywisty typ obiektu zwrócony przez operator \u003csamp\u003enew\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Agregacja i kompozycja",
          "task_list": [
            {
              "name": "Agregacja",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\nChoć z terminem tym dotąd nie spotkaliśmy się, to wiele\nprzykładów klas korzystało z tego rozwiązania.\nPrzypomnijmy klasę \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\npublic class Person {\n    public String firstName;\n    public String lastName;\n    public LocalDate birthDate;\n\n    public Person(String firstName, String lastName, LocalDate birthDate) {\n        this.firstName \u003d firstName;\n        this.lastName \u003d lastName;\n        this.birthDate \u003d birthDate;\n    }\n\n    public String toString(){\n        return firstName +\" \"+lastName+\" \"+birthDate;\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Agregacja to zawieranie się obiektów innych\n    klas w definiowanej klasie. W przykładzie\n    wszystkie pola są obiektami klas: \u003csamp\u003eString\u003c/samp\u003e i \u003csamp\u003eLocalDate\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Kompozycja",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Engine{\n  final double nominalPwer;\n  public Engine(double pnominalPower){\n    this.nominalPwer \u003d pnominalPower;\n  }\n}\n\nclass Car{\n  private Engine engine;\n  String name;\n  public Car(double power){\n    this.engine \u003d new Engine(power);\n  }\n\n  public String start(){\n    if (engine !\u003d null){\n      return \"Start\";\n    } else {\n      return \"Can\u0027t start,no engine\";\n    }\n  }\n}\n\nclass Task {\n  public static void main(String[] args) {\n\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\nSzczególnym rodzajem agregacji jest kompozycja, gdy obiekty składowe mogą istnieć tylko\nw obiekcie je zawierającym, tak jak i istnienie obiektu nadrzędnego nie ma sensu bez\njego obiektów składowych. Przykładem może być silnik i samochód. Istnienie silnika\nbez samochodu nie ma sensu, bo jego przeznaczeniem jest napędzanie samochodu, jest\njego składnikiem. Samochód bez silnika przestaje być samochodem, jest niekompletny.\n\u003c/p\u003e\n\u003cp\u003e\n  Jednocześnie nie należy mylić kompozycji z agregacją. Przykładowo klasa \u003csamp\u003ekontener na butelki\u003c/samp\u003e\n  i \u003csamp\u003epiwo w butelkach\u003c/samp\u003e nie są dobrym przykładem kompozycji. Sam kontener\n  może przechowywać różne butelki,\n  niekoniecznie zawierające piwo, wystarczy, że butelka będzie miała odpowiedni\n  wymiar. Piwo w butelce nie musi być przechowywane ciągle w kontenerze, może\n  potem znaleźć się w lodówce, więc może istnieć bez tego obiektu i tym samym klasy.\n\u003c/p\u003e\n\u003cp\u003e\n  W prezentowanym w poprzedniej części przykładzie zarówno typ String jak i LocalDate\n  są bardzo uniwrsalne i moga stanowić zarówno składowe innych klas jak i istnieć\n  samodzielnie, więc klasa Person jest przykładem agregacji.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Kompozycja jako alternatywa dziedziczenia",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Person {\n  protected String firstName;\n  protected String lastName;\n\n  public Person(String firstName, String lastName) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n  }\n}\n\nclass Worker extends Person{\n  protected String position;\n  protected double salary;\n\n  public Worker(String firstName, String lastName, String position, double salary){\n    super(firstName, lastName);\n    this.position \u003d position;\n    this.salary \u003d salary;\n  }\n}\n\n\nclass Task {\n  public static void main(String[] args) {\n  Person adam \u003d new Worker(\"ADAM\", \"KOWAL\", \"magazynier\", 2000);\n  System.out.println(adam.firstName);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Kompozycja (agregacja) może być częściowo alternatywą dla dziedziczenia. Popatrzmy na\n  przykład rozszerzenia klasy \u003csamp\u003eWorker\u003c/samp\u003e przy pomocy klasy \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Worker {\n    private Person personalData;\n    String position;\n    double salary;\n\n    public Worker(String firstName, String lastName, String position, double salary){\n      personalData \u003d new Person(firstName. lastName);\n      this.position \u003d position;\n      this.salary \u003d salary;\n    }\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Dane osobowe są polem typu \u003csamp\u003ePerson\u003c/samp\u003e i aby odczytać jej składowe mamy dwie możliwości:\n  \u003col\u003e\n    \u003cli\u003e\n      dodać getter zwracający cały obiekt personlData, wtedy dostęp do jego\n      pól zależy od getterów klasy \u003csamp\u003ePerson\u003c/samp\u003e.\n    \u003c/li\u003e\n  \u003cli\u003e\n    dodać gettery dla każdego pola klasy \u003csamp\u003ePerson\u003c/samp\u003e, wtedy klasa Worker\n    w pełni kontroluje dane.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eW pierwszym przypadku definiujemy getter getPersonlaData, który zwraca obiekt klasy Person\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Worker {\n    private Person personalData;\n    String position;\n    double salary;\n\n    public Worker(String firstName, String lastName, String position, double salary){\n      personalData \u003d new Person(firstName. lastName);\n      this.position \u003d position;\n      this.salary \u003d salary;\n    }\n\n    public Person getPersonalData(){\n      return personalData;\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Odczyt imienia lub nazwiska wymaga teraz znajomości metod obiektu \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    Worker builder \u003d new Worker(\"ADAM\", \"NOWAK\", \"mistrz\", 2500);\n    System.out.println(builder.getPersonlaData().getFistName());\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eW drugim przypadku tworzymy dla każdego pola \u003csamp\u003epersonalData\u003c/samp\u003e metodę odczytującą każde pole\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Worker {\n    private Person personalData;\n    String position;\n    double salary;\n\n    public Worker(String firstName, String lastName, String position, double salary){\n      personalData \u003d new Person(firstName. lastName);\n      this.position \u003d position;\n      this.salary \u003d salary;\n    }\n\n    public String getFirstName(){\n      return personalData.getFirstName();\n    }\n\n    public String getLastName(){\n      return personalData.getLastName();\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eDrugie rozwiązanie wymaga więcej tworzenia kodu, ale z punktu widzenia klienta klasy jest bardzie przejrzyste.\nMa też inne zalety które, omówimy w następnym rozdziale.\u003c/p\u003e\n\u003cp\u003eStosując kompozycję utraciliśmy pewne właściwości wynikające z dziedziczenia i polimorfizmu,\nstosując interfejsy możemy odzyskać te własności.\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Hermetyzacja",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class User{\n  private String name;\n\n  public User(String name){\n    this.name \u003d name;\n  }\n\n  public String getName(){\n    return name;\n  }\n}\n\n\nclass Admin extends User{\n  private String rights;\n  public Admin(String name, String rights){\n    super(name);\n    this.rights \u003d rights;\n  }\n\n  public String getName(){\n    return super.getName();\n  }\n}\n\nclass Task {\n  public static void main(String[] args){\n    User p1 \u003d new User(\"MISIEK\");\n    User p2 \u003d new Admin(\"SUPER\", \"AAAE\");\n    System.out.println(p1.getName());\n    System.out.println(p2.getName());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Hermetyzacja to ukrywanie i zamykanie wewnętrznych mechanizmów klasy przed światem zewnętrznym. Klient korzystający\n  z naszej klasy nie powinien zaburzać działania tego co się dzieje wenątrz klasy, dlatego ukrycie i zablokowanie\n  dostępu do części pól i metod jest bardzo ważne. Celem jest stworzenie klas, które zachowują się\n  jak czarne, magiczne pudełko, które właściwie reagują tylko na udostępnione przyciski, nie dając możliwości\n  zajrzenia do środka, co mogłoby zaburzyć właściwe działanie.\n\u003c/p\u003e\n\u003cp\u003e\n  Podstawową metodą ukrywania jest stosowanie modyfikatora \u003csamp\u003eprivate\u003c/samp\u003e. Problem pojawia się\n  jednak w sytuacji, gdy chcemy budować hierarchie klas z użyciem dziedziczenia, bo mamy dostęp do odziedziczonych\n  pól z modyfiaktorem \u003csamp\u003epublic\u003c/samp\u003e lub \u003csamp\u003eprotected\u003c/samp\u003e. Tym samym dostęp do tych pól\n  mają nie tylko klasy potomne, ale także wszystkie klasy tego samego pakietu.\n\u003c/p\u003e\n\u003cp\u003eMożemy ograniczyć dostęp do wybranych pól klas bazowych definiując je jako\n  pole prywatne dodając tylko akcesor publiczny dający możliwość tylko odczytu.\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass User{\n  private String name;\n\n  public User(String name){\n    this.name \u003d name;\n  }\n\n  public String getName(){\n    return name;\n  }\n}\n\n\nclass Admin extends User{\n  private String rights;\n  public Admin(String name, String rights){\n    super(name);\n    this.rights \u003d rights;\n  }\n\n  public String getName(){\n    return super.getName();\n  }\n}\n\n...\nUser p1 \u003d new User(\"MISIEK\");\nUser p2 \u003d new Admin(\"SUPER\", \"AAAE\");\nSystem.out.println(p1.getName());\nSystem.out.println(p2.getName());\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Pomimo, że w klasie \u003csamp\u003eUser\u003c/samp\u003e pole \u003csamp\u003ename\u003c/samp\u003e jest prywatne, to widoczność zapewniliśmy definiując metodę\n  publiczną \u003csamp\u003egetName()\u003c/samp\u003e. Pole to jest dziedziczone i inicjowane konstuktorem klasy bazowej.\n  Ponieważ nie mamy żadnego bezpośredniego dostępu do tego pola w klasie \u003csamp\u003eAdmin\u003c/samp\u003e, więc dostęp\n  do niego kontroluje wyłącznie klasa bazowa. Tym samym zapewniona jest hermetyczność tego pola w klasie potomnej\n  jak i wszystkich pozostałych klasach na tym samym poziomie, a jednocześnie wykorzystaliśmy dziedziczenie.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Interfejsy",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": ""
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003e\n    Podstawy\n\u003c/h1\u003e\n\u003cp\u003e\n  Interfejsy możemy traktować jak wyspecjalizowane klasy, których zadaniem jest tylko wskazywanie innym\n  klasom jakie muszą posiadać zachowania (metody), ale nie określają jak te zachowania mają być realizowane.\n  \u003cp\u003e\n  Interfejs można porównać do klasy abstrakcyjnej, kóra posiada tylko metody abstrakcyjne. Każdy typ wyprowadzony\n  z takiej klasy musi implementować odziedziczone metody. Każda klasa wyprowadzona z takiej klasy abstrakcyjnej, posługuje\n  się tym samym językiem metod, które zostały wymienione w abstrakcyjnym typie bazowym.\n\u003c/p\u003e\n  Istotną jednak różnicą w stosunku do klasy abstrakcyjnej jest to, że klasy mogą \u0027dziedziczyć\" wiele interfejsów,\njak i to, że same interfejsy moga dziedziczyć wiele innych. Interfejsy mogą posiadać pola, jednak są on domyślnie\nstałymi.\n\u003c/p\u003e\n\u003cp\u003e\n  Rola interfejsów jest jednak znacznie szersza. O ile w dziedziczeniu klas, ten wspólny język dotyczył klas silnie ze\n  sobą związanych i bliskich, to interfejsy mogą łączyć klasy bardzo odległe. Możliwość zapewnienia drukowania,\n  zapisywania do pliku, transmisji siecią itd. może dotyczyć różnych klas.\n\u003c/p\u003e\n\u003cp\u003e\n  Zbudujmy interfejs, który będzie realizował jednolite sterowanie pojazdami:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\ninterface Driveable {\n  void start();\n  void stop();\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Słowo kluczowe \u003csamp\u003einterface\u003c/samp\u003e służy do definiowania  interfejsu, który\n  zawiera tylko sygnatury metod. Metody wymienione w intefejsie są abstrakcyjne i zawsze publiczne.\n\u003c/p\u003e\n\u003cp\u003e\n  Klasy pojazdów, którymi chcemy kierować, możemy tworzyć bez potrzeby dziedziczenia.\n  Pojazd, który ma reagować na polecenia interfejsu, musi go implementować:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Car implements Driveable{\n    double power;\n    double fuelLevel;\n    double fuelCapacity;\n    public Car(double power, double fuelCapacity){\n      this.power \u003d power;\n      this.fuelCapacity \u003d fuelCapacity;\n    }\n\n    @Override\n    public void start(){\n      System.out.println(\"The car starts moving\");\n    }\n\n    @Override\n    public void stop(){\n      System.out.println(\"The car stops\");\n    }\n  }\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Wskazanie jaki interfejs klasa ma zaimplementować odbywa się słowem kluczowym \u003csamp\u003eimplements\u003c/samp\u003e,\n  po którym możemy podawać dowolną liczbę interfejsów. W klasie obowiązkowo\n  należy zdefiniować wszystkie metody każdego podanego interfejsu. Metody implementowane\n  powinny być poprzedzone adnotacją \u003csamp\u003e@Override\u003c/samp\u003e, aby uniknąć pomyłki przy podaniu sygnatury metody.\n\u003c/p\u003e\n\u003cp\u003e\n  Zdefiniujmy kolejną klasę, która będzie implementować ten sam interfejs. Ty razem będzie to\n  klasa, której trudno by wyprowdzić z klasy \u003csamp\u003eVehicle\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Horse implements Driveable{\n    String name;\n\n    public Horse(String horse){\n      this.name \u003d name;\n    }\n\n    @Override\n    public void start(){\n      System.out.println(\"The horse starts moving\");\n    }\n\n    @Override\n    public void stop(){\n      System.out.println(\"The horse stops\");\n    }\n  }\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Podobnie jak przy dziedziczeniu, obiekty ze wspólnym interfejsem mogą być przypisane do jego referencji.\n  Popatrzmy na poniższy przykład:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  Driveable porsche \u003d new Car(245, 45);\n  Driveable horse \u003d new Horse(\"kasztanka\");\n  porsche.start();\n  horse.start();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Auto jak i koń mogą być typu ineterfejsu, choć obu zmiennym przypisane zostaną obiekty\n  różnych typów.\n\u003c/p\u003e\n\u003cp\u003e\n  Przykład ilustruje, że interfejsy wymuszają takie same działanie jak\n  dziedziczenie z klasy bazowej. Także tutaj działa polimorfizm, bo wywoływane są metody zgodne z typem obiektu,\n  a nie referencji. Istotną różnicą jest to, że metody interfejsowe w klasie bazowej moga być definiowane,\n  a w interfejsie nie. Interfejs raczej narzuca  na klasę implementującą obowiązek\n  zdefiniowanie swoich metod, podobnie jak klasa abstrakcyjna z wyłącznie metodami abstrakcyjnymi.\n\u003c/p\u003e\n\u003cp\u003eKorzyści wynikającę z interfejsu ilustruje poniższy przykład:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\ninterface Soundable{\n    String getSound();\n}\n\nclass Car implements Driveable, Soundable{\n    double power;\n    double fuelLevel;\n    double fuelCapacity;\n    public Car(double power, double fuelCapacity){\n      this.power \u003d power;\n      this.fuelCapacity \u003d fuelCapacity;\n    }\n\n    @Override\n    public void start(){\n      System.out.println(\"The car starts moving\");\n    }\n\n    @Override\n    public void stop(){\n      System.out.println(\"The car stops\");\n    }\n\n    @Override\n    public String getSound(){\n        return \"BEEB\";\n    }\n  }\n\nclass Horse implements Driveable, Soundable{\n    String name;\n\n    public Horse(String horse){\n      this.name \u003d name;\n    }\n\n    @Override\n    public void start(){\n      System.out.println(\"The horse starts moving\");\n    }\n\n    @Override\n    public void stop(){\n      System.out.println(\"The horse stops\");\n    }\n\n    @Override\n    public String getSound(){\n        return \"IHAA\";\n    }\n  }\n\n  ..\n\n  Soundable porsche \u003d new Car(245, 45);\n  Soundable horse \u003d new Horse(\"kasztanka\");\n  System.out.println(porsche.getSound());\n  System.out.println(horse.getSound());\n  ((Driveable)porsche).start();\n  ((Driveable)horse).start();\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Klasy moga implementować wiele interfejsów, co daje możliwość obiektom\n  reagować na wiele różnych zachowań.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Zadanie 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "interface Radiusable {\n\n  double getRadius();\n\n  double getAngle();\n\n  default double getPerimeter(){\n    return normalizeAngle(getAngle())*2 * Math.PI * getRadius() / (2 * Math.PI);\n  }\n\n  static double normalizeAngle(double a){\n    a \u003d Math.abs(a);\n    return a \u003e Math.PI*2 ? a - Math.round(a/(Math.PI*2)-1)*2*Math.PI : a;\n  }\n}\n\nclass Circle implements Radiusable{\n  private double radius;\n\n  public Circle(double radius){\n    this.radius \u003d radius;\n  }\n\n  @Override\n  public double getRadius() {\n    return radius;\n  }\n\n  @Override\n  public double getAngle() {\n    return Math.PI * 2;\n  }\n}\n\nclass Arc extends Circle{\n  private double angle;\n\n  public Arc(double radius, double angle){\n    super(radius);\n    this.angle \u003d angle;\n  }\n\n  public Arc(double radius){\n    super(radius);\n    this.angle \u003d 2 * Math.PI;\n  }\n\n  @Override\n  public double getAngle(){\n    return angle;\n  }\n}\n\nclass Ellipse extends Circle{\n  private double focusDistance;\n\n  public Ellipse(double radius, double focusDistance){\n    super(radius);\n    this.focusDistance \u003d focusDistance;\n  }\n\n  public Ellipse(double radius){\n    super(radius);\n    this.focusDistance \u003d radius;\n  }\n\n  @Override\n  public double getPerimeter() {\n    double a \u003d getVertex();\n    double b \u003d getCoVertex();\n    if (getRadius() \u003d\u003d focusDistance){\n      return super.getPerimeter();\n    }\n    return Math.PI * ( 3.0/2.0 * (a+b) - Math.sqrt(a*b));\n  }\n\n  public double getFocusDistance() {\n    return focusDistance;\n  }\n\n  public double getCoVertex(){\n    return Math.sqrt(getRadius()*getRadius()+focusDistance*focusDistance);\n  }\n\n  public double getVertex(){\n    return getRadius();\n  }\n}\n\nclass BestWishes{\n\n}\n\nclass Task {\n  static public void main(String[] args){\n    Circle a \u003d new Circle(10);\n    Circle b \u003d new Arc(10, Math.PI/4);\n    Radiusable c \u003d new Circle(10);\n    Radiusable d \u003d new Arc(10, Math.PI /4);\n    Radiusable e \u003d new Ellipse(10);\n    Circle f \u003d new Ellipse(10, 0);\n\n    System.out.println(a.getPerimeter());\n    System.out.println(b.getPerimeter());\n    System.out.println(c.getPerimeter());\n    System.out.println(d.getPerimeter());\n    System.out.println(e.getPerimeter());\n    System.out.println(f.getPerimeter());\n    System.out.println(((Ellipse) f).getCoVertex());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003e\n  Dziedziczenie interfejsów\n\u003c/H1\u003e\n\u003cp\u003e\n\n  Cechą odróżniającą interfejsy od klas abstrakcyjnych jest możliwość tworzenia jednych drogą\n  dziedziczenia z kilku innych. W poprzedniej części utworzyliśmy dwa interfejsy, które\n  były implementowane przez klasy Car i Horse. Jeśli wiele klas musi implementować oba, to można\n  utworzyć jeden interfejs korzystając z wielodziedziczenia:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    interface DriveAndSound extends Driveable, Soundable{\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W ten sposób utworzyliśmy jeden interfejs, więc łatwiej będzie się odwoływać\n  do metod obu interfejsów dla obiektów z referencją:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    class Car implements DriveAndSound{\n      ...\n    }\n\n    class Horse implements DriveAndSound{\n      ...\n    }\n\n    ...\n\n    DriveAndSound porsche \u003d new Porsche(250, 50);\n    DriveAndSound horse \u003d new Horse(\"kasztanka\");\n    System.out.println(porsche.getSound());\n    System.out.println(horse.getSound());\n    porsche.start();\n    horse.start();\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.ArrayList;\nimport java.util.List;\n\ninterface Grid{\n\n  String getAt(int row, int column);\n  int getColumns();\n  int getRows();\n\n  static String toString(String[] arr){\n    String result \u003d \"|\";\n    for (String s: arr){\n      result +\u003d s +\"|\";\n    }\n    return result;\n  }\n\n  default String[] getRow(int row){\n    String[] rowValues \u003d new String[getColumns()];\n    for(int column \u003d 0; column \u003c rowValues.length; column++){\n      rowValues[column] \u003d getAt(row, column);\n    }\n    return rowValues;\n  }\n\n  default String[] getColumn(int column){\n    String[] values \u003d new String[getRows()];\n    for(int row \u003d 0; row \u003c values.length; row++){\n      values[row] \u003d getAt(row, column);\n    }\n    return values;\n  }\n}\n\nclass Diagram implements Grid {\n  private String[][] grid;\n\n  public Diagram(int rows, int columns){\n    grid \u003d new String[rows][columns];\n  }\n\n  public void fill(String pattern){\n    for(int row \u003d 0; row \u003c getRows(); row++){\n      for (int column \u003d 0; column \u003c getColumns(); column++){\n        grid[row][column] \u003d pattern+\" \"+row+\" \"+column;\n      }\n    }\n  }\n\n  @Override\n  public String getAt(int row , int column) {\n    return grid[row][column];\n  }\n\n  @Override\n  public int getColumns() {\n    return grid[0].length;\n  }\n\n  @Override\n  public int getRows() {\n    return grid.length;\n  }\n}\nclass Task {\n  public static void main(String[] args) {\n    Grid diagram \u003d new Diagram(5, 10);\n    System.out.println(diagram.getColumns());\n    ((Diagram)diagram).fill(\"\");\n    String[] row5 \u003d diagram.getRow(4);\n    System.out.println(Grid.toString(row5));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003e\n  Interfejsy dla zaawansowanych\n\u003c/H1\u003e\n\u003cp\u003e\n  Począwszy od wersji 8 interfejsy mogą posiadać, oprócz metod abstrakcyjnych, zdefiniowane\n  metody statyczne i domyślne.\n\u003c/p\u003e\n\u003cp\u003e\n  Przykładowy interfejs służy do implementacji siatki dwuwymiarowej łańcuchów. Posługując się\n  numerem kolumny i wiersza można odczytać znajdujący się tam łańcuch. Interfejs\n  dostarcza także metod zwracających liczbę kolumn i wierszy.\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\ninterface Grid{\n\n  String getAt(int row, int column);\n  int getColumns();\n  int getRows();\n\n  static String toString(String[] arr){\n    String result \u003d \"|\";\n    for (String s: arr){\n      result +\u003d s +\"|\";\n    }\n    return result;\n  }\n\n  default String[] getRow(int row){\n    String[] rowValues \u003d new String[getColumns()];\n    for(int column \u003d 0; column \u003c rowValues.length; column++){\n      rowValues[column] \u003d getAt(row, column);\n    }\n    return rowValues;\n  }\n\n  default String[] getColumn(int column){\n    String[] values \u003d new String[getRows()];\n    for(int row \u003d 0; row \u003c values.length; row++){\n      values[row] \u003d getAt(row, column);\n    }\n    return values;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\n  Oprócz trzech metod abstakcyjnych interfejs zawiera dwie metody domyślne, sygnalizowane słowem \u003csamp\u003edefault\n\u003c/samp\u003e, które zwracają tablicę łańcuchów dla podanego wiersza lub kolumny. W obu metodach domyślnych posługujemy się\n  zadeklarowanymi metodami abstrakcyjnymi \u003csamp\u003egetAt()\u003c/samp\u003e, \u003csamp\u003egetColumns()\u003c/samp\u003e\n  i \u003csamp\u003egetRows()\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Obie metody domyślne są tak zdefiniowane, że ich kod zależy tylko od metod interfejsu \u003csamp\u003eGrid\u003c/samp\u003e.\n  Żeby z nich skorzystać, trzeba interfejs zaimplementować, a klasa je implementująca\n  musi zdefiniować wszystkie metody abstrakcyjne, więc, gdy wywołamy np. metodę\n  \u003csamp\u003egetRow(int row)\u003c/samp\u003e, to wszystkie w niej wykorzystane metody będą już zdefiniowane.\n\u003c/p\u003e\n\u003cp\u003e\n  Tak zdefiniowany interfejs jest niezależny do metody implementacji samej siatki.\n  Możne to być dwuwymiarowa tablica, kolekcja w postaci listy list lub jeszcze inne rozwiązanie.\n\u003c/p\u003e\n\u003cp\u003e\n  Wykorzystamy interfejs do stworzenia diagramu, który będzie przechowywał łańcuchy w\n  tablicy dwuwymiarowej:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass ArrayDiagram implements Grid {\n  private String[][] grid;\n\n  public Diagram(int rows, int columns){\n    grid \u003d new String[rows][columns];\n  }\n\n  public void fill(String pattern){\n    for(int row \u003d 0; row \u003c getRows(); row++){\n      for (int column \u003d 0; column \u003c getColumns(); column++){\n        grid[row][column] \u003d pattern+\" \"+row+\" \"+column;\n      }\n    }\n  }\n\n  @Override\n  public String getAt(int row , int column) {\n    return grid[row][column];\n  }\n\n  @Override\n  public int getColumns() {\n    return grid[0].length;\n  }\n\n  @Override\n  public int getRows() {\n    return grid.length;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nPrzedstawiona klasa musi implementować wszystkie abstrakcyjne metody, natomiast metody\n  domyślne są dziedziczone. Jeśli działanie metod domyślnych byłoby niewystarczające,\n  to można je ponownie zaimplementować w klasie \u003csamp\u003eDiagram\u003c/samp\u003e.\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nGrid diagram \u003d new ArrayDiagram(5, 10);\n((ArrayDiagram)diagram).fill(\"\");\n\nSystem.out.println(diagram.getColumns());\nString[] row5 \u003d diagram.getRow(4);\nSystem.out.println(Grid.toString(row5));\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W przykładzie wykorzystaliśmy także metodę statyczną interfejsu, której kod musi być\n  niezależny od składowych  niestatycznych interfejsu. W przypadku funkcji\n  \u003csamp\u003etoString(String[] arr)\u003c/samp\u003e, jej zadanie, jest zwrócenie w postaci łańcucha\n  argumentu czyli tablicy łańcuchów.\n\u003c/p\u003e\n\u003cp\u003e\n  Istotną cechą typów interfejsowych jest łatwa możliwość wymiany klas je implemntujących.\n  Trzy ostatnie wiersze  są niezalezne od klas implementujących interfejs, więc jeśli\n  zmienna \u003csamp\u003ediagram\u003c/samp\u003e byłaby\n  klasy \u003csamp\u003eListDiagram\u003c/samp\u003e, która implementowałaby \u003csamp\u003eGrid\u003c/samp\u003e, to te trzy ostatnie\n  wiersze działały by poprawnie.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Podsumowanie",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Właściwości interfejsów w Java:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n   składowymi interfejsów mogą być pola, które są statycznymi stałymi, i metody abstrakcyjne,\n\u003c/li\u003e\n\u003cli\u003e\n   domyślnie składowe są publiczne,\n\u003c/li\u003e\n\u003cli\u003e\n   klasy mogą implementować wiele interfejsów,\n\u003c/li\u003e\n\u003cli\u003e\n  interfejsy mogą dziedziczyć z wielu innych inerfejsów,\n\u003c/li\u003e\n\u003cli\u003e\n   obiekty klas implementujących interfejs mogą być umieszczane w zmiennych typu tego interfejsu,\n\u003c/li\u003e\n\u003cli\u003e\n  metody interfejsu są wywoływane polimorficznie\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Klasy wewnętrzne i anonimowe",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Car {\n  private Engine engine \u003d null;\n  private String registerNumber;\n\n  public Car(double power, int pistonNumber, String registerNumber){\n    this.engine \u003d new Engine(power, pistonNumber);\n    this.registerNumber \u003d registerNumber;\n  }\n\n  @Override\n  public String toString() {\n    return engine.power+\" \"+engine.pistonNumber+\" \"+registerNumber;\n  }\n\n  public class Engine{\n    private double power;\n    private int pistonNumber;\n\n    public Engine(double  power, int pistonNumber){\n      this.power \u003d power;\n      this.pistonNumber \u003d pistonNumber;\n    }\n\n    double getPower(){\n      return power;\n    }\n\n    int getPistonNumber(){\n      return pistonNumber;\n    }\n\n    @Override\n    public String toString() {\n      return \"należy do: \"+registerNumber+\", moc: \"+this.power+\", liczba cylindrów: \"+this.pistonNumber;\n    }\n  }\n}\n\nclass Task {\n  public static void main(String[] args){\n    Car porsche \u003d new Car(250, 8, \"TK 6789E\");\n    System.out.println(porsche);\n    Car.Engine engine \u003d porsche. new Engine(405, 12);\n    System.out.println(engine);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\nKlasa wewnętrza to typ definiowany wewnątrz definicji innej klasy. Ponieważ taka klasa może być deklarowana\n    także ze słowem kluczowym \u003csamp\u003estatic\u003c/samp\u003e więc rozróżniane są następujące rodzaje klas wewnętrznych:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        Klasy zagnieżdżone (ang. \u003ci\u003enested class\u003c/i\u003e), które są klasami wewnętrznymi statycznymi\n    \u003c/li\u003e\n    \u003cli\u003e\n        Klasy wewnętrzne (ang. \u003ci\u003einner class\u003c/i\u003e), które są klasami wewnętrznymi niestatycznymi\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    W tej części zajmiemy się klasami wewnętrznymi niestatycznymi. Klasy takie można deklarować z wszystkimi\n    modyfikatorami zasięgu. Poniższy przykład ilustruje zastosowanie klasy wewnętrznej publicznej:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Car {\n  private Engine engine \u003d null;\n  private String registerNumber;\n\n  public Car(double power, int pistonNumber, String registerNumber){\n    this.engine \u003d new Engine(power, pistonNumber);\n    this.registerNumber \u003d registerNumber;\n  }\n\n  @Override\n  public String toString() {\n    return engine.power+\" \"+engine.pistonNumber+\" \"+registerNumber;\n  }\n\n  public class Engine{\n    private double power;\n    private int pistonNumber;\n\n    public Engine(double  power, int pistonNumber){\n      this.power \u003d power;\n      this.pistonNumber \u003d pistonNumber;\n    }\n\n    double getPower(){\n      return power;\n    }\n\n    int getPistonNumber(){\n      return pistonNumber;\n    }\n\n    @Override\n    public String toString() {\n      return \"należy do: \"+registerNumber+\", moc: \"+this.power+\", liczba cylindrów: \"+this.pistonNumber;\n    }\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Przykład ilustruje kilka istotnych właściwości klas wewnętrznych. Klasa zewnętrzna \u003csamp\u003eCar\u003c/samp\u003e ma dostęp\n    do wszystkich składowych klasy wewnętrznej \u003csamp\u003eEngine\u003c/samp\u003e, także do prywatnych, a klasa\n    wewnętrzna ma również dostęp do wszystkich składowych klasy zewnętrznej. Widać to w metodach \u003csamp\u003etoString()\u003c/samp\u003e\n    obu klas.\n\u003c/p\u003e\n\u003cp\u003e\n   Klasy wewnętrzne służą do tworzenia obiektów wewnątrz klasy zewnętrznej, możliwe jest\n    jednak tworzenie obiektów klas wewnętrznych poza, pod warunkiem, że są publiczne.\n    W przykładzie pokazano jak tworzyć obiekty klas wewnętrznych.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    Car porsche \u003d new Car(250, 8, \"TK 6789E\");\n    System.out.println(porsche);\n    Car.Engine engine \u003d porsche.new Engine(405, 12);\n    System.out.println(engine);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Obiekt klasy wewnętrznej może powstać tylko wtedy, gdy istnieje obiekt klasy zewnętrznej. W przykładzie\n    wykorzystaliśmy obiekt \u003csamp\u003eporsche\u003c/samp\u003e, dla którego wywołaliśmy operator \u003csamp\u003enew\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Diagram {\n  private Field[] fields;\n\n  public Diagram(String theme) {\n    fields \u003d new Field[theme.length()];\n    int i \u003d 0;\n    for(char c: theme.toCharArray()){\n      fields[i++] \u003d new Field(c, i);\n    }\n  }\n\n  public Field fieldAt(int i){\n    return i \u003e -1 \u0026\u0026 i \u003c fields.length ? fields[i]: null;\n  }\n\n  public char letterAt(int i){\n    return fields[i].letter;\n  }\n\n  public static class Field{\n    private final char letter;\n    private final int number;\n\n    public Field(char letter, int number){\n      this.letter \u003d letter;\n      this.number \u003d number;\n    }\n\n    @Override\n    public String toString() {\n      return letter+\" \"+number;\n    }\n  }\n}\n\nclass Task {\n  public static void main(String[] args) {\n    Diagram diagram \u003d new Diagram(\"JAVA\");\n    System.out.println(diagram.fieldAt(2));\n    System.out.println(diagram.letterAt(2));\n    Diagram.Field f \u003d new Diagram.Field(\u0027D\u0027, 8);\n    System.out.println(f);\n}\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Klasy zagnieżdźone deklarowane są ze słowem \u003csamp\u003estatic\u003c/samp\u003e. Klasa statyczna nie ma dostępu do pól\n  klasy zewnętrznej, bo można do tej klasy odwoływać się bezpośrednio:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Diagram {\n  private Field[] fields;\n\n  public Diagram(String theme) {\n    fields \u003d new Field[theme.length()];\n    int i \u003d 0;\n    for(char c: theme.toCharArray()){\n      fields[i++] \u003d new Field(c, i);\n    }\n  }\n\n  public Field fieldAt(int i){\n    return i \u003e -1 \u0026\u0026 i \u003c fields.length ? fields[i]: null;\n  }\n\n  public char letterAt(int i){\n    return fields[i].letter;\n  }\n\n  public static class Field{\n    private final char letter;\n    private final int number;\n\n    public Field(char letter, int number){\n      this.letter \u003d letter;\n      this.number \u003d number;\n    }\n\n    @Override\n    public String toString() {\n      return letter+\" \"+number;\n    }\n  }\n}\n\n...\n\nDiagram diagram \u003d new Diagram(\"JAVA\");\nSystem.out.println(diagram.fieldAt(2));\nSystem.out.println(diagram.letterAt(2));\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W konstruktorze klasy \u003csamp\u003eDiagram\u003c/samp\u003e utworzyliśmy obiekty klasy wewnętrznej \u003csamp\u003eField\u003c/samp\u003e.\n  Klasa zagnieżdżona nie może odwoływać się do pól klasy zewnętrznej, ale klasa zewnętrzna\n    ma prawo dostępu do wszystkich składowych.\n\u003c/p\u003e\n\u003cp\u003e\n    Tworzenie obiektów publicznej klasy zagnieżdżonej wymaga podania\n    nazwy klasy poprzedzonej klasą zewnętrzną:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nDiagram.Field f \u003d new Diagram.Field(\u0027D\u0027, 8);\nSystem.out.println(f);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "interface Message{\n  String getMessage();\n}\n\nclass EnglishMessage implements Message {\n\n  @Override\n  public String getMessage() {\n    return \"Programming in JAVA\";\n  }\n}\n\nclass Task {\n\n  public static void main(String[] args) {\n    Message polishMessage \u003d new Message() {\n      @Override\n      public String getMessage() {\n        return \"Programowanie w JAVA\";\n      }\n    };\n\n    Message englishMessage \u003d new Message() {\n      @Override\n      public String getMessage() {\n        return \"Programming in JAVA\";\n      }\n    };\n    System.out.println(polishMessage.getMessage());\n    System.out.println(englishMessage.getMessage());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKlasa anonimowa\u003c/h1\u003e\n\u003cp\u003e\n  Klasa anonimowa to kolejny szczególny rodzaj klasy. Służy do \"natychmiastowego\" tworzenia obiektów, bez osobnej\n  definicji klasy. Określenie \"anonimowa\" dość jasnow skazuje, że klasa taka nie posiada nazwy. Jest ona\n  zbędna, bo celem takiej klasy jest utworzenie tylko jednej jej instancji.\n\u003c/p\u003e\n\u003cp\u003e\n  Głównym celem takich klas, jest implementowanie metod interfejsowych. Przy definiowaniu klas anomimowych\n  podajemy jaki interfejs ma implementować lub jaką klasę ma rozszerzać.\n\u003c/p\u003e\n\u003cp\u003e\n  Przykład interfejs, który zwraca komunikat:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\ninterface Message{\n  String getMessage();\n}\n \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Możemy teraz zdefiniować zmienne zwracające komunikat w różnych językach.\n  Tradycyjnie zrobiliśmy to definiując klasy dla każdego języka i tworząc potem obiekty:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass EnglishMessage implements Message {\n\n  @Override\n  public String getMessage() {\n    return \"Programming in JAVA\";\n  }\n}\n\n...\n\nMessage englishMessage \u003d new EnglishMessage();\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Stosując klasę anonimową możemy zrobić to krócej:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  Message englishMessage \u003d new Message() {\n      @Override\n      public String getMessage() {\n        return \"Programming in JAVA\";\n      }\n  };\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "abstract class Operation{\n  abstract public double apply(double a);\n}\n\nclass Task {\n  static void apply(double[] arr, Operation a){\n    for (int i \u003d 0; i \u003c arr.length; i++) {\n      arr[i] \u003d a.apply(arr[i]);\n    }\n  }\n\n  static void printArray(double[] arr){\n    for(double d: arr){\n      System.out.println(d);\n    }\n  }\n\n  public static void main(String[] args) {\n\n    Operation vat \u003d new Operation() {\n      @Override\n      public double apply(double a) {\n        return a*1.23;\n      }\n    };\n\n    double[] values \u003d {1.34, 34.6 , 455, 78.56};\n    apply(values, vat);\n    printArray(values);\n\n    apply(values, new Operation() {\n      @Override\n      public double apply(double a) {\n        return Math.sqrt(a);\n      }\n    });\n\n    printArray(values);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKlasa anonimowa a argument funkcyjny\u003c/h1\u003e\n\u003cp\u003e\nKlasy anonimowe służa najczęściej do realizacji przekazywania argumentu funkcyjnego.\nPonieważ w JAVA nie ma możliwości zdefiniowania funkcji bez klasy, więc argumentem funkcji\nnie może być funkcja. Możemy przekazywać tylko obiekty klas, które posiadają metody funkcyjne.\n\u003c/p\u003e\n\u003cp\u003e\n  Tym razem zadeklarujemy klasę abstrakcyjną, która posiada jedną metodę abstrakcyjną:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nabstract class Operation{\n  abstract public double apply(double a);\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Klasa posiada interfejs w postaci metody \u003csamp\u003eapply\u003c/samp\u003e z jednym argumentem. Klasy\n    potomne będą implementować tę metodę dostarczając konkretną operację na argumencie i zwracając wynik.\n\u003c/p\u003e\n\u003cp\u003e\n  Wykorzystamy utworzoną klasę do zdefiniowania metody przetwarzającej tablicę wartości:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nstatic void recalc(double[] arr, Operation a){\n    for (int i \u003d 0; i \u003c arr.length; i++) {\n        arr[i] \u003d a.apply(arr[i]);\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Aby skorzystać z tej metody musimy zdefiniować operację wykonywaną na każdej wartości. Wykorzystamy\n    metodę tworzenia klasy anonimowej:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nOperation vat \u003d new Operation() {\n    @Override\n    public double calc(double a) {\n        return a*1.23;\n    }\n};\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Wywołanie metody wykorzystującej interfejs  \u003csamp\u003eAction\u003c/samp\u003e i metodę \u003csamp\u003ecalc()\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\ndouble[] values \u003d {1.34, 34.6 , 455, 78.56};\nrecalc(values, vat);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nMożna też zdefiniować akcję podczas wywołania metody \u003csamp\u003erecalc()\u003c/samp\u003e, tak jak zdefiniowane\n    poniżej pierwiastkowanie:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\napply(values, new Operation() {\n      @Override\n      public double calc(double a) {\n        return Math.sqrt(a);\n      }\n    });\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Typ wyliczeniowy",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\nenum Kolor{\n  PIK, KIER, KARO, TREFL;\n}\n\nclass Task {\n  public static void main(String[] args){\n    Kolor card;\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz jeden z kolorów kart: PIK, KIER, KARO, TREFL: \");\n    card \u003d Kolor.valueOf(scan.nextLine());\n    System.out.println(card \u003d\u003d Kolor.KIER);\n    switch(card){\n      case PIK:\n        System.out.println(\"Pik ma 40 punktów\");\n        break;\n      case KIER:\n        System.out.println(\"Kier 30 punktów\");\n        break;\n      case KARO:\n        System.out.println(\"Karo 20 punktów\");\n        break;\n      case TREFL:\n        System.out.println(\"Trefl 10 punktów\");\n        break;\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\nTyp wyliczeniowy służy do przechowywania skończonej liczby wartości. Typowym przykładem zastosowania\ntypu wyliczeniowego są dni tygodnia, miesiące, figury szachowe itd.\n\u003c/p\u003e\n\u003cp\u003eDo definiowania wyliczeń służy słowo kluczowe \u003csamp\u003eenum\u003c/samp\u003e. Typ wyliczeniowy przypomina definiowanie klasy, która\n    zwiera tylko stałe. Zwyczajowo stałe pisane są wielkimi literami.\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nenum Suits{\n     SPIDES, HEARTS, DIAMONDS, CLUBS\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e Zmienna typu wyliczeniowego może przyjąć jedną z wymienionych w typie wartości:\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nSuits deck1 \u003d Suits.SPADES;\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Przykład wykorzystania zmiennej wyliczeniowej:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic static void main(String[] args){\n    Suits card;\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz jeden z kolorów kart: SPADES, HEARTS, DIAMONDS, CLUBS: \");\n    card \u003d Suits.valueOf(scan.nextLine());\n    switch(card){\n      case SPADES:\n        System.out.println(\"Pik ma 40 punktów\");\n        break;\n      case HEARTS:\n        System.out.println(\"Kier 30 punktów\");\n        break;\n      case DIAMONDS:\n        System.out.println(\"Karo 20 punktów\");\n        break;\n      case CLUBS:\n        System.out.println(\"Trefl 10 punktów\");\n        break;\n    }\n}\n        \u003c/code\u003e\n    \u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "enum Team {\n  ADAM, ROMAN, KAROLINA;\n}\nclass Task {\n  public static void main(String[] args) {\n    Team member \u003d Team.KAROLINA;\n    System.out.println(member.name());\n    System.out.println(member.ordinal());\n    System.out.println(member.compareTo(Team.ROMAN));\n    System.out.println(member.getDeclaringClass());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Zmienne typu wyliczeniowego są obiektami, które posiadają kilka użytecznych metod:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003csamp\u003ename()\u003c/samp\u003e - zwraca nazwę stałej,\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003csamp\u003eordinal()\u003c/samp\u003e - zwraca numer pozycji na liście stałych,\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003csamp\u003ecompareTo(wartość_enum)\u003c/samp\u003e- porównuje wartość zmiennej wyliczeniowej z inną tego samego typu\n    i zwraca różnicę pozycji.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePopatrzmy na przykład wykorzystania metod:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    enum Team {\n      ADAM, TOMEK, KASIA, KAROLINA, BASIA\n    }\n\n    ...\n\n    Team member \u003d Team.KASIA;\n    System.out.println(member.name());\n    System.out.println(member.ordinal());\n    System.out.println(member.compareTo(Team.TOMEK));\n    System.out.println(member.getDeclaringClass());\n\n    ---\n    KASIA\n    2\n    1\n    class Team\n    \u003c/pre\u003e\n  \u003c/code\u003e\n  \u003cp\u003e\n    Znaczenie kolejnych wartości:\n  \u003c/p\u003e\n    \u003cul\u003e\n      \u003cli\u003e\n        \u003csamp\u003eKASIA\u003c/samp\u003e - nazwa stałej wyliczeniowej,\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003csamp\u003e2\u003c/samp\u003e - stała KASIA znajduje się na pozycji nr 2 (pierwsza ma pozycję 0),\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003csamp\u003e1\u003c/samp\u003e - stała KASIA znajduje się 1 pozycję za stałą TOMEK,\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003csamp\u003eclass Team\u003c/samp\u003e - nazwa typu zmiennej,\n      \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "CZęść 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\n/**\n * Typ wyliczeniowy wykorzystujący możliwości klasy\n */\nenum Suits{\n  SPADES(40),\n  HEARTS(30),\n  DIMAONDS(20),\n  CLUBS(10);\n\n  private int points;\n\n  private Suits(int points){\n    this.points \u003d points;\n  }\n\n  public int getPoints(){\n    return points;\n  }\n\n  public static boolean contains(String name){\n    for(Suits c: Suits.values()){\n      if (name.equals(c.name()))\n        return true;\n    }\n    return false;\n  }\n}\n\nclass Task {\n  public static void main(String[] args){\n    Suits card1 \u003d Suits.DIMAONDS;\n    Suits card2 \u003d Suits.HEARTS;\n    Suits card3 \u003d Suits.DIMAONDS;\n    System.out.println(card1 \u003d\u003d card3);\n    for(Suits c: Suits.values()){\n      System.out.println(c);\n    }\n\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.print(\"Wpisz jedną z nazw poniższych kolorów: \");\n    for(Suits c: Suits.values()){\n      System.out.print(c+\" \");\n    }\n    String cName \u003d scan.next();\n    Suits card;\n    if (Suits.contains(cName)) {\n      card \u003d Suits.valueOf(cName);\n      System.out.println(card.getPoints());\n    } else {\n      System.out.println(\"Wpisałeś niepoprawny kolor\");\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eMożliwości dodatkowe klasy enum\u003c/h1\u003e\n\u003cp\u003e\nDeklarowany typ wyliczeniowy jest w istocie klasą, dla której możemy zdefiniować konstruktory, metody i pola. To co odróżnia\ntyp \u003csamp\u003eenum\u003c/samp\u003e od klas właściwych jest fakt, że nie tworzymy obiektów tego typu, bo stałe\nwyliczeniowe są obiektami jego typu. Można założyć, że typ \u003csamp\u003eenum\u003c/samp\u003e jest klasą, która zawiera statyczne\n    pola typu wyliczeniowego.\n\u003c/p\u003e\n\u003cp\u003e\n  Rozbudujmy typ \u003csamp\u003eKolor\u003c/samp\u003e tak, aby przechowywać liczbę punktów każdego koloru:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nenum Kolor{\n    PIK(40),\n    KIER(30),\n    KARO(20),\n    TREFL(10);\n\n    private int points;\n\n    Kolor(int points){\n        this.points \u003d points;\n    }\n\n    public int getPoints(){\n        return points;\n    }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Konstruktory typu wyliczeniowego musza być prywatne (aby nie można było tworzyć obiektów tego typu). Jawne\n  podawanie modyfikatora zasięgu \u003csamp\u003eprivate\u003c/samp\u003e nie jest potrzebne, jest przyjmowany domyślnie.\n    Metody i pola mogą posiadać dowolny typ zasięgu, choć \u003csamp\u003eprotected\u003c/samp\u003e jest nieużyteczny, gdyż\n    nie można dziedziczyć typu \u003csamp\u003eenum\u003c/samp\u003e.\n  Dzięki takiej rozbudowie przykład z części 1 znacznie się uprości:\n\u003c/sampprotected\u003e\n\u003cpre\u003e\n\u003ccode\u003e\npublic static void main(String[] args){\n    Kolor card;\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz jeden z kolorów kart: PIK, KIER, KARO, TREFL: \");\n    card \u003d Kolor.valueOf(scan.nextLine());\n    System.out.println(\"Pik ma \" + card.getPoints() + \" punktów\");\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Typ \u003csamp\u003eenum\u003c/samp\u003e wyposażony jest w kilka dość istotnych metod statycznych:\n\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003e\n       \u003csamp\u003evalueOf(nazwa_stałej)\u003c/samp\u003e - zwraca stałą wyliczeniową o podanej nazwie,\n    \u003c/li\u003e\n    \u003cli\u003e\n       \u003csamp\u003evalues()\u003c/samp\u003e - zwraca tablicę wszystkich stałych\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n    Poprzedni przykład można teraz rozbudować o sprawdzanie, czy wpisana wartość stałej jest poprawna:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nenum Color{\n  PIK(40),\n  KIER(30),\n  KARO(20),\n  TREFL(10);\n\n  private int points;\n\n  private Color(int points){\n    this.points \u003d points;\n  }\n\n  public int getPoints(){\n    return points;\n  }\n\n  public static boolean contains(String name){\n    for(Color c: Color.values()){\n      if (name.equals(c.name()))\n        return true;\n    }\n    return false;\n  }\n}\n\n...\n\nScanner scan \u003d new Scanner(System.in);\nSystem.out.print(\"Wpisz jedną z nazw poniższych kolorów: \");\nfor(Color c: Color.values()){\n  System.out.print(c+\" \");\n}\nString cName \u003d scan.next();\nColor card;\nif (Color.contains(cName)) {\n  card \u003d Color.valueOf(cName);\n  System.out.println(card.getPoints());\n} else {\n  System.out.println(\"Wpisałeś niepoprawny kolor\");\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Typ wyliczeniowy wyposażyliśmy w dodatkową metodę \u003csamp\u003econtaints(name)\u003c/samp\u003e, która sprawdza\n    czy typ zawiera stałą o podanej nazwie. Stosując tę metodę sprawdzamy, czy wpisany\n    z klawiatury łańcuch jest jedną ze stałych wyliczenia.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDateTime;\nimport java.util.*;\n\n/**\n * Klasa udająca typ enum\n */\nclass SuitsC {\n  public static SuitsC SPADES   \u003d new SuitsC(\"SPADES\", 40);\n  public static SuitsC HEARTS   \u003d new SuitsC(\"HEARTS\", 40);\n  public static SuitsC DIAMONDS \u003d new SuitsC(\"DIAMONDS\", 40);\n  public static SuitsC CLUBS    \u003d new SuitsC(\"CLUBS\", 40);\n\n  private int points;\n  private String name;\n\n  private SuitsC(String name, int points){\n    this.points \u003d points;\n    this.name \u003d name;\n  }\n\n  public String name(){\n    return name;\n  }\n\n  public int getPoints(){\n    return points;\n  }\n\n  public String toString(){\n    return name;\n  }\n}\n\n/**\n * Klasa enum\n */\nenum SuitsE {\n  SPADES(40),\n  HEARTS(30),\n  DIAMONDS(20),\n  CLUBS(10);\n\n  private int points;\n\n  SuitsE(int points){\n    this.points \u003d points;\n  }\n\n  public int getPoints(){\n    return points;\n  }\n}\n\n\n\nclass Task{\n  public static void main(String[] args){\n    SuitsE pe1 \u003d SuitsE.SPADES;\n    SuitsE pe2 \u003d SuitsE.SPADES;\n    SuitsC pc1 \u003d SuitsC.SPADES;\n    SuitsC pc2 \u003d SuitsC.SPADES;\n\n    System.out.println(pe1 \u003d\u003d pe2);\n    System.out.println(pc1 \u003d\u003d pc2);\n\n    System.out.println(pc1.name());\n    System.out.println(pe2.name());\n\n    System.out.println(pc1.getPoints());\n    System.out.println(pe2.getPoints());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eSubstytu typu enum\u003c/h1\u003e\n\u003cp\u003e\n Aby łatwiej zrozumieć zaawansowane definiowanie typu \u003csamp\u003eenum\u003c/samp\u003e stworzymy tradycyjną klasę, której obiekty\n    będa zachowywać się jak taki typ. Wykorzystamy przykład kolorów kart do gry.\n\u003c/p\u003e\n\u003cp\u003e\n    Na początek wyposażymy nasz typ tylko w stałe:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nfinal class Suit{\n    public static Suit SPADES \u003d new Suit(\"SPADES\");\n    public static Suit DIAMONDS \u003d new Suit(\"DIAMONDS\");\n    public static Suit CLUBS \u003d new Suit(\"CLUBS\");\n    public static Suit HEARTS \u003d new Suit(\"HEARTS\");\n\n    private String name;\n\n    private Suit(String name){\n        this.name \u003d name;\n    }\n\n    public String name(){\n        return name;\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Stworzona klasa zachowuje się podobnie jak typ \u003csamp\u003eenum\u003c/samp\u003e:\n\u003cp\u003e\n\u003col\u003e\n    \u003cli\u003e\n        ma prywatny konstruktor, nie można tworzyć obiektów tej klasy,\n    \u003c/li\u003e\n    \u003cli\u003e\n        posiada stałe, które są obiektami typu definiowanej klasy,\n    \u003c/li\u003e\n    \u003cli\u003e\n        posiada metodę \u003csamp\u003ename()\u003c/samp\u003e, która zwraca nazwę stałej,\n    \u003c/li\u003e\n    \u003cli\u003e\n        modyfikator \u003csamp\u003efinal\u003c/samp\u003e uniemożliwia dziedziczenie.\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n    Ponieważ nasza klasa udaje tylko typ wyliczeniowy, więc jej używanie może narazić nas na kilka\n    kłopotów, jak pomyłkę w nazwie stałej i różnicę z zawartością pola \u003csamp\u003ename\u003c/samp\u003e np.\n    \u003ccode\u003epublic static Suit SPADS \u003d new Suit(\"SPADES\");\u003c/code\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Substytut działa bardzo podobnie jak prawdziwy typ wyliczeniowy:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n    Suits player1 \u003d Suits.SPADES;\n    Suits player2 \u003d Suits.HEARTS;\n    Suits player3 \u003d Suits.SPADES;\n    System.out.println(player1 \u003d\u003d player2);\n    System.out.println(player1 \u003d\u003d player3);\n    System.out.println(player1.name());\n    \u003c/code\u003e\n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    Dodajmy kolejne właściwości do klasy \u003csamp\u003eSuits\u003c/samp\u003e: liczbę punktów i metodę do jej odczytu:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n final class Suit{\n    public static Suit SPADES \u003d new Suit(\"SPADES\", 40);\n    public static Suit HEARTS \u003d new Suit(\"HEARTS\", 30);\n    public static Suit DIAMONDS \u003d new Suit(\"DIAMONDS\", 20);\n    public static Suit CLUBS \u003d new Suit(\"CLUBS\", 10);\n\n    private String name;\n    private int points;\n\n    private Suit(String name, int points){\n        this.name \u003d name;\n        this.points \u003d points;\n    }\n\n    public String name(){\n        return name;\n    }\n\n    public int getPoints(){\n        return points;\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n    \u003cp\u003e\n        Porównajmy tworzenie stałych w naszej klasie ze stałymi typu \u003csamp\u003eenum\u003c/samp\u003e:\n    \u003c/p\u003e\n\n        \u003ctable border\u003d\"\" bgcolor\u003d\"#123456\" cellpadding\u003d\"4\" align\u003d\"center\"\u003e\n            \u003ctr\u003e\n                \u003ctd\u003e\n            Substytut\n        \u003c/td\u003e\n            \u003ctd\u003e\n            Typ enum\n            \u003c/td\u003e\n            \u003c/tr\u003e\n            \u003ctr\u003e\n                \u003ctd\u003e\n                    \u003ccode\u003e\n                 public static Suit SPADES \u003d new Suit(\"SPADES\", 40);\n                    \u003c/code\u003e\n                \u003c/td\u003e\n                \u003ctd\u003e\n                    \u003ccode\u003e\n                  SPADES(40);\n                    \u003c/code\u003e\n                \u003c/td\u003e\n            \u003c/tr\u003e\n        \u003c/table\u003e\n        \u003cp\u003ePorównanie pokazuje, że dodanie nawiasów z liczbą pubktów za nazwą stałej w \u003csamp\u003eenum\u003c/samp\u003e\n        jest w istocie  wywołaniem konstruktora jednoargumentowego, który zwróci obiekt i przypisze go do tej  stałej.\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Podsumowanie",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cp\u003e\n  Własności typu \u003csamp\u003eenum\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        Typ \u003csamp\u003eenum\u003c/samp\u003e jest specyficzną klasą, która ma szereg ograniczeń,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Stałe wyliczeniowe to obiekty klasy \u003csamp\u003eenum\u003c/samp\u003e, które są jednocześnie statycznymi polami klasy,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Nie można dziedziczyć po typie \u003csamp\u003eenum\u003c/samp\u003e,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Nie można rozszerzać typów wyliczeniowych,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Typ \u003csamp\u003eenum\u003c/samp\u003e może implementować interfejsy,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Konstruktor typu \u003csamp\u003eenum\u003c/samp\u003e jest prywatny, nie można tworzyć obiektów klasy \u003csamp\u003eenum\u003c/samp\u003e poza ciałem\n        klasy,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Typ \u003csamp\u003eenum\u003c/samp\u003e może posiadać pola i metody z modyfikatorami zasięgu \u003csamp\u003eprivate\u003c/samp\u003e lub\n        \u003csamp\u003epublic\u003c/samp\u003e,\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Wyjątki",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/ExceptionDemo.java": {
                  "name": "src/ExceptionDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class ExceptionDemo {\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3};\n    try {\n      System.out.println(array[0]);\n      System.out.println(array[1]);\n      System.out.println(array[2]);\n      System.out.println(array[3]);\n    } catch(ArrayIndexOutOfBoundsException e){\n      System.out.println(\"Nieładnie, indeks poza zakresem\");\n    }\n    System.out.println(\"KONIEC\");\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eCzym jest wyjątek?\u003c/h1\u003e\n\u003cp\u003e\n  Wyjątek (ang. \u003ci\u003eexception\u003c/i\u003e) to zdarzenie występujące podczas wykonywania programu, które zaburza\n  normalną kolejność wykonywanych instrukcji. Z występowaniem takich zdarzeń już spotkaliśmy się, chociażby\n  podczas wykonania takiego programu:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass ExceptionDemo {\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4};\n    System.out.println(array[4]);\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Efektem jest zgłoszenie wyjątku programu:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003csamp\u003e\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 4\n\tat Task.main(ExceptionDemo.java:4)\n  \u003c/samp\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\n  Reakcja na błąd powoduje stworzenie specjalnego obiektu, który jest przekazywany do systemu wykonawczego (ang. \u003ci\u003eruntime\n  system\u003c/i\u003e). Obiekt ten, zwany obiektem wyjątku, zawiera informacje o błędzie, w tym jego typ i stan programu po błędzie.\n  Sytuacja utworzenia wyjątku i przekazania go do systemu wykonawczego nazywana jest wyrzucaniem lub zgłaszaniem wyjątku (ang.\n  \u003ci\u003ethrowing an exception\u003c/i\u003e).\n\u003c/p\u003e\n\u003cp\u003e\n  Gdy wyjątek zostanie zgłoszony to następuje proces wyszukiwania \"odpowiedzialnego\" za jego obsłużenie. System\n  wykonawczy, przeszukuje uporządkowaną listę metod, które były wywoływane do momentu wystąpienia błędu. Listą\n  tą jest tzw. stos wywołań. Celem przeszukiwania jest znalezienie metody, która zawiera blok kodu obsługującego\n  zgłoszony wyjątek. Gdy zostanie znaleziony kod obsługi wyjątki (ang. \u003ci\u003eexception handler\u003c/i\u003e), którego typ pasuje\n  do obiektu wyjątku to system wykonawczy go\n  wykonuje, i zgodnie z tym kodem decyduje, czy program jest kontynuwany czy nie.\n\u003c/p\u003e\n\u003cp\u003e\n  Jeśli kod obługi nie zostanie znaleziony to system wykonawczy kończy działanie,\n  co jest równoznaczne z zakończeniem programu\n  wraz z wyświetleniem wszystkich informacji o wyjątku.\n\u003c/p\u003e\n\u003cp\u003e\n  Przedstawiony wyżej przykład ilustruje reakcję na brak obsługi wyjątku, dlatego nasz program zakończył działanie\n  wyświetlając informacje o błędzie.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/FinallyDemo.java": {
                  "name": "src/FinallyDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\nclass FinallyDemo {\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4, 5, 9, 8, 7};\n    int sum\u003d 0;\n    Scanner scan\u003d new Scanner(System.in);\n    System.out.println(\"Program obliczający sumę pierwszych n elementów tablicy\");\n    System.out.println(\"Wpisz indeks ostatniego sumowanego elementu:\");\n    int n \u003d scan.nextInt();\n    int element \u003d 0;\n    for (int i \u003d 0; i \u003c n; i++) {\n      try {\n        element \u003d array[i];\n      } catch (ArrayIndexOutOfBoundsException e) {\n        element \u003d 0;\n      }\n      finally {\n        sum +\u003d element;\n      }\n    }\n    System.out.println(\"Suma elementów: \"+sum);\n  }\n}"
                },
                "src/MultiCatchDemo.java": {
                  "name": "src/MultiCatchDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class MultiCatchDemo {\n  public static void main(String[] args) {\n    int[] array \u003d { 1, 2, 3, 4, 5};\n    Scanner scan \u003d new Scanner(System.in);\n    boolean isValid \u003d false;\n    int n \u003d 0;\n    int element \u003d 0;\n    System.out.println(\"Wpisz indeks od 0 do 4.\");\n    do {\n      try {\n        n \u003d scan.nextInt();\n        element \u003d array[n];\n        isValid \u003d true;\n      } catch (InputMismatchException e1) {\n        System.out.println(\"Wpisz indeks jako liczbę całkowitą!!! Spróbuj jeszcze raz.\");\n        String tmp \u003d scan.nextLine();\n      } catch (ArrayIndexOutOfBoundsException e2) {\n        System.out.println(\"Indeks musi być nieujemny i mniejszy od 5!!! Spróbuj jeszcze raz.\");\n      }\n    }while (!isValid);\n    System.out.println(\"Liczba w tablicy o indeksie \"+n+\" \u003d \"+element);\n  }\n}\n"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eObsługa wyjątku - konstrukcja try...catch\u003c/h1\u003e\n\u003cp\u003e\n  Mamy dwie możliwości reagowania na wyjątki:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        umieścić kod obsługi wyjątku ujmując fragment kodu, w którym może pojawić się wyjątek,\n        blokiem \u003csamp\u003etry ... catch ...\u003c/samp\u003e,\n    \u003c/li\u003e\n    \u003cli\u003e\n        przekazać zgłoszony wyjątek metodzie wywołującej poprzez dodanie klauzuli \u003csamp\u003ethrows\u003c/samp\u003e,\n        co powoduje, że przenosimy odpowiedzialność za obsługę wyjątku na zewnątrz.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    Dodajmy do przykładu blok try ... catch ..., tak aby wyświetlić komunikat, o nieprawidłowem indeksie.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass TryCatchDemo {\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4};\n    try {\n      System.out.println(array[4]);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      System.out.println(\"Przekroczony zakres indeksu. Wyjątek \"+e);\n    }\n    System.out.println(\"KONIEC\");\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Efektem wykonania programu:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003csamp\u003e\nPrzekroczony zakres indeksu. Wyjątek java.lang.ArrayIndexOutOfBoundsException: 4\nKONIEC\n\u003c/samp\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Klauzula \u003csamp\u003etry\u003c/samp\u003e obejmuje kod, w którym może wystąpić błąd, argumentem \u003csamp\u003ecatch\u003c/samp\u003e jest\n    obiekt wyjątku, a w bloku poniżej \u003csamp\u003ecatch\u003c/samp\u003e znajduje się reakcja na błąd.\n    Dodanie obsługi wyjątku spowodowało, że program nie został zatrzymany. Po reakcji na wyjątek wykonana została\n    instrukcja za blokiem \u003csamp\u003etry ... catch\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n   Blok obsługi wyjątku może zawierać trzeci element - blok \u003csamp\u003efinally\u003c/samp\u003e, który wykonywany jest zawsze\n    bez względu na to czy błąd się pojawi, czy nie. Ilustracją będzie rozbudowa poprzedniego\n    przykładu, który będzie obliczał sumę pierwszych n-elementów tablicy. Zakładamy, że użytkownik\n    może podać niepoprawną wartość n. Jeśli indeks odczytywanego elementu jest niepoprawny, to przyjmujemy, że\n    elementu nie ma, więc jego wartość jest równa zero.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nimport java.util.Scanner;\n\nclass TryCatchFinallyDemo {\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4, 5, 9, 8, 7};\n    int sum\u003d 0;\n    Scanner scan\u003d new Scanner(System.in);\n    int n \u003d scan.nextInt();\n    int element \u003d 0;\n    for (int i \u003d 0; i \u003c n; i++) {\n      try {\n        element \u003d array[i];\n      } catch (ArrayIndexOutOfBoundsException e) {\n        element \u003d 0;\n      }\n      finally {\n        sum +\u003d element;\n      }\n    }\n    System.out.println(\"Suma elementów: \"+sum);\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W bloku \u003csamp\u003etry\u003c/samp\u003e  próbujemy odczytać element o indeksie \u003csamp\u003ei\u003c/samp\u003e. Jeśli przekroczymy zakres,\n    to zostanie wykonany blok \u003csamp\u003ecatch\u003c/samp\u003e, w którym nieistniejącej liczbie przypisujemy zero. Jeśli\n    indeks jest poprawny, to nie wystąpi błąd i zmienna \u003csamp\u003eelement\u003c/samp\u003e będzie liczbą z tablicy.\n    Blok \u003csamp\u003efinally\u003c/samp\u003e zawsze jest wykonywany, bez względu czy wystąpił błąd czy nie. W nim\n    dodajemy do zmiennej \u003csamp\u003esum\u003c/samp\u003e  wartość z \u003csamp\u003eelement\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    W bloku \u003csamp\u003etry\u003c/samp\u003e, może wystapić więcej błędów, także różnych typów. W takiej sytuacji\n    można dodać kilka klauzul \u003csamp\u003ecatch(typ-wyjątku obiekt-wyjątku)\u003c/samp\u003e, aby każda obsługiwała\n    wyjątki danego typu:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class MultiCatchDemo {\n  public static void main(String[] args) {\n    int[] array \u003d { 1, 2, 3, 4, 5};\n    Scanner scan \u003d new Scanner(System.in);\n    boolean isValid \u003d false;\n    int n \u003d 0;\n    int element \u003d 0;\n    System.out.println(\"Wpisz indeks od 0 do 4.\");\n    do {\n      try {\n        n \u003d scan.nextInt();\n        element \u003d array[n];\n        isValid \u003d true;\n      } catch (InputMismatchException e1) {\n        System.out.println(\"Wpisz indeks jako liczbę całkowitą!!! Spróbuj jeszcze raz.\");\n        String tmp \u003d scan.nextLine();\n      } catch (ArrayIndexOutOfBoundsException e2) {\n        System.out.println(\"Indeks musi być nieujemny i mniejszy od 5!!! Spróbuj jeszcze raz.\");\n      }\n    }while (!isValid);\n    System.out.println(\"Liczba w tablicy o indeksie \"+n+\" \u003d \"+element);\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Blok \u003csamp\u003etry\u003c/samp\u003e zawiera trzy instrukcje, przy czym w dwu pierwszych mogą wystąpić dwa różne wyjątki:\n    nieprawidlowego typu danej wczytaje z klawiatury lub niepoprawnego indeksu. Każda z klauzul \u003csamp\u003ecatch\u003c/samp\u003e\n    odpowiada za jeden typ wyjątku. Przykład ilustruje też, że obsługa wyjątków zaburza normalny\n    przepływ wykonywanych instrukcji. Trzecia instrukcja \u003csamp\u003eisValid\u003dtrue;\u003c/samp\u003e zostanie wykonana, jeśli\n    w dwu poprzednich nie zostaie zgłoszony wyjątek. Gdy pojawia się wyjątek, wykonywany jest niejawny skok do\n    odppowiedniej klauzuli \u003csamp\u003ecatch\u003c/samp\u003e i wykonywany kod obsługi wyjątku. Po obsłużeniu wyjątku wykonywanym\n    jest pierwszy rozkaz za konstrukcją try ... catch ... Z tej przyczyny nasza pętla \u003csamp\u003edo ... while\u003c/samp\u003e jest\n    wykonywana tak długo, aż nie wystąpi wyjątek i zostanie zmiennej \u003csamp\u003eisValid\u003c/samp\u003e przypisana wartość\n    spełniająca zakończenie powtarzania iteracji.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/SimpleThrowsDemo.java": {
                  "name": "src/SimpleThrowsDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\npublic class SimpleThrowsDemo {\n  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{\n    return arr[i];\n  }\n\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3};\n    int sum\u003d 0;\n    for (int i \u003d 0; i \u003c 5; i++) {\n      try {\n        sum +\u003d getElement(array, i);\n      } catch (ArrayIndexOutOfBoundsException e) {\n      }\n    }\n    System.out.println(\"Suma elementów: \"+sum);\n  }\n}\n"
                },
                "src/ThrowsDemo.java": {
                  "name": "src/ThrowsDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\nclass ThrowsDemo {\n\n  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{\n    return arr[i];\n  }\n\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4, 5, 9, 8, 7};\n    int sum\u003d 0;\n    Scanner scan\u003d new Scanner(System.in);\n    System.out.println(\"Wpisz indeks elementu tablicy:\");\n    int n \u003d scan.nextInt();\n    int element \u003d 0;\n    for (int i \u003d 0; i \u003c n; i++) {\n      try {\n        element \u003d getElement(array, i);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        element \u003d 0;\n      }\n      finally {\n        sum +\u003d element;\n      }\n    }\n    System.out.println(\"Suma elementów: \"+sum);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eObsługa wyjątku - przekazywanie wyjątku przez throws\u003c/h1\u003e\n\u003cp\u003e\nDrugą metodą reakcji na błędy przy pomocy wyjątków, jest przekazanie wyjątku do funkcji wywołującej.\nZilustujemy tę możliwość, modyfikując poprzedni przykład. Tym razem odczyt z tablicy będzie realizowała metoda,\nktóra będzie przekazywać wyjątek.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nimport java.util.Scanner;\n\nclass Task {\n\n  static int getElement(int []arr, int i) throws ArrayIndexOutOfBoundsException{\n    return arr[i];\n  }\n\n  public static void main(String[] args) {\n    int[] array \u003d {1, 2, 3, 4, 5, 9, 8, 7};\n    int sum\u003d 0;\n    Scanner scan\u003d new Scanner(System.in);\n    int n \u003d scan.nextInt();\n    int element \u003d 0;\n    for (int i \u003d 0; i \u003c n; i++) {\n      try {\n        element \u003d getElement(array, i);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        element \u003d 0;\n      }\n      finally {\n        sum +\u003d element;\n      }\n    }\n    System.out.println(\"Suma elementów: \"+sum);\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Metoda \u003csamp\u003egetElement()\u003c/samp\u003e nie obsługuje wyjątku. Dodanie klauzuli \u003csamp\u003ethrows\u003c/samp\u003e powoduje, że jeśli wystąpi wyjątek o wskazanym typie (w tym przypadku \u003csamp\u003eArrayIndexOutOfBoundsException\u003c/samp\u003e) to zostanie on przekazy metodzie, która wywołała \u003csamp\u003egetElement()\u003c/samp\u003e. Dlatego w metodzie \u003csamp\u003emain\u003c/samp\u003e musieliśmy dodać konstrukcję \u003csamp\u003etry .. catch ... finally\u003c/samp\u003e, aby obsłużyć przekazany wyjątek z metody.\n\u003c/p\u003e\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/FinallyDemo.java": {
                  "name": "src/FinallyDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class FinallyDemo {\n\n  public static int getElement(int[] arr, int i){\n    int element \u003d 0;\n    try{\n      return arr[i];\n    } catch (ArrayIndexOutOfBoundsException e) {\n      return 0;\n    }\n    finally {\n      return -10;\n    }\n  }\n\n  public static void main(String[] args) {\n    int[] arr \u003d {1, 2, 3, 4};\n    System.out.println(getElement(arr, 3));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eBlok finally\u003c/h1\u003e\n\u003cp\u003e\n    Blok \u003csamp\u003efinally\u003c/samp\u003e ma jeszcze jedną ciekawą właściwość. Blok ten jest zawsze wykonywany jako ostatni\n    w konstrukcji \u003csamp\u003etry ... catch ... finally\u003c/samp\u003e bez względu czy w dwu poprzednich blokach występują instrukcje\n    skoku w tym też \u003csamp\u003ereturn\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass FinallyDemo {\n\n  public static void main(String[] args) {\n    int[] arr \u003d {1, 2, 3, 4};\n    int el \u003d 0;\n    try{\n      el \u003d arr[3];\n      System.out.println(el);\n      return;\n    } catch (ArrayIndexOutOfBoundsException e){\n      System.out.println(\"Niepoprawny indeks\");\n    }\n    finally {\n      System.out.println(\"Koniec programu\");\n    }\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Efektem wykonania programu będą dwa komunikaty:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003csamp\u003e\n4\nKoniec programu\n    \u003c/samp\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n   Jest to kolejny dowód na niezwykłość instrukcji \u003csamp\u003etry\u003c/samp\u003e i ilustruje jak zaburza ona\n    kolejności wykonywanych instrukcji. Teoretycznie powinien wyświetlić się tylko numer liczby z tablicy bo\n    za instrukcją \u003csamp\u003eSystem.out.println(el)\u003c/samp\u003e znajduje się \u003csamp\u003ereturn\u003c/samp\u003e, który powinien zakończyć\n    działanie programu. Blok \u003csamp\u003efinally\u003c/samp\u003e musi wykonać swój kod i dlatego został wyświetlony\n    drugi komunikat.\n\u003c/p\u003e\n\u003cp\u003eNależy też pamiętać, że jeśli w każdym bloku instrukcji \u003csamp\u003etry\u003c/samp\u003e znajdzie się \u003csamp\u003ereturn\u003c/samp\u003e,\nto metoda zwróci wartość instrukcji z bloku \u003csamp\u003efinally\u003c/samp\u003e:\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic static int getElement(int[] arr, int i){\n    int element \u003d 0;\n    try{\n      return arr[i];\n    } catch (ArrayIndexOutOfBoundsException e) {\n      return 10;\n    }\n    finally {\n      return 0;\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Bez względu na to, czy wystąpi wyjątek, czy nie , to funkcja zawsze będzie zwracać wartość 0,\n    bo \u003csamp\u003ereturn 0;\u003c/samp\u003e z bloku \u003csamp\u003efinally\u003c/samp\u003e zawsze będzie wykonana jako ostatnia,\n    i anuluje wartości zwracane z poprzednich bloków.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 5",
              "stepic_id": 0,
              "task_files": {
                "src/ThrowDemo.java": {
                  "name": "src/ThrowDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class ThrowDemo {\n\n  static double divide(int a, int b) throws ArithmeticException {\n    if (a \u003d\u003d 0 \u0026\u0026 b \u003d\u003d 0) {\n      throw new ArithmeticException(\"Dzielenie zara przez zero: a \u003d \" + a + \" b \u003d \" + b);\n    }\n    if (b \u003d\u003d 0) {\n      throw new ArithmeticException(\"Dzielenie przez zero: b \u003d \" + b);\n    }\n    return (double) a / b;\n  }\n\n  public static void main(String[] args) {\n    try {\n      System.out.println(divide(10, 0));\n    } catch (ArithmeticException e) {\n      System.out.println(e.getMessage());\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eZgłaszanie wyjątków przez throw\u003c/h1\u003e\n\u003cp\u003e\n  Tworzone własnoręcznie klasy też powinny zgłaszać wyjątki w sytuacjach wystąpienia błędu.\n  Możemy samodzielnie je tworzyć i przekazywać. Wyrzucanie wyjątku polega na utworzeniu obiektu wyjątku i przekazanie go instrukcją \u003csamp\u003etrow\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Na początek prosty przykład ilustrujący rzucanie wyjątku:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass ThrowDemo {\n\n  static double divide(int a, int b) throws ArithmeticException {\n    if (a \u003d\u003d 0 \u0026\u0026 b \u003d\u003d 0){\n      throw new ArithmeticException(\"Dzielenie zera przez zero: b\u003d\"+b);\n    }\n    if (b \u003d\u003d 0){\n      throw new ArithmeticException(\"Dzielenie przez zero: a\u003d\"+a+\" b\u003d\"\u003db);\n    }\n    return (double)a/b;\n  }\n\n  public static void main(String[] args) {\n    try {\n      System.out.println(divide(10,20));\n    } catch (ArithmeticException e){\n      System.out.println(e.getMessage());\n    }\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Metoda \u003csamp\u003edivide()\u003c/samp\u003e testuje wartości obu argumentów i w zależności\n  od ich wartości rzuca dwa wyjątki tego samego typu. Rzucając samodzielnie\n  wyjątki klas bibliotecznych, mamy możliwość podania własnego komunikatu.\n  Korzystając z metody \u003csamp\u003egetMessage()\u003c/samp\u003e wyjątków możemy\n  wyświetlić nasz własny komunikat.\n\u003c/p\u003e\n\u003cp\u003e\n\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 6",
              "stepic_id": 0,
              "task_files": {
                "src/CustomExceptionDemo.java": {
                  "name": "src/CustomExceptionDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class InsufficientAmountException extends Exception {\n  long amount;\n  InsufficientAmountException(long amount, String message) {\n    super(message);\n    this.amount \u003d amount;\n  }\n}\n\nclass ExcessiveAmountException extends Exception {\n  long amount;\n  ExcessiveAmountException(long amount, String message) {\n    super(message);\n    this.amount \u003d amount;\n  }\n}\n\nclass Bank {\n  static long MaximumAmount \u003d 15000;\n  private long balance;\n\n  public Bank(long balance){\n    this.balance \u003d balance;\n  }\n\n  public void withdraw(long amount) throws InsufficientAmountException, ExcessiveAmountException {\n    long newBalance \u003d getBalance(amount);\n    if(newBalance \u003c 0)\n      throw new InsufficientAmountException(amount, \"Za mały stan konta na wypłatę\");\n    if(amount \u003e MaximumAmount)\n      throw new ExcessiveAmountException(amount, \"Zbyt duża kwota wypłaty\");\n    balance \u003d newBalance;\n  }\n\n  public long getBalance(){\n    return balance;\n  }\n\n  private long getBalance(long amount) {\n    return balance - amount;\n  }\n}\n\npublic class CustomExceptionDemo {\n  public static void main(String[] args) {\n    Bank myBank \u003d new Bank(2400);\n    try {\n      myBank.withdraw(300);\n    } catch (InsufficientAmountException e) {\n      System.out.println(e.getMessage() + \" \" + e.amount);\n    } catch (ExcessiveAmountException e) {\n      System.out.println(e.getMessage() + \" \" + e.amount);\n    }\n    System.out.println(myBank.getBalance());\n  }\n}\n"
                },
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTworzenie własnych klas wyjątków\u003c/h1\u003e\n\u003cp\u003e\n  Gdy stworzymy klasę i nie znajdziemy gotowej klasy wyjątku, która pasowałaby do zgłaszanego\n  błędu, możemy samodzielnie stworzyć własną klasę wyjątku.\n\u003c/p\u003e\n\u003cp\u003e\n  Na rysunku poniżej znajduje się hierarchia klas, które służa do tworzenia wyjątków i błędów.\n\u003cimg src\u003d\"\\img\\throwable.png\"\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Z klasy \u003csamp\u003eThrowable\u003c/samp\u003e wyprowadzone sa dwie klasy. Klasa \u003csamp\u003eError\u003c/samp\u003e służy do zgłaszania poważnych błędów, których nie można\n  naprawić ani odpowiednio zareagować. Są to takie błedy jak brak pamięci (ang. \u003ci\u003eout of memory\u003c/i\u003e, przepełnienie stosu (ang\u003ci\u003estack overflow\u003c/i\u003e, błędna definicja klasy, brak\n  zdefiniowanej klasy itd.\n\u003c/p\u003e\n\u003cp\u003e\n  Klasa \u003csamp\u003eException\u003c/samp\u003e odpowiada za wszystkie pozostałe błędy, które można obsłużyć i ewentualnie naprawić. Wyjątki dzielą się na dwa rodzaje:\n  \u003csamp\u003echecked\u003c/samp\u003e, czyli takie które muszą być obsłużone lub przekazane do obsługi jawnie i \u003csamp\u003eunchecked\u003c/samp\u003e, które nie wymagają jawnej obsługi. Oba rodzaje są funkcjonalnie identyczne.\nPrzykładem wyjątku typu \u003csamp\u003eunchecked\u003c/samp\u003e jest \u003csamp\u003eArrayIndexOutOfBounds\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Własny wyjątek musi być klasą wyprowadzoną z klasy \u003csamp\u003eThrowable\u003c/samp\u003e lub jej potomnych, najczęściej z klasy \u003csamp\u003eException\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass InsufficientAmountException extends Exception {\n  long amount;\n  InsufficientAmountException(long amount) {\n    this.amount \u003d amount;\n  }\n}\n\nclass ExcessiveAmountException extends Exception {\n  long amount;\n  ExcessiveAmountException(long amount) {\n    this.amount \u003d amount;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nObie klasy można teraz wykorzystać do definicji klasy konta w banku.\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Bank {\n  static long MaximumAmount \u003d 15000;\n  public void withdraw(long accNo, long amount)\n    throws InsufficientAmountException, ExcessiveAmountException {\n      long balance \u003d getBalance(accNo);\n      if(balance \u003c amount)\n        throw new InsufficientAmountException(amount);\n      if(amount \u003e MaximumAmount)\n        throw new ExcessiveAmountException(amount);\n      //else withdraw...\n  }\n  private long getBalance(long accNo) {\n    return 0;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {
                "img/throwable.png": {
                  "is_visible": true,
                  "text": ""
                }
              },
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Typy generyczne",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/GenericDemo.java": {
                  "name": "src/GenericDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import jdk.nashorn.internal.runtime.regexp.joni.ast.StringNode;\n\nimport java.time.LocalDate;\n\nclass Node\u003cT\u003e {\n  T data;\n  Node next;\n\n  @Override\n  public String toString(){\n    return data.toString();\n  }\n}\n\n\nclass GenericDemo {\n\n  public static void main(String[] args) {\n    Node\u003cString\u003e stringNode \u003d new Node\u003c\u003e();\n    Node\u003cLocalDate\u003e dateNode \u003d new Node\u003c\u003e();\n\n    stringNode.data \u003d \"Obiekt typu generycznego\";\n    dateNode.data \u003d LocalDate.now();\n\n    stringNode.next \u003d dateNode;\n    while(stringNode !\u003d null){\n      System.out.println(stringNode);\n      stringNode \u003d stringNode.next;\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePodstawy typów generycznych\u003c/h1\u003e\n\u003cp\u003e\n  Dotąd tworzyliśmy zmienne, które umożliwiały przechowywanie wartości\n  zgodne ze swoim typem. Typ generyczny, to rodzaj zmiennej, a dokładniej parametru, która nie przechowuje wartości ale typ.\n\u003c/p\u003e\n\u003cp\u003e\n    W celu łatwiejszego zrozumienia typów generycznych przypomnijmy klasę węzła do\n    przetwarzania list jednokierunkowej. Węzeł przechowujący łańcuchy to klasa o poniższej definicji:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Node{\n  String data;\n  Node next;\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Jeśli potrzebujemy węzła przechowującego daty, to musimy zdefiniować taką klasę:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Node{\n  LoaclDate data;\n  Node next;\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Obie klasy różnią się typem pola \u003csamp\u003edata\u003c/samp\u003e i widać, że tworzenie kolejnych\n    węzłów do przechowywania innych klas to zmiana typu tego pola.\n\u003c/p\u003e\n\u003cp\u003e\n    Można ułatwić sobie pracę, definiując klasę parametryczną, poprzez dodanie za nazwą klasy\n    listy parametrów, w których miejscu pojawią się konkretne typy:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Node \u0026lt;T\u0026gt;{\n    T data;\n    Node next;\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Zdefiniona klasa daje możliwość teraz tworzenia węzłów z dowolnym typem pola \u003csamp\u003edata\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nNode \u0026lt;String\u0026gt; stringNode \u003d new Node\u003c\u003e();\nNode \u0026lt;LocalDate\u0026gt; dateNode \u003d new Node\u003c\u003e();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W miejscu typu generycznego mogą wystąpić wyłącznie typy złożone, klasy lub interfejsy.\n    Można też spotkać się z podawaniem typu generycznego na wiasach \u003c\u003e po nazwie klasy:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nNode \u0026lt;String\u0026gt; stringNode \u003d new Node\u0026lt;String\u0026gt;();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Ten sposób jest poprawny, ale podanie drugi raz konkretnego typu jest zbędnę i nic\n    nie wnosi, dlatego rzadko jest stosowany.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/GenericsMethodDemo.java": {
                  "name": "src/GenericsMethodDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.EmptyStackException;\n\nclass GStack\u003cT\u003e {\n  private class Node\u003cT\u003e {\n    T data;\n    Node next;\n\n    Node(T element){\n      this.data \u003d element;\n      this.next \u003d null;\n    }\n\n    @Override\n    public String toString(){\n      return data.toString();\n    }\n  }\n\n  private Node\u003cT\u003e stack;\n\n  public GStack(){\n    stack \u003d null;\n  }\n\n  public void push(T element){\n    Node\u003cT\u003e node \u003d new Node\u003c\u003e(element);\n    node.next \u003d stack;\n    stack \u003d node;\n  }\n\n  public T pop(){\n    if (stack \u003d\u003d null){\n      throw new EmptyStackException();\n    }\n    T element \u003d stack.data;\n    stack \u003d stack.next;\n    return element;\n  }\n\n  public boolean isEmpty(){\n    return stack \u003d\u003d null;\n  }\n}\nclass GenericsMethodDemo {\n  public static void main(String[] args) {\n    GStack\u003cString\u003e stack \u003d new GStack\u003c\u003e();\n    stack.push(\"ALA\");\n    stack.push(\"OLA\");\n    stack.push(\"ELA\");\n    while(!stack.isEmpty()){\n      System.out.println(stack.pop());\n    }\n\n    GStack\u003cInteger\u003e istack \u003d new GStack\u003c\u003e();\n    istack.push(10);\n    istack.push(12);\n    istack.push(14);\n    while(!istack.isEmpty()){\n      System.out.println(istack.pop());\n    }\n  }\n\n\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eMetody generyczne\u003c/h1\u003e\n\u003cp\u003e\nKolejną możliwością jest definiowanie metod generycznych, kóre mogą przyjmować parametry jaki i zwracać wartości typu\ngenerycznego. Tę możliwość wykorzystamy do stworzenia stosu generycznego, w którym umieścimy zdefiniowaną wcześniej\nklasę Node.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass NodeStack \u0026lt;T\u0026gt; {\n  private class Node\u0026lt;T\u0026gt; {\n    T data;\n    Node next;\n\n    Node(T element){\n      this.data \u003d element;\n      this.next \u003d null;\n    }\n\n    @Override\n    public String toString(){\n      return data.toString();\n    }\n  }\n\n  private Node\u0026lt;T\u0026gt; stack;\n\n  public NodeStack(){\n    stack \u003d null;\n  }\n\n  public void push(T element){\n    Node\u0026lt;T\u0026gt; node \u003d new Node\u003c\u003e(element);\n    node.next \u003d stack;\n    stack \u003d node;\n  }\n\n  public T pop(){\n    if (stack \u003d\u003d null){\n      throw new EmptyStackException();\n    }\n    T element \u003d stack.data;\n    stack \u003d stack.next;\n    return element;\n  }\n\n  public boolean isEmpty(){\n    return stack \u003d\u003d null;\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Wewnątrz sparametryzowanej klasy \u003csamp\u003eNodeStack\u003c/samp\u003e, możemy korzystać z typu generycznego\n  w każdej metodzie tej klasy. Metoda \u003csamp\u003epush(T element)\u003c/samp\u003e przyjmuje argument typu parametrycznego, a \u003csamp\u003eT pop()\u003c/samp\u003e zwraca wartość typu generycznego. Zrozumienie co zonac\n\u003c/p\u003e\n\u003cp\u003e\n  W chwili gdy utworzymy obiekt klasy generycznej, i w miejscu parametry T pojawi się konretny typ, zostanie on ustalony także dla parametrów i wartości zwracanej metod\n  generycznych. Na przykład dla węzła z typem \u003csamp\u003eString\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cprev\u003e\n  \u003ccode\u003e\n  NodeStack\u0026lt;String\u0026gt stringStack \u003d new NodeStack\u003c\u003e();\n  \u003c/code\u003e\n\u003c/prev\u003e\n\u003cp\u003e\n  pod typ generyczny \u003csamp\u003eT\u003c/samp\u003e zostanie podstawiony konkretny typ \u003csamp\u003eString\u003c/samp\u003e\n  a wtedy metoda \u003csamp\u003epush\u003c/samp\u003e będzie miała konkretną definicję:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n public void push(String element){\n    Node\u0026lt;String\u0026gt; node \u003d new Node\u003c\u003e(element);\n    node.next \u003d stack;\n    stack \u003d node;\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  W ciele metody mamy także tworzenie obiektu klasy generycznej więc, tam także\n  pojawi się konretny typ i zostanie utworzony obiekt klasy \u003csamp\u003eNode\u003c/samp\u003e dla typu \u003csamp\u003eString\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/GenericsInterfaceDemo.java": {
                  "name": "src/GenericsInterfaceDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "interface Comparable\u003cT\u003e{\n  int compareTo(T o);\n}\n\nclass Theme implements Comparable\u003cTheme\u003e{\n  String data;\n  public Theme(String data){\n    this.data \u003d data;\n  }\n\n  @Override\n  public int compareTo(Theme o) {\n    return data.length() \u003e o.data.length() ? 1 : data.length() \u003c o.data.length() ? -1 : 0;\n  }\n}\n\nclass Number implements Comparable\u003cNumber\u003e {\n  Integer data;\n\n  public Number(Integer data) {\n    this.data \u003d data;\n  }\n\n  @Override\n  public int compareTo(Number o) {\n    return data.intValue() \u003e o.data.intValue() ? 1 : data.intValue() \u003c o.data.intValue() ? -1 : 0;\n  }\n}\n\nclass GenericsInterfaceDemo{\n  public static void main(String[] args) {\n    Comparable str1 \u003d new Theme(\"ALA\");\n    Comparable str2 \u003d new Theme(\"ELA\");\n    Comparable n1 \u003d new Number(12);\n    Comparable n2 \u003d new Number(34);\n    System.out.println(str1.compareTo(str2));\n    System.out.println(n1.compareTo(n2));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eInterfejsy generyczne\u003c/h1\u003e\n\u003cp\u003e\n    Duże możliwości oferują interfejsy generyczne. Typowym przykładem takiego interfejsu jest klasa porównująca.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\ninterface Comparable\u0026lt;T\u0026gt;{\n    int compareTo(T o);\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Klasa może implementoować taki interfejs:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Number implements Comparable\u0026lt;Number\u0026gt; {\n    private Integer data;\n\n    public Number(Integer data) {\n        this.data \u003d data;\n    }\n\n    @Override\n    public int compareTo(Number o) {\n        return data.intValue() \u003e o.data.intValue() ? 1 : data.intValue() \u003c o.data.intValue() ? -1 : 0;\n    }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Typowym protokołem porównania dwóch obiektów, jest zwracania wartości 1, jeśli obiekt wywołujący compareTo\n    jest większa od obiektu, który jest argumentem, wartości -1 jeśli jest mniejszy, a 0 gdy są oba równe.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Person {\n  String firstName;\n  String lastName;\n  public Person(String fName, String lName){\n    firstName \u003d fName;\n    lastName \u003d lName;\n  }\n\n  @Override\n  public String toString(){\n    return firstName+\" \"+lastName;\n  }\n}\n\nclass Team\u003cT extends Person\u003e{\n  Person[] staff;\n  int count \u003d 0;\n\n  public Team(int size){\n    staff \u003d new Person[size];\n  }\n\n  public void add(T member){\n    if (count \u003c staff.length) {\n      staff[count++] \u003d member;\n    }\n  }\n\n  @Override\n  public String toString(){\n    String result \u003d \"\";\n    for(Person m: staff){\n      result +\u003d m !\u003d null?m+\" \":\"\";\n    }\n    return result;\n  }\n\n  public T getMember(int i){\n    if (i \u003c staff.length)\n      return (T) staff[i];\n    else\n      return null;\n  }\n}\n\nclass Worker extends Person{\n  String rank;\n  double salary;\n\n  public Worker(String fName, String lName, String rank, double salary){\n    super(fName,lName);\n    this.rank \u003d rank;\n    this.salary \u003d salary;\n  }\n\n  @Override\n  public String toString(){\n    return super.toString()+\" \"+rank+\" \"+salary;\n  }\n}\n\nclass Task {\n  public static void main(String[] args) {\n    Team\u003cWorker\u003e smurfs \u003d new Team\u003c\u003e(4);\n    smurfs.add(new Worker(\"Ważniak\", \"Smurf\", \"mądrala\", 10.0));\n    smurfs.add(new Worker(\"Osiłek\", \"Smurf\", \"siłacz\", 100.0));\n    smurfs.add(new Worker(\"Papa\", \"Smurf\", \"szef\", 1000.0));\n    System.out.println(smurfs);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eOgraniczenia typów\u003c/h1\u003e\n\u003cp\u003e\n  Klasy generyczne moga posiadać wiele parametrów, a parametry mogą mieć różne znaczenie. Aby łatwo je identyfikować\n  przyjęto konwencję ich oznaczania:\n  \u003cul\u003e\n  \u003cli\u003e\n    E – Element: element kolekcji (szeroko wykorzystywany w kolekcjach Javy, jak np. ArrayLis, Set)\n  \u003c/li\u003e\n  \u003cli\u003e\n    K – Key: klucz, wartość służaca do szybkiej identyfikacji wartości\n  \u003c/li\u003e\n  \u003cli\u003e\n    N – Number: liczba, czyli dowolny typ wartości numerycznej\n  \u003c/li\u003e\n  \u003cli\u003e\n    T – Type: typ parametryczny, gdy parametr klasy nie ma jakiegość szczególnego znaczenia\n  \u003c/li\u003e\n  \u003cli\u003e\n    V – Value: wartość, którą kojarzymy z kluczem\n  \u003c/li\u003e\n  \u003cli\u003e\n    S,U,V etc. – drugi, trzeci, czwarty typ parametryczny, wykorzystywane, gdy klasa ma więcej niż jeden parametr\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Przedstawiona konwencja służy do rozpoznawania znaczenia danego parametry generycznego, ale można także\n  wprowadzać ograniczenia. Ograniczenia mogą dotyczyć superklasy lub implementacji interfejsu typu generycznego:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Team\u0026lt;T extends Person\u0026gt;{\n  Person[] staff;\n  int count \u003d 0;\n\n  public Team(int size){\n    staff \u003d new Person[size];\n  }\n\n  public void add(T member){\n    if (count \u003c staff.length) {\n      staff[count++] \u003d member;\n    }\n  }\n\n  @Override\n  public String toString(){\n    String result \u003d \"\";\n    for(Person m: staff){\n      result +\u003d m !\u003d null ? m + \" \" : \"\";\n    }\n    return result;\n  }\n\n  public T getMember(int i){\n    if (i \u003c staff.length)\n      return (T) staff[i];\n    else\n      return null;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Tylko klasa \u003csamp\u003ePerson\u003c/samp\u003e lub wyprowadzona z niej może zostać parametrem klasy \u003csamp\u003eTeam\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Worker extends Person{\n  String rank;\n  double salary;\n\n  public Worker(String fName, String lName, String rank, double salary){\n    super(fName,lName);\n    this.rank \u003d rank;\n    this.salary \u003d salary;\n  }\n\n  @Override\n  public String toString(){\n    return super.toString()+\" \"+rank+\" \"+salary;\n  }\n}\n\n...\n\npublic static void main(String[] args) {\n    Team\u0026lt;Worker\u0026gt; smurfs \u003d new Team\u003c\u003e(4);\n    smurfs.add(new Worker(\"Ważniak\", \"Smurf\", \"mądrala\", 10.0));\n    smurfs.add(new Worker(\"Osiłek\", \"Smurf\", \"siłacz\", 100.0));\n    smurfs.add(new Worker(\"Papa\", \"Smurf\", \"szef\", 1000.0));\n    System.out.println(smurfs);\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Ograniczenie z jednej strony blokuje możliwość tworzenia klas \u003csamp\u003eTeam\u003c/samp\u003e dla dowolnego typu parametrycznego, z drugiej\n  daje pewność, że parametr klasy będzie zaopatrzony w odpowiednie metody i pola klasy ograniczającej. W naszym przykładzie wiemy, że każdy członek\n  klasy \u003csamp\u003eTeam\u003c/samp\u003e ma pola \u003csamp\u003efirstName\u003c/samp\u003e i \u003csamp\u003elastName\u003c/samp\u003e, bo takie pola ma klasa ograniczająca \u003csamp\u003ePerson\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Ograniczenia mogą dotyczyć także implementacji interfejsów. Ponieważ typ\n  parametryczny może jednocześnie dziedziczyć po jednej klasie i jednocześnie\n  impementować wiele interfejsów, ograniczenia należy łączyć operatorem \u003csamp\u003e\u0026\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Team\u0026lt;T\u0026gt; extends Person \u0026 Comparable\u003e{\n\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 5",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.time.Period;\n\nclass Person {\n  String name;\n  LocalDate birth;\n  public Person(String Name, LocalDate birth){\n    this.name \u003d name;\n    this.birth \u003d birth;\n  }\n\n  public int getAge(){\n    return (Period.between(LocalDate.now(), birth)).getYears();\n  }\n}\n\nclass Worker extends Person{\n  double salary;\n  public Worker(String name, LocalDate date, double salary){\n    super(name, date);\n    this.salary \u003d salary;\n  }\n}\n\nclass Duet\u003cT extends Person\u003e{\n  Person[] team \u003d new Person[2];\n  public Duet(T p1, T p2){\n    team[0] \u003d p1;\n    team[1] \u003d p2;\n  }\n\n  public boolean isOlder(Duet\u003c?\u003e t){\n    return team[0].getAge()+team[1].getAge() \u003e t.team[0].getAge()+t.team[1].getAge();\n  }\n}\n\nclass Task {\n  public static void main(String[] args) {\n    Duet\u003cPerson\u003e smurf \u003d new Duet\u003c\u003e(new Person(\"Ważniak\", LocalDate.of(2000,10,11)),\n                        new Person(\"Osiłek\", LocalDate.of(2001, 4, 23)));\n    Duet\u003cWorker\u003e muchomorki \u003d new Duet\u003c\u003e(new Worker(\"Turkuć\", LocalDate.of(2000,10,11), 11),\n          new Worker(\"Podjadek\", LocalDate.of(2002, 4, 23),234));\n  System.out.println(smurf.isOlder(muchomorki));\n  }\n\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eArgument wieloznaczny\u003c/h1\u003e\n\u003cp\u003e\nArgumentem metody może też być klasa generyczna. Jeśli rolą takiego argumentu jest tylko udostępnienie metody tej klasy, wtedy podanie konkretnego typu\n stanowi ograniczenie funkcjonalności.\n\u003c/p\u003e\n\u003cp\u003e\n    Problem zilustrujemy przykładem. Klasa generyczna \u003csamp\u003eDuet\u003c/samp\u003e posiada metodę testującą, czy suma wieku obu członków\n    jest większa od takiej samej sumy innego duetu.\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Duet\u0026lt;T extends Person\u0026gt;{\n    Person[] team \u003d new Person[2];\n    public Duet(T p1, T p2){\n        team[0] \u003d p1;\n        team[1] \u003d p2;\n    }\n\n    public boolean isOlder(Duet\u0026lt;T\u0026gt; t){\n        return team[0].getAge()+team[1].getAge() \u003e t.team[0].getAge()+t.team[1].getAge();\n    }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Gdy utworzymy dwa duety na podstawie dwu różnych klas, to podczas wywoływania metody \u003csamp\u003eisOlder()\u003c/samp\u003e pojawi się problem:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nDuet\u0026lt;Person\u0026gt; smurfs \u003d   new Duet\u003c\u003e(new Person(\"Ważniak\", LocalDate.of(2000,10,11)),\n                        new Person(\"Osiłek\", LocalDate.of(2001, 4, 23)));\nDuet\u0026lt;Worker\u0026gt; muchomorki \u003d new Duet\u003c\u003e(new Worker(\"Turkuć\", LocalDate.of(2000,10,11), 11),\n                          new Worker(\"Podjadek\", LocalDate.of(2002, 4, 23),234));\nSystem.out.println(smurfs.isOlder(muchomorki));\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003csamp\u003e\n    Error:(43, 36) java: incompatible types: Duet\u0026lt;Worker\u0026gt; cannot be converted to Duet\u0026lt;Person\u0026gt\n\u003c/samp\u003e\n\u003cp\u003e\n  Komunikat wskazuje, że nie można skonwertować argumentu \u003csamp\u003emuchomorki\u003c/samp\u003e typu \u003csamp\u003eDuet\u0026lt;Worker\u0026gt;\u003c/samp\u003e do typu \u003csamp\u003eDuet\u0026lt;Person\u0026gt;\u003c/samp\u003e. Skąd ten komunikat?\n\u003c/p\u003e\n\u003cp\u003e\n    Przed kompilacją w obiekcie \u003csamp\u003esmurfs\u003c/samp\u003e, parametr \u003csamp\u003eT\u003c/samp\u003e klasy generycznej \u003csamp\u003eDuet\u003c/samp\u003e stała się konkretnym typem \u003csamp\u003ePerson\u003c/samp\u003e.\n    Metoda \u003csamp\u003eisOlder()\u003c/samp\u003e została skonkretyzowana do metody\n    o sygnaturze:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic boolean isOlder(Duet\u0026lt;Person\u0026gt; t);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    a my w kodzie w miejscu parametru \u003csamp\u003et\u003c/samp\u003e podaliśmy obiekt \u003csamp\u003emuchomorki\u003c/samp\u003e klasy\n    \u003csamp\u003eTeam\u0026lt;Worker\u0026gt;\u003c/samp\u003e?!! Stąd komunikat, że typ argumentu wywołania nie pasuje do\n    typu w sygnaturze metody.\n\u003c/p\u003e\n\u003cp\u003eW kodzie kłopotliwej metody korzystamy tylko z metod dostępnych w klasie bazowej parametru generycznego, czyli klasy \u003csamp\u003ePerson\u003c/samp\u003e, Dla działania metody nie jest istotne czy argumentem jest duet obiektów\n    typu \u003csamp\u003ePerson\u003c/samp\u003e lub \u003csamp\u003eWorker\u003c/samp\u003e. Żeby wskazać, że typ argumentu może być dowolny skorzystamy z argumentu wieloznacznego \u003csamp\u003e?\u003c/samp\u003e:\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Duet\u0026lt;T extends Person\u0026gt;{\n    Person[] team \u003d new Person[2];\n    public Duet(T p1, T p2){\n        team[0] \u003d p1;\n        team[1] \u003d p2;\n    }\n\n    public boolean isOlder(Duet\u0026lt;?\u0026gt; t){\n        return team[0].getAge()+team[1].getAge() \u003e t.team[0].getAge()+t.team[1].getAge();\n    }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Ta zmiana powoduje, że przedstawiony przykład już działa poprawnie, a argumentem metody\n    może być dowolny obiekt klasy \u003csamp\u003eDuet\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Podsumowanie",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "\nimport java.time.LocalDate;\nimport java.util.*;\n\nabstract class AbstractField\u003cT\u003e{\n  private String name;\n  private T type;\n  private boolean canRead;\n  private boolean canWrite;\n  private boolean visible;\n\n  public AbstractField(String name, T type){\n    this.type \u003d type;\n    this.name \u003d name;\n  }\n\n  public String getName(){\n    return name;\n  }\n\n  public T getType(){\n    return type;\n  }\n}\n\ninterface Enumerable{\n  Map\u003cString, AbstractField\u003e values();\n\n  default void addValue(AbstractField o){\n    values().put(o.getName(), o);\n  }\n\n  default AbstractField ofValue(String name){\n    if (values().containsKey(name)){\n      return values().get(name);\n    }\n    return null;\n  }\n\n  default void print(){\n    for(AbstractField f: values().values()){\n      System.out.println(f.getName() +\" \"+ f.getType());\n    }\n  }\n}\nclass CountryFields\u003cT\u003e extends AbstractField\u003cT\u003e implements  Enumerable{\n  static final CountryFields\u003cInteger\u003e ID \u003d new CountryFields\u003c\u003e(\"ID\", 0);\n  static final CountryFields\u003cString\u003e NAME \u003d new CountryFields\u003c\u003e(\"NAME\", \"\");\n  static final CountryFields\u003cEntity\u003e CAPITAL \u003d new CountryFields\u003cEntity\u003e(\"CAPITAL\", new Entity\u003cCityFields\u003e());\n\n  public CountryFields(String name, T type) {\n    super(name, type);\n    addValue(this);\n  }\n\n  @Override\n  public Map\u003cString, AbstractField\u003e values() {\n    return null;\n  }\n}\n\nclass CityFields\u003cT\u003e extends AbstractField\u003cT\u003e implements Enumerable{\n\n  static final CityFields\u003cInteger\u003e GEO_NAME_ID\u003d new CityFields(\"GEO_NAME_ID\",1);\n  static final CityFields\u003cString\u003e  NAME \u003d new CityFields(\"NAME\", \"none\");\n  static final CityFields\u003cString\u003e  ASCII_NAME \u003d new CityFields(\"ASCII_NAME\",\"none\");\n  static final CityFields\u003cString\u003e  ALTERNATIVE_NAME \u003d new CityFields(\"ALTERNATIVE_NAME\",\"none\");\n\n  static Map\u003cString, AbstractField\u003e values;\n\n  private CityFields(String name, T defaultValue){\n    super(name, defaultValue);\n    addValue(this);\n  }\n\n  public Map\u003cString, AbstractField\u003e values(){\n    if (values \u003d\u003d null){\n      values \u003d new HashMap\u003c\u003e();\n    }\n    return values;\n  }\n\n  static void printFields(){\n    for(AbstractField f: values.values()){\n      CityFields cf \u003d (CityFields) f;\n      System.out.println(cf.getName());\n    }\n  }\n\n  static public CityFields valueOf(String name){\n    return (CityFields) values.get(name);\n  }\n}\n\nclass Value\u003cT extends AbstractField, V\u003e {\n  private V value;\n  private T column;\n\n  public Value(V value, T field) throws Exception {\n    if (value \u003d\u003d null || isType(value, field) ) {\n      this.value \u003d value;\n      this.column \u003d field;\n    } else{\n      throw new Exception(\"Invalid type value\");\n    }\n  }\n\n  public V getValue(){\n    return value;\n  }\n\n  private boolean isType(V value, T field) throws Exception {\n    if (value \u003d\u003d null) {\n      throw new Exception(\"Value cannot be null\");\n    }\n    return field.getType().getClass().isInstance(value);\n  }\n\n  public T getField() {\n    return column;\n  }\n}\n\nclass Entity\u003cT extends AbstractField \u0026 Enumerable\u003e {\n  private Map\u003cString, Value\u003e values;\n  public Entity(){\n    values \u003d new HashMap\u003c\u003e();\n  }\n\n  public void setValue(Value\u003cT, ?\u003e value){\n    if (value !\u003d null)\n      values.put(value.getField().getName(), value);\n  }\n\n  public Object getValue(T field){\n    if (values.containsKey(field.getName()))\n      return values.get(field.getName()).getValue();\n    return null;\n  }\n\n  public void printValues(){\n    for (Value v: values.values()){\n      System.out.println(v.getValue());\n    }\n  }\n  @Override\n  public String toString(){\n    StringBuilder b \u003d new StringBuilder();\n    for (Value v: values.values()){\n      System.out.println(v.getValue());\n      b.append(v.getField().getName() + \": \" + v.getValue() +\", \");\n    }\n    return b.append(\"\\b\\b\").toString();\n  }\n\n  public String toStringValues(){\n    StringBuilder b \u003d new StringBuilder();\n    for (Value v: values.values()){\n      b.append(v.getField().getName()+\"\\t\");\n    }\n    return b.append(\"\\b\\b\").toString();\n  }\n}\n\n\nclass City{\n  int geoNameId;\n  String name;\n  String asciiName;\n  String alternateNames;\n  double latitutude;\n  double longitude;\n  String featureClass;\n  String featureCode;\n  String countryCode;\n  String cc2;\n  String admin1Code;\n  String admin2Code;\n  String admin3Code;\n  String admin4Code;\n  long population;\n  int elevation;\n  int dem;\n  String timeZone;\n  LocalDate modificationDate;\n\n  public City(String row){\n    String[] fields \u003d row.split(\"\\t\");\n  }\n}\n\npublic class Task {\n  public static void main(String[] args) throws Exception {\n    CityFields.printFields();\n    System.out.println(CityFields.valueOf(\"NAME\"));\n    Entity\u003cCityFields\u003e city \u003d new Entity\u003c\u003e();\n    city.setValue(new Value\u003cCityFields, String\u003e(\"WARSAW\", CityFields.NAME));\n    city.setValue(new Value\u003cCityFields, Integer\u003e(1, CityFields.GEO_NAME_ID));\n    System.out.println(city);\n    Entity\u003cCountryFields\u003e poland \u003d new Entity\u003c\u003e();\n    poland.setValue(new Value\u003c\u003e(\"POLAND\", CountryFields.NAME));\n    poland.setValue(new Value\u003c\u003e(1,CountryFields.ID));\n    //poland.setValue(new Value\u003cCountryFields, Entity\u003e(city, CountryFields.CAPITAL));\n    System.out.println(poland);\n\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003ePodsumowanie\u003c/h1\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Termin \"typy generyczne\" odnosi się do specjalnych klas, które służa do wygenerowania\n    konretnych klas.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Typy generyczne to klasy lub interfejsy, które posiadają parametry.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Parametry typów generycznych są typami złożonymi, czyli innymi klasami lub interfejsami.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Parametry generyków podawane są w nawiasach \u003c\u003e np. \u003ccode\u003eclass Team\u0026lt;T\u0026gt;{}\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n   Typ generyczny jest tylko szablonem do tworzenia klas lub interfejsów. W chwili deklaracji obiektu typu generycznego np. \u003ccode\u003eTeam\u0026lt;Person\u0026gt; smurfs \u003d new Team\u003c\u003e();\u003c/code\u003e następuje podstawienie w miejscu  parametru T konkretnego typu i wygenerowanie właściwej klasy.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Typy generyczne mogą posiadać metody z parametrami generycznymi jak i mogą zwracać typ\n    generyczny.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Parametry typów generycznych mogą posiadać ograniczenia dotyczące klasy bazowej i/lub implementowanego interfejsu np.: \u003ccode\u003eclass Team\u0026lt;T extends Person \u0026 Comparable\u0026gt;{}\u003c/code\u003e oznacza, że w miejscu parametru \u003csamp\u003eT\u003c/samp\u003e można podać klasę wyprowadzoną z \u003csamp\u003ePerson\u003c/samp\u003e i implementującą interfejs \u003csamp\u003eComparable\u003c/samp\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Argument wieloznaczny ? służy, do sygnalizowania, że argumentem być obiekt klasy generycznej, której parametr jest dowolnego typu np. w metodzie \u003ccode\u003eboolean isOlder(Team\u0026lt;?\u0026gt; team);\u003c/code\u003e argumentem  może być każdy obiekt typy generycznego \u003csamp\u003eTeam\u003c/samp\u003e, którego parametrem może być dowolna klasa.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Kolekcje",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/ListDemo.java": {
                  "name": "src/ListDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.ArrayList;\nimport java.util.Collection;\n\nclass ListDemo{\n  public static void main(String[] args) {\n    //Tworzymy kolekcję elementów typu String na podstawie klasy ArrayList\n    Collection\u003cString\u003e membersA \u003d new ArrayList\u003cString\u003e();\n    //dodajemy elementy do kolekcji\n    membersA.add(\"ELA\");\n    membersA.add(\"ALA\");\n    membersA.add(\"OLA\");\n    //rozmiar kolekcji\n    System.out.println(membersA.size());\n    //usuwamy wszystkie elementy z kolekcji\n    membersA.clear();\n    //rozmiar kolekcji\n    System.out.println(membersA.size());\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eWstęp\u003c/h1\u003e\n\u003cp\u003e\n    Przedstawione w bloku \"Java. Programowanie podstawowe\" przykłady struktur danych, były\n    bardzo prymitywne i mało elastyczne. W praktyce programiści wykorzystują gotowe implementacje\n    najbardziej znanych i popularnych struktur danych. Zgromadzone są one w bibliotece powszechnie nazywanej kolekcjami (ang. Collections). Na kolekcje składa się kilka interfejsów, które\n    stanowią poniższą hierarchię:\n\u003c/p\u003e\n\u003cimg src\u003d\"images\\collections.png\"\u003e\n\u003cp\u003e\n W tej części będziemy omawiać kolekcje typu:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        List - listy, które są sekwencyjną elementów, z których każdy ma swój numer - indeks,\n    \u003c/li\u003e\n    \u003cli\u003e\n        Set - zbiory, które zawierają elementy niepowtarzalne, a ich kolejność nie ma znaczenia.\n    \u003c/li\u003e\n    \u003cli\u003e\n        Map - mapy, które gromadzą elementy identyfikowane przez klucz\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    Biblioteki posiadają także niezbędne metody do manipulowania strukturami, aby\n    w łatwiejszy sposób przetwarzać dane.\n\u003c/p\u003e\n\u003cp\u003e\n  Podstawą funkcjonowania wszystkich kolekcji (oprócz Map) jest wspólny interfejs generyczny Collections\u0026lt;E\u0026gt;, który posiada m.in. poniższe metody:\n\u003c/p\u003e\n\u003ctable border\u003d\"\" bgcolor\u003d\"#123456\" cellpadding\u003d\"4\" align\u003d\"center\"\u003e\n    \u003ctr\u003e\n        \u003ctd width\u003d\"40%\"\u003e\n            \u003ccode\u003eboolean add(E e)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Dodaje element typu E do kolekcji i zwraca true jeśli nastapiła zmiana kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean addAll(Collection\u003c? extends E\u003e c)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Dodaje do kolekcji wszystkie elementy z innej kolekcji i zwraca true, jeśli\n            nastąpiła zmiana zawartości kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean remove(Object o)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Usuwa element z kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean removeAll(Collection\u003c?\u003e c)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Usuwa z kolekcji wszystkie elementy zawarte w kolekcji \u003csamp\u003ec\u003c/samp\u003e.\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean retainAll(Collection\u003c?\u003e c)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Usuwa z kolekcji wsystkie elemementy, które nie są zawarte w kolekcji \u003csamp\u003ec\u003c/samp\u003e\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean removeIf(Predicate\u003c? super E\u003e filter)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Usuwa elementy spełniające warunki zawarte w \u003csamp\u003efiler\u003c/samp\u003e\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003evoid clear()\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Usuwa wszystkie elemnety kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eint size()\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca liczbę elementów w kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean isEmpty()()\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca \u003csamp\u003etrue\u003c/samp\u003e jeśli kolekcja jesy pusta\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean contains(Object o)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca \u003csamp\u003etrue\u003c/samp\u003e jeśli w kolekcji znajduje się element \u003csamp\u003eo\u003c/samp\u003e\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eboolean containsAll(Collection\u003c?\u003e c)\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca \u003csamp\u003etrue\u003c/samp\u003e jeśli w kolekcji znajdują się elementy\n            zkolekcji \u003csamp\u003ec\u003c/samp\u003e\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eIterator\u003cE\u003e iterator()\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca obiekt iteratora.\n        \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n        \u003ctd\u003e\n            \u003ccode\u003eObject[] toArray()\u003c/code\u003e\n        \u003c/td\u003e\n        \u003ctd\u003e\n            Zwraca tablicę zawierająca wszystkie elementy kolekcji\n        \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\n    Kolejne interfejsy jak List, Set lub Queue wzbogacają listę metod, które\n    zapewniają funkcjonowanie konkretnych struktur. Jednak korzystając tylko\n    z metod tego podstawowego interfejsu możemy już tworzyć proste strktury jak\n    odpowiednik tablicy jednowymiarowej. Aby to zrobić musimy sięgnąć do klas kolekcji, które\n    implementują strukturę kolekcji. Dzięki znajomości tylko metod interfejsu możemy\n    w jednolity sposób odwoływać się do różnych implementacji kolekcji.\n\u003c/p\u003e\n\u003cp\u003e\n    Podstawowe dwie klasy kolekcji do tworzenia list są \u003csamp\u003eArrayList i \u003csamp\u003eLinkedList\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic static void main(String[] args) {\n    //Tworzymy kolekcję elementów typu String na podstawie klasy ArrayList\n    Collection\u0026lt;String\u0026gt; membersA \u003d new ArrayList\u0026lt;String\u0026gt;();\n    //dodajemy elementy do kolekcji\n    membersA.add(\"ELA\");\n    membersA.add(\"ALA\");\n    membersA.add(\"OLA\");\n    //rozmiar kolekcji\n    System.out.println(membersA.size());\n    //usuwamy wszystkie elementy z kolekcji\n    membersA.clear();\n    //rozmiar kolekcji\n    System.out.println(membersA.size());\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Program w przykładzie będzie działać tak samo gdy zmienimy rodzaj implementacji kolekcji na \u003csamp\u003eLinkedList\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nCollection\u0026lt;String\u0026gt; membersA \u003d new LinkedList\u0026lt;String\u0026gt;();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {
                "images/collections.png": {
                  "is_visible": true,
                  "text": ""
                }
              },
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/IteratorDemo.java": {
                  "name": "src/IteratorDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.ListIterator;\n\nclass IteratorDemo {\n  public static void main(String[] args) {\n    Collection\u003cString\u003e members \u003d new ArrayList\u003cString\u003e();\n\n    members.add(\"ALA\");\n    members.add(\"BEATA\");\n    members.add(\"KAROLINA\");\n    members.add(\"MONIKA\");\n    //pobranie iteratora\n    ListIterator\u003cString\u003e iterator \u003d ((ArrayList\u003cString\u003e) members).listIterator();\n    //przeglądanie kolekcji\n    while(iterator.hasNext()){\n      String currentMember \u003d iterator.next();\n      //usuwamy element\n      if (currentMember.length() \u003d\u003d 3) {\n        iterator.remove();\n        continue;\n      }\n      //wstawiamy nowy element za bieżącym\n      if (currentMember.length() \u003c 7) {\n        iterator.add(\"KAROL\");\n        continue;\n      }\n    }\n    iterator \u003d ((ArrayList\u003cString\u003e) members).listIterator();\n    while(iterator.hasNext()){\n      System.out.println(iterator.next());\n    }\n\n  }\n\n\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eIteratory\u003c/h1\u003e\n\u003cp\u003e\n    Rolą iteratora jest przechodzenie przez wszystkie elementy kolekcji, bez względu na ich typ lub\n    rodzaj implementacji kolekcji. Iterator można traktować jak wskaźnik, kursor, który porusza się\n    przez kolejne elementy kolekcji. W danej chwili wskazuje na bieżący element i daje możliwość\n    pobrania lub usunięcia go, sprawdzenia, czy istnieje kolejny lub przejście do następnego elementu. Iteratory implementują interfejs generyczny \u003csamp\u003eIterator\u003c/samp\u003e lub\n    \u003csamp\u003eListIterator\u003c/samp\u003e:\n    \u003cul\u003e\n    \u003cli\u003e\n          \u003ccode\u003einterface Iterator\u0026lt;E\u0026gt;\u003c/code\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003einterface ListIterator\u0026lt;E\u0026gt;\u003c/code\u003e\n    \u003c/li\u003e\n    \u003c/ul\u003e\n    gdzie E to typ elementu kolekcji\n\u003c/p\u003e\n\u003cp\u003e\n    Najważniejsze trzy metody obu interfejsów to:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eboolean hasNext()\u003c/code\u003e - testuje, czy w kolekcji jest następny element\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eE next()\u003c/code\u003e - zwraca następny element i zgłasza wyjątek \u003csamp\u003eIllegalElementException\u003c/samp\u003e, gdy brak elementu\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003evoid remove()\u003c/code\u003e - usuwa bieżący element\n    \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Przykład ilustrujący wykorzystania iteratora do pobierania elementów kolekcji:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic static void main(String[] args) {\n    //utworzenie kolekcji\n    Collection\u0026lt;String\u0026gt; members \u003d new ArrayList\u0026lt;String\u0026gt;();\n    //dodanie elementów\n    members.add(\"ALA\");\n    members.add(\"OLA\");\n    members.add(\"ELA\");\n    //pobranie iteratora\n    Iterator\u0026lt;String\u0026gt; iterator \u003d members.iterator();\n    //przeglądanie kolekcji\n    while(iterator.hasNext()){\n      //jeśli wielokrotnie chcemy odwoływać się do bieżącego elementu to należy go zapamietać w zmiennej\n      String currentMember \u003d iterator.next();\n      //usunięcie kolekcji\n      iterator.remove();\n      System.out.println(\"Uczestnik \"+currentMember);\n      System.out.println(\"Liczba uczestników \"+members.size());\n    }\n  }\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Przykład ilustruje typowe wykrzystanie iteratora do przeglądania kolekcji.\n    Pobrany z kolekcji iterator ustawiony jest \u003cb\u003eprzed\u003c/b\u003e pierwszym elementem, a wiec nie wskazuje pierwszego elementu.\n\u003c/p\u003e\n\u003cp\u003e\n    Znacznie większe możliwości posiada \u003csamp\u003eListIterator\u003c/samp\u003e, który posiada następujące metody:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003evoid add(\u0026lt;E\u0026gt; obj)\u003c/code\u003e - wstawia nowy element za bieżącym\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eboolean hasNext()\u003c/code\u003e - testuje, czy w kolekcji jest następny element\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eboolean hasPrevious()\u003c/code\u003e - testuje czy istnieje poprzedni element\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eint nextIndex()\u003c/code\u003e - zwraca indeks następnego elementu\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eint previousIndex()\u003c/code\u003e - zwraca indeks poprzedniego elementu\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eE next()\u003c/code\u003e - przesuwa iterator do następnego elementu jednocześnie\n        zwracając go\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eE previous()\u003c/code\u003e - przesuwa iterator do poprzedniego elementu\n        jednocześnie zwracając go\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003evoid remove()\u003c/code\u003e - usuwa bieżący element\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003evoid set(E obj)\u003c/code\u003e - w miejsce bieżącego elementu wstawia obj\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n    Iterator listy ma o wiele większe możliwości, dając możliwość\n    przesuwania się w obu kierunkach, dodawania lub podmieniania elementów w\n    kolekcji.\n\u003c/p\u003e\n\u003cp\u003e\n    Przykład poniżej ilustruje możliwości iteratora listy:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\npublic static void main(String[] args) {\n    Collection\u0026lt;String\u0026gt; members \u003d new ArrayList\u0026lt;String\u0026gt;();\n\n    members.add(\"ALA\");\n    members.add(\"BEATA\");\n    members.add(\"KAROLINA\");\n    members.add(\"MONIKA\");\n    //pobranie iteratora\n    ListIterator\u0026lt;String\u0026gt; iterator \u003d ((ArrayList\u0026lt;String\u0026gt;) members).listIterator();\n    //przeglądanie kolekcji\n    while(iterator.hasNext()){\n      String currentMember \u003d iterator.next();\n      //usuwamy element\n      if (currentMember.length() \u003d\u003d 3) {\n        iterator.remove();\n        continue;\n      }\n      //wstawiamy nowy element za bieżącym\n      if (currentMember.length() \u003c 7) {\n        iterator.add(\"KAROL\");\n        continue;\n      }\n    }\n    iterator \u003d ((ArrayList\u0026lt;String\u0026gt;) members).listIterator();\n    while(iterator.hasNext()){\n      System.out.println(iterator.next());\n    }\n\n  }\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Bardzo ważną zaletą tego iteratora jest możliwość manipulowania\n    zawartością kolekcji podczas jej iterowania.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/ArrayListDemo.java": {
                  "name": "src/ArrayListDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nclass ArrayListDemo {\n  public static void main(String[] args) {\n    List\u003cPerson\u003e arrayTeam \u003d new ArrayList\u003c\u003e();\n    arrayTeam.add(new Person(\"ADAM\",\"CAŁA\", LocalDate.parse(\"1997-10-14\")));\n    arrayTeam.add(new Person(\"BEATA\",\"CAŁA\", LocalDate.parse(\"1998-11-24\")));\n    arrayTeam.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1987-01-04\")));\n    //dodajemy dwa różne obiekty, które mają te same dane\n    arrayTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n    arrayTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n\n    Person a \u003d new Person(\"KONRAD\", \"BAS\",LocalDate.parse(\"1986-08-13\"));\n    //dodajemy dwa razy ten sam obiekt a\n    arrayTeam.add(a);\n    arrayTeam.add(a);\n    Iterator\u003cPerson\u003e i \u003d arrayTeam.iterator();\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n    //usunięcie\n    arrayTeam.remove(4);\n    arrayTeam.remove(a);\n    i \u003d arrayTeam.iterator();\n\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n  }\n}"
                },
                "src/LinkedListDemo.java": {
                  "name": "src/LinkedListDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class LinkedListDemo {\n  public static void main(String[] args) {\n    List\u003cPerson\u003e arrayTeam \u003d new LinkedList\u003c\u003e();\n    arrayTeam.add(new Person(\"ADAM\",\"CAŁA\", LocalDate.parse(\"1997-10-14\")));\n    arrayTeam.add(new Person(\"BEATA\",\"CAŁA\", LocalDate.parse(\"1998-11-24\")));\n    arrayTeam.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1987-01-04\")));\n    //dodajemy dwa różne obiekty, które mają te same dane\n    arrayTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n    arrayTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n\n    Person a \u003d new Person(\"KONRAD\", \"BAS\",LocalDate.parse(\"1986-08-13\"));\n    //dodajemy dwa razy ten sam obiekt a\n    arrayTeam.add(a);\n    arrayTeam.add(a);\n    Iterator\u003cPerson\u003e i \u003d arrayTeam.iterator();\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n  }\n}\n"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\n\nclass Person{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return firstName+\" \"+lastName+\" \"+birthDate;\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eListy\u003c/h1\u003e\n\u003cp\u003e\nInterfejs\u003csamp\u003eList\u003c/samp\u003e służy do implementacji list, czyli sekwencji elementów, które są dostępne poprzez indeks, podobnie jak elementy tablicy.\n\u003c/p\u003e\n\u003cp\u003e\n    Interfejs \u003csamp\u003eList\u003c/samp\u003e wzbogaca metody z interfeksu \u003csamp\u003eCollection\u003c/samp\u003e\n    o dodatkowe metody:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003e void add(int index, E obj)\u003c/code\u003e - wstawia element obj na pozycji index\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003e void addAll(int index, Collection\u0026lt;? extends E\u0026gt; c)\u003c/code\u003e - wstawia elementy kolekcji c począwszy do pozycji index\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003e E get(int index)\u003c/code\u003e - zwraca element przechowywany pod wskazanymm indeksem\n    \u003c/li\u003e\n    \u003cli\u003e\n    \u003ccode\u003eE remove(int index)\u003c/code\u003e - usuwa element przechowywany pod wskazanym\n        indeksem\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eE set(int index, E obj)\u003c/code\u003e - zamienia element o podanym indeksie na nowy \u003csamp\u003eobj\u003c/samp\u003e zwracając poprzedni element\u003c/li\u003e\n    \u003cli\u003e\n    \u003ccode\u003eList\u0026lt;E\u0026gt;subList(int start, int end)\u003c/code\u003e - zwraca podlistę\n        elementów w zakresie indeksów od \u003csamp\u003estart\u003c/samp\u003e do \u003csamp\u003eend\u003c/samp\u003e.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Klasy implementujące interfejs \u003csamp\u003eList\u003c/samp\u003e to \u003csamp\u003eArrayList\u003c/samp\u003e i \u003csamp\u003eLinkedList\u003c/samp\u003e, obie są\n    klasami parametrycznymi, a parametrem jest typ elementu przechowywanego w liście.\n\u003c/p\u003e\n\u003ch2\u003eArrayList\u003c/h2\u003e\n\u003cp\u003e\n    Klasa ta realizuje kolekcję przechowywaną w wewnętrznej, tradycyjnej tablicy. Różnicą\n    w stosunku do zwykłej tablicy jest zmiana rozmiaru kolekcji trakcie dodawania lub usuwania elementów. Kolekcja na początku tworzy niewielką tablicę, po jej wypełnieniu, tworzona jest nowa, większa i do niej przenoszone są elementy. To czyni \u003csamp\u003eArrayList\u003c/samp\u003e rodzajem dynamicznej tablicy, która łaczy szybki dostęp do elementów jak w w tablicy tradycyjnej, z elastyczną zmianą rozmiaru w zależności od potrzeb. Ujemnym aspektem jest narzut czasowy w chwili znacznej zmiany rozmiaru wewnętrznej tablicy w trakcie dodawaniau lub usuwania elementów.\n\u003c/p\u003e\n\u003cp\u003e\n    Tworzenie obiektów klasy \u003csamp\u003eArrayList\u003c/samp\u003e odbywa się trzema konstruktorami:\n    \u003cul\u003e\n    \u003cli\u003e\u003ccode\u003eArrayList()\u003c/code\u003e - tworzy listę z pustą tablicą wewnętrtzną\u003c/li\u003e\n    \u003cli\u003e\u003ccode\u003eArrayList(Collection\u0026lt;? extends E\u0026gt; c)\u003c/code\u003e - tworzy listę zazwierjącą elementy z koleckji c\u003c/li\u003e\n    \u003cli\u003e\u003ccode\u003eArrayList(int capacity)\u003c/code\u003e - tworzy pustą listę z ustawioną\n    pojemnością tablicy wewnętrznej\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Można jawnie wpływać na pojemność wewnętrznej tablicy listy, gdy jesteśmy pewni, że\n    będzie taka potrzebna:\n    \u003cul\u003e\n    \u003cli\u003e\n    \u003ccode\u003evoid ensureCapacity(int cap)\u003c/code\u003e - zwiększa pojemność do listy \u003csamp\u003ecap\u003c/samp\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003evoid trimToSize(int cap)\u003c/code\u003e - zmniejsza pojemność, jeśli liczba elementów\n        jest od niej mniejsza.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n\u003ch2\u003eLinkedList\u003c/h2\u003e\n\u003cp\u003e\n    Jest to typowa struktura dowiązaniowa, każde wstawienie elementu powoduje utworzenie węzła, który jest dodawany do listy. Zaletą struktury jest automatyczne dostosowanie rozmiaru kolekcji w miarę dodawania\n    lub usuwania elementów. Minusem jest czas dostępu do dowolnego elementu, który zależy od\n    zajmowanego miejsca w liście, im dalej element znajduje się od początku listy, tym więcej czasu\n    potrzeba na dostanie się do niego. Kolekcja najlepiej się sprawdza w sytuacjach, gdy elementy\n    są przeglądane sekwencyjnie i nie ma potrzeby dostępu losowego.\n\u003c/p\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eLinkedList\u003c/samp\u003e implementuje także interfejs \u003csamp\u003eDeque\u003c/samp\u003e, który zawiera metody obsługi\n    listy dwukierunkowej.\n\u003c/p\u003e\n\u003cp\u003e\n    Klasa posiada dwa konstruktory:\n    \u003cul\u003e\n    \u003cli\u003e\u003ccode\u003eLinkedList()\u003c/code\u003e - tworzy listę z \u003c/li\u003e\n    \u003cli\u003e\u003ccode\u003eLinkedList(Collection\u0026lt;? extends E\u0026gt; c)\u003c/code\u003e - tworzy listę zawierjącą elementy z kolekcji c\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/HashSetDemo.java": {
                  "name": "src/HashSetDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nclass HashSetDemo {\n  public static void main(String[] args) {\n    Set\u003cPerson\u003e team \u003d new HashSet\u003c\u003e(10);\n    team.add(new Person(\"ADAM\",\"CAŁA\", LocalDate.parse(\"1997-10-14\")));\n    team.add(new Person(\"BEATA\",\"CAŁA\", LocalDate.parse(\"1998-11-24\")));\n    team.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1987-01-04\")));\n    //dodajemy dwa różne obiekty, które mają te same dane\n    team.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n    team.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n\n    Person a \u003d new Person(\"KONRAD\", \"BAS\",LocalDate.parse(\"1986-08-13\"));\n    //dodajemy dwa razy ten sam obiekt a\n    //obiekt a zostanie dodany tylko raz\n    team.add(a);\n    team.add(a);\n    //elememnty są wyświetlone w innej, przypadkowej kolejności niż podczas wstawiania\n    Iterator\u003cPerson\u003e i \u003d team.iterator();\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n  }\n}"
                },
                "src/LinkedHashSetDemo.java": {
                  "name": "src/LinkedHashSetDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class LinkedHashSetDemo {\n  public static void main(String[] args) {\n    Set\u003cPerson\u003e sortedTeam \u003d new LinkedHashSet\u003c\u003e();\n    sortedTeam.add(new Person(\"ADAM\",\"CAŁA\", LocalDate.parse(\"1997-10-14\")));\n    sortedTeam.add(new Person(\"BEATA\",\"CAŁA\", LocalDate.parse(\"1998-11-24\")));\n    sortedTeam.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1987-01-04\")));\n    //dodajemy dwa różne obiekty, które mają te same dane\n    sortedTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n    sortedTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n\n    Person a \u003d new Person(\"KONRAD\", \"BAS\",LocalDate.parse(\"1986-08-13\"));\n    //dodajemy dwa razy ten sam obiekt a\n    //obiekt a zostanie dodany tylko raz\n    sortedTeam.add(a);\n    sortedTeam.add(a);\n    //elementy zbioru są wyświetlone w tej samej kolejności jak podczas wstawiania\n    Iterator\u003cPerson\u003e i \u003d sortedTeam.iterator();\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n  }\n}\n"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.Comparator;\n\nclass Person implements Comparator\u003cPerson\u003e{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(){\n  }\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return firstName+\" \"+lastName+\" \"+birthDate;\n  }\n\n  @Override\n  public int compare(Person o1, Person o2) {\n    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk\n    if (o1.lastName.compareTo(o2.lastName) !\u003d 0){\n      return o1.lastName.compareTo(o2.lastName);\n    }\n    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion\n    if (o1.firstName.compareTo(o2.firstName) !\u003d 0){\n      return o1.firstName.compareTo(o2.firstName);\n    }\n    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia\n    return o1.birthDate.compareTo(o2.birthDate);\n  }\n}"
                },
                "src/TreeSetDemo.java": {
                  "name": "src/TreeSetDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.*;\n\npublic class TreeSetDemo {\n  public static void main(String[] args) {\n    //\n    Set\u003cPerson\u003e treeTeam \u003d new TreeSet\u003c\u003e(new Person());\n    treeTeam.add(new Person(\"ADAM\",\"CAŁA\", LocalDate.parse(\"1997-10-14\")));\n    treeTeam.add(new Person(\"BEATA\",\"CAŁA\", LocalDate.parse(\"1998-11-24\")));\n    treeTeam.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1987-01-04\")));\n    //dodajemy dwa różne obiekty, które mają te same dane\n    treeTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n    treeTeam.add(new Person(\"PAWEŁ\",\"NOWAK\", LocalDate.parse(\"1993-10-22\")));\n\n    Person a \u003d new Person(\"KONRAD\", \"BAS\",LocalDate.parse(\"1986-08-13\"));\n    //dodajemy dwa razy ten sam obiekt a\n    //obiekt a zostanie dodany tylko raz\n    treeTeam.add(a);\n    treeTeam.add(a);\n    //elementy zbioru są wyświetlone w kolejności rosnącej\n    Iterator\u003cPerson\u003e i \u003d treeTeam.iterator();\n    while(i.hasNext()){\n      System.out.println(i.next());\n    }\n  }\n}\n"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eZbiory - Set\u003c/h1\u003e\n\u003cp\u003e\n    Elementy przechowywane w zbiorach są unikalne, dodanie wartości, która już występuje w zbiorze, nie powoduje zmian w kolekcji.\n\u003c/p\u003e\n\u003ch1\u003eInterfejs Set\u003c/h1\u003e\n\u003cp\u003e\n    Parametryczny interfejs \u003csamp\u003eSet\u003c/samp\u003e rozszerza interfejs \u003csamp\u003eCollection\u003c/samp\u003e, ale nie definiuje żanych własnych metod. Metoda \u003csamp\u003eadd()\u003c/samp\u003e zwróci \u003csamp\u003efalse\u003c/samp\u003e jeśli dodawany element występuje już w zbiorze.\n\u003c/p\u003e\n\u003cp\u003e\n    Klasami implementującymi interfejs \u003csamp\u003eSet\u003c/samp\u003e są klasy parametryczne \u003csamp\u003eHashSet\u003c/samp\u003e, \u003csamp\u003eLinkedHashSet\u003c/samp\u003e oraz \u003csamp\u003eTreeSet\u003c/samp\u003e.\n\u003c/p\u003e\n\u003ch1\u003eInterfejs SortedSet\u003c/h1\u003e\n\u003cp\u003e\n    Rozszerza interfejs \u003csamp\u003eSet\u003c/samp\u003e poprzez dodanie metod odpowiedzialnych za zachowanie zbioru elementów\n    posortowanych rosnącą. Jest to także interfejs parametryczny.\n\u003c/p\u003e\n\u003cp\u003e\n    Metody zbioru posortowanego:\n\u003cul\u003e\n    \u003cli\u003e\n    \u003ccode\u003eE first()\u003c/code\u003e - zwraca pierwszy element zbioru\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eE last()\u003c/code\u003e - zwraca ostatni element zbioru\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedSet\u0026lt;E\u0026gt; headSet(E end)\u003c/code\u003e - zwraca posortowany podzbiór od początku zawierający elementy nie większe od argumentu \u003csamp\u003eend\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedSet\u0026lt;E\u0026gt; tailSet(E start)\u003c/code\u003e - zwraca posortowany podzbiór od końca zawierający elementy nie mniejsze od argumentu \u003csamp\u003estart\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedSet\u0026lt;E\u0026gt; headSet(E end)\u003c/code\u003e - zwraca posortowany podzbiór od początku zawierający elementy nie większe od argumentu \u003csamp\u003eend\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedSet\u0026lt;E\u0026gt; subSet(E start, E end)\u003c/code\u003e - zwraca posortowany podzbiór zawierający elementy nie mniejsze \u003csamp\u003estart\u003c/samp\u003e i nie większe od \u003csamp\u003eend\u003c/samp\u003e.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Klasą implementujacą ten interfejs jest \u003csamp\u003eTreeSet\u003c/samp\u003e\n\u003c/p\u003e\n\n\u003ch2\u003eKlasa HashSet\u003c/h2\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eHashSet\u003c/samp\u003e zawiera wewnętrzną tablicę mieszającą, której rolą jest szybki dostęp\n    do elementów zbioru na podstawie tzw. skrótu. Wartość elementu, który ma trafić do zbioru, służy\n    do utworzenia specjalnej wartości skrótu, który staje się rodzajem indeksu. Posługując się\n    tym indeksem można w czasie liniowym (podobnym jak czas odczytu komórki tablicy) wstawić lub usunąć element, a także go odczytać a nawet sprawdzić czy taki istnieje. Klasa nie gwarantuje\n    zachowania kolejności elementów zgodnie z kolejnościa wstawiania do zbioru.\n\u003c/p\u003e\n\u003cp\u003e\n    Deklaracja klasy: \u003ccode\u003e class HashSet\u0026lt;E\u0026gt;\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Konstruktory klasy \u003csamp\u003eHashSet\u003c/samp\u003e:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashSet()\u003c/code\u003e - utworznie zbioru mieszającego,\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashSet(Collection \u0026lt; extends E\u0026gt; c)\u003c/code\u003e - utworzenie i wypełnienie zbioru elementami kolekcji \u003csamp\u003ec\u003c/samp\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashSet(int capacity)\u003c/code\u003e - utworzenie zbioru o poczatkowej pojemności \u003csamp\u003ecapacity\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashSet(int capacity, float fillRatio)\u003c/code\u003e - utworzenie zbioru o początkowej pojemności capacity i podanym wpsółczynniku wypełnienia (zakres od 0 do 1).\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Współczynnik wypełnienia określa moment, kiedy następuje rozszerzenie wewnętrznej tablicy. Gdy liczba elementów zbioru jest staje się większa od pojemności pomnożonej przez współczynnik wypełnienia to następuje utworznie, nowej i większej tablicy. Domyślna wartość wpsółczynnika wypełnienia wynosi 0,75.\n\u003c/p\u003e\n\u003ch2\u003eKlasa LinkedHashSet\u003c/h2\u003e\n\u003cp\u003e\nKlasa \u003csamp\u003eLinkedHashSet\u003c/samp\u003e jest wyprowadzona z klasy \u003csamp\u003eHashSet\u003c/samp\u003e, ale nie dodaje żadnych nowych metod. Różnica między obiema klasami polega na sposobie przechowywwania elementów. W klasie \u003csamp\u003eLinkedHashSet\u003c/samp\u003e wykorzystywana jest lista dowiązaniowa, co powoduje, że zachowana jest kolejność wstawianych elementów.\n\u003c/p\u003e\n\u003ch2\u003eKlasa TreeSet\u003c/h2\u003e\n\u003cp\u003e\nW tej klasie elementy przechowywane są w strukturze dowiązaniowej zorganizowanej w drzewo. Elementy w zbiorze są posortowane rosnąco. Dostęp do elementów jest bardzo szybki.\n\u003c/p\u003e\n\u003cp\u003e\nSygnatury klasy: \u003ccode\u003eclass TreeSet\u0026lt;E\u0026gt;\u003e\u003c/code\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Konstruktory:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeSet()\u003c/code\u003e - tworzy nowy, pusty zbiór\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeSet(Collection\u0026lt;? extends E\u0026gt; c)\u003c/code\u003e - tworzy nowy zbiór wypełniony elementami kolekcji c\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeSet(Comparator\u0026lt;? super E\u0026gt; comp)\u003c/code\u003e - tworzy nowy zbiór, który będzie sortował elementy zgodnie z funkcją komparatora \u003csamp\u003ecomp\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeSet(SortedSet\u0026lt;E\u0026gt; ss)\u003c/code\u003e - tworzy nowy zbiór wypełniony elementami zbioru\n        \u003csamp\u003ess\u003c/samp\u003e.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 5",
              "stepic_id": 0,
              "task_files": {
                "src/HashMapDemo.java": {
                  "name": "src/HashMapDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass HashMapDemo {\n  public static void main(String[] args) {\n    Map\u003cString, Person\u003e mapTeam \u003d new HashMap\u003c\u003e();\n    //wstawianie elementów do mapy\n    mapTeam.put(\"szef\", new Person(\"LUDWIK\",\"KOZAK\", LocalDate.parse(\"1976-07-03\")));\n    mapTeam.put(\"sekretarka\", new Person(\"ANNA\",\"KRUK\", LocalDate.parse(\"1998-05-13\")));\n    mapTeam.put(\"portier\", new Person(\"KAZIMIERZ\",\"KOWALSKI\", LocalDate.parse(\"1964-12-23\")));\n    //wyświetlenie kluczy mapy\n    for(String key: mapTeam.keySet()){\n      System.out.println(key);\n    }\n    //wyświetlenie wartości\n    for(Person value: mapTeam.values()){\n      System.out.println(value);\n    }\n    //wyświetlenie wartości na podstawie klucza\n    System.out.println(\"SZEF \"+ mapTeam.get(\"szef\"));\n    //usunięcie wartości o podanym kluczu\n    mapTeam.remove(\"portier\");\n    //\n    mapTeam.containsKey(\"portier\");\n  }\n\n}"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.Comparator;\n\nclass Person{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return firstName+\" \"+lastName+\" \"+birthDate;\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eMapy - Map\u003c/h1\u003e\n\u003cp\u003eMapy to wyspecjalizowany rodzaj kolekcji, której elementy dostępne przez inną wartość zwaną kluczem. Kluczem\nmoże być liczba, łańcuch, data itd., czyli wartość dowolnego typu. Kolejność elementów w mapie nie ma znaczenia. Każdy klucz w mapie jest unikatowy, ale wartości mogą się powtarzać. Nie można iterować mapy, ale można uzyskać widoki mapy w postaci kolekcji, które już dają możliwośc uzyskania iteratora.\n\u003c/p\u003e\n\u003cp\u003e\nCzas dostęp do elementów jest podobny jak w tablicach, a więc liniowy, i nie zależy od rozmiaru mapy.\u003c/p\u003e\n\u003cp\u003e\n    Istnieje kilka interfejsów map, które zawierają zbiory metod do przetwarzania danej wersji mapy.\n\u003c/p\u003e\n\u003ch2\u003eInterfejs Map\u003c/h2\u003e\n\u003cp\u003e\n    Interfejs Map posiada dwa parametry: \u003ccode\u003einterface Map\u0026lt;K,V\u0026gt;\u003c/code\u003e, gdzie \u003csamp\u003eK\u003c/samp\u003e jest typem klucza a \u003csamp\u003eV\u003c/samp\u003e to typ wartości przechowywanej w mapie.\n\u003c/p\u003e\n\u003cp\u003e\n    Dwie podstawowe operacje na mapach to:\n    \u003cul\u003e\n        \u003cli\u003e\n            \u003ccode\u003eV get(K key)\u003c/code\u003e - pobranie elementu o podanym kluczy\n        \u003c/li\u003e\n        \u003cli\u003e\n            \u003ccode\u003eV put(K key, V value)\u003c/code\u003e - wstawienie elementu \u003csamp\u003evalue\u003c/samp\u003e z kluczem \u003csamp\u003ekey\u003c/samp\u003e, jeśli w\n            mapie istniał już element o takim kluczo, to zostanie nadpisany, a poprzednia jego wartość zostanie zwrócona\n            przez metodę\n        \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eV remove(Object k)\u003c/code\u003e - usunięcie elementu o kluczu k, funkcja zwraca usuwany element\n    \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Oprócz tego interfejs dostarcza kilku metod zwracających kolekcje:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSet\u0026lt;K\u0026gt; keySet()\u003c/code\u003e - zwraca zbiór kluczy mapy w postaci widoku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eCollection\u0026lt;V\u0026gt; values()\u003c/code\u003e - zwraca kolekcję wartości mapy w postaci widoku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eCollection\u0026lt;V\u0026gt; values()\u003c/code\u003e - zwraca kolekcję wartości mapy w postaci widoku\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003ch2\u003eInterfejs SortedMap\u003c/h2\u003e\n\u003cp\u003e\n    Jest to rozszerzenie interfejsu \u003csamp\u003eMap\u003c/samp\u003e do tworzenia map, które przechowują elementy w porządku rosnącym\n    kluczy. Deklaracja interfejsu: \u003ccode\u003einterface SortedMap\u0026lt;K, V\u0026gt;\u003c/code\u003e, gdzie znaczenie parametrów jest takie samo jak w interfejsie \u003csamp\u003eMap\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Metody charakterystyczne dla tego interfejsu to:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eK firstKey()\u003c/code\u003e - zwraca pierwszy klucz  mapy\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eK lastKey()\u003c/code\u003e - zwraca ostatni klucz  mapy\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedMap\u0026lt;K, V\u0026gt; headMap(K end)\u003c/code\u003e - zwraca posortowaną mapę, której klucze są mniejsze od end\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedMap\u0026lt;K, V\u0026gt; tailMap(K start)\u003c/code\u003e - zwraca posortowaną mapę, której klucze są większe od start\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eSortedMap\u0026lt;K, V\u0026gt; headMap(K, start, K end)\u003c/code\u003e - zwraca posortowaną mapę, której klucze są nie mniejsze od \u003csamp\u003estart\u003c/samp\u003e i nie większe od \u003csamp\u003eend\u003c/samp\u003e.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003ch2\u003eInterfejs NavigableMap\u003c/h2\u003e\n\u003cp\u003e\n    Interfejs rozszerzający \u003csamp\u003eSortedMap\u003c/samp\u003e służy do tworzenia klas obsługujących wyszukiwanie wpisów według najbliższego dopasowania do podanego klucza lub kluczy. Jeśli chcesz dowiedzieć się więcej o tym interfejsie zajrzyj do dokumentacji.\n\u003c/p\u003e\n\u003ch1\u003eKlasy map\u003c/h1\u003e\n\u003cp\u003e\n    Aby utworzyć mapę trzeba zadeklarować obiekt klasy implementujęj, któryś z interfejsów map. Klas\n    map jest stosunkowo dużo:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eAbstractMap\u003c/code\u003e - klasa abtrakcyjna implementująca większość metod interfejsu Map i służaca do jako klasa bazowa dla prawie wszystkich konkretnych klas map (oprócz \u003csamp\u003eLinkedHashMap\u003c/samp\u003e)\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eEnumMap\u003c/code\u003e - klasa wykorzystująca stałe wyliczeniowe jako klucze\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashMap\u003c/code\u003e - klasa wykorzystująca tablicę mieszającą do przechowywania elementów\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeMap\u003c/code\u003e - klasa wykorzystująca strukturę drzewa\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eWeakHashMap\u003c/code\u003e - klasa wykorzystująca tablicę mieszającą ale ze słabymi kluczami (elementy są automatycznie usuwane przez GC z mapy, gdy znika referencja do klucza)\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eLinkedHashMap\u003c/code\u003e - klasa zapewnia iterację w kolejności wstawiania elementów\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eIdentityHashMap\u003c/code\u003e - do porównania kluczy używa wartości referencji\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003eW dalszej części omówimy tylko dwie klasy map: \u003csamp\u003eHashMap\u003c/samp\u003e i \u003csamp\u003eTreeMap\u003c/samp\u003e\u003c/p\u003e\n\u003ch2\u003eKlasa HashMap\u003c/h2\u003e\n\u003cp\u003e\n  Klasa przechowuje elementy mapy w tablicy mieszającej zapewniając, stały czas wykonywania operacji wstawiania i pobierania elementów. Sygnatura klasy: \u003ccode\u003eclass HashMap\u0026lt;K, V\u0026gt;\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Konstruktory klasy:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashMap()\u003c/code\u003e - tworzy pustą mapę,\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashMap(Map\u0026lt;? extends K, ? extends V\u0026gt; m)\u003c/code\u003e - tworzy mapę zawierającą elementy z mapy \u003csamp\u003em\u003c/samp\u003e,\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashMap(int capacity)\u003c/code\u003e - tworzy mapę o wstępnej pojemności \u003csamp\u003ecapacityy\u003c/samp\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eHashMap(int capacity, float fillRatio)\u003c/code\u003e - tworzy mapę o podanje wstępnej pojemności i współczynniku wypełnienia (znaczenie takie samo jak w klasie HashSet).\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003eTworzenie mapy z użyciem tej klasy:\n\u003c/p\u003e\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n     Map\u0026lt;String, Person\u0026gt; team \u003d new HashMap\u003c\u003e();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Klasa implementuje tylko interfejs \u003csamp\u003eMap\u003c/samp\u003e i nie dodaje żadnych własnych metod.\n\u003c/p\u003e\n\u003ch2\u003eKlasa TreeMap\u003c/h2\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eTreeMap\u003c/samp\u003e implementuje interfejs \u003csamp\u003eNavigableMap\u003c/samp\u003e i używa struktury drzewiastej do przechowywania elementów, co zapewnia szybkie odczytywanie wartości. Zapewnia także sortowanie elementów według kluczy w porządku rosnącym.\n\u003c/p\u003e\n\u003cp\u003e\n    Deklaracja klasy: \u003ccode\u003eclass TreeMap\u0026lt;K, V\u0026gt;\u003c/code\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Konstruktory klasy:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeMap()\u003c/code\u003e - tworzy pustą mapę\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeMap(Comparator\u0026lt;? super K\u0026gt; comp)\u003c/code\u003e - tworzy pustą mapę z komparatorem określającym porządek sortowania\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeMap(Map\u0026lt;? extends K, ? extends V\u0026gt; m)\u003c/code\u003e - tworzy mapę zawierającą elementy\n        z mapy m\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eTreeMap(SortedMap\u0026lt;K, ? extends V\u0026gt; sm)\u003c/code\u003e - tworzy mapę zawierającą elementy z posortowanej mapy sm i z tym samym sposobem sortowania co sm.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Klasa \u003csamp\u003eTreeMap\u003c/samp\u003e nie definiuje swoich metod, implementuje tylko metody z interfejsu \u003csamp\u003eNavigableMap\u003c/samp\u003e.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 6",
              "stepic_id": 0,
              "task_files": {
                "src/ComparatorDemo.java": {
                  "name": "src/ComparatorDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nclass Task {\n  public static void main(String[] args) {\n    //Zbiór osób sortowanych wg imion\n    Set\u003cPerson\u003e treeTeam \u003d new TreeSet\u003c\u003e(new Comparator\u003cPerson\u003e() {\n      @Override\n      public int compare(Person o1, Person o2) {\n        return Person.compareFirstName(o1, o2);\n      }\n    });\n\n    treeTeam.add(new Person(\"ADAM\",\"KOWALSKI\", LocalDate.parse(\"1998-04-23\")));\n    treeTeam.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1994-08-13\")));\n    treeTeam.add(new Person(\"EWA\" +\n            \"\",\"ADAMSKI\", LocalDate.parse(\"1991-12-09\")));\n\n    Iterator\u003cPerson\u003e iterator \u003d treeTeam.iterator();\n    while(iterator.hasNext()){\n      System.out.println(iterator.next());\n    }\n    //Zbiór osób sortowanych wg nazwisk\n    Set\u003cPerson\u003e treeStaff \u003d new TreeSet\u003c\u003e(new Comparator\u003cPerson\u003e() {\n      @Override\n      public int compare(Person o1, Person o2) {\n        return Person.compareBirthDateAsc(o1, o2);\n      }\n    });\n\n    treeStaff.add(new Person(\"ADAM\",\"KOWALSKI\", LocalDate.parse(\"1998-04-23\")));\n    treeStaff.add(new Person(\"KAROL\",\"NOWAK\", LocalDate.parse(\"1994-08-13\")));\n    treeStaff.add(new Person(\"EWA\" +\n            \"\",\"ADAMSKI\", LocalDate.parse(\"1991-12-09\")));\n    iterator \u003d treeStaff.iterator();\n    while(iterator.hasNext()){\n      System.out.println(iterator.next());\n    }\n  }\n}"
                },
                "src/Person.java": {
                  "name": "src/Person.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.time.LocalDate;\nimport java.util.Comparator;\n\nclass Person{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(){\n  }\n\n  public Person(String firstName, String lastName, LocalDate birthDate) {\n    this.firstName \u003d firstName;\n    this.lastName \u003d lastName;\n    this.birthDate \u003d birthDate;\n  }\n\n  @Override\n  public String toString() {\n    return firstName+\" \"+lastName+\" \"+birthDate;\n  }\n\n\n  static public int compareLstName(Person o1, Person o2) {\n    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk\n    if (o1.lastName.compareTo(o2.lastName) !\u003d 0){\n      return o1.lastName.compareTo(o2.lastName);\n    }\n    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion\n    if (o1.firstName.compareTo(o2.firstName) !\u003d 0){\n      return o1.firstName.compareTo(o2.firstName);\n    }\n    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia\n    return o1.birthDate.compareTo(o2.birthDate);\n  }\n\n  static public int compareFirstName(Person o1, Person o2) {\n    //jeśli imiona nie są identyczne to zwracamy wynik porównania imion\n    if (o1.firstName.compareTo(o2.firstName) !\u003d 0){\n      return o1.firstName.compareTo(o2.firstName);\n    }\n    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion\n    if (o1.lastName.compareTo(o2.lastName) !\u003d 0){\n      return o1.lastName.compareTo(o2.lastName);\n    }\n    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia\n    return o1.birthDate.compareTo(o2.birthDate);\n  }\n\n  static public int compareBirthDateAsc(Person o1, Person o2) {\n    return o1.birthDate.compareTo(o2.birthDate);\n  }\n\n  static public int compareBirthDateDesc(Person o1, Person o2) {\n    return o2.birthDate.compareTo(o1.birthDate);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKomparatory\u003c/h1\u003e\n\u003cp\u003e\n  Klasy \u003csamp\u003eTreeSet\u003c/samp\u003e i \u003csamp\u003eTreeMap\u003c/samp\u003e przechowują elementy posortowane, więc wymagają określenia sposobu sortowania. Domyślnie obie klasy wykorzystują naturalny porządek czyli dla liczb i znaków porządek rosnący (1, 2, 3, 4 itd, A, B, C, D itd.).\n\u003c/p\u003e\n\u003cp\u003e\n    Gdy chcemy przechowywać elementy w innym porzadku należy wskazać klasom obiekt zwany komparatorem. Obiekt taki można utworzyć na podstawie dowolnej klasy implementującej interfejs generyczny \u003csamp\u003eComparator\u0026lt;T\u0026gt;\u003c/samp\u003e, w którym parametr T jest klasą porównywanych obiektów.\n\u003c/p\u003e\n\u003cp\u003eInterfejs zawiera deklaracje dwóch metod:\n\u003cul\u003e\n    \u003cli\u003e\n      \u003ccode\u003eint compare(T obj1, T obj2)\u003c/code\u003e - metoda zwraca trzy wartości całkowite w zależności od porównania obu argumentów:\n        \u003cul\u003e\n            \u003cli\u003e\n                obj1 \u003e obj2 - zwraca 1 (lub większą od 0)\n            \u003c/li\u003e\n            \u003cli\u003e\n                obj1 \u003c obj2 - zwraca -1 (lub mniejszą od 0)\n            \u003c/li\u003e\n            \u003cli\u003e\n                obj1 \u003d\u003d obj2 - zwraca 0\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n       \u003ccode\u003eboolean equals(Object obj)\u003c/code\u003e  - zwraca \u003csamp\u003etrue\u003c/samp\u003e jeśli obj jest równy z obiektem wywołującym metodę.\n    \u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\u003cp\u003e\n    Ilustracją wykorzystania interfejsu \u003csamp\u003eComparator\u003c/samp\u003e będzie klasa Person, dla której zdefiniujemy komparator porządkujący wg poniższego schematu:\n    \u003cul\u003e\n    \u003cli\u003e\n        jeśli imiona są różne, porządkujemy rosnącą według imion,\n    \u003cli\u003e\n        jeśłi imiona są równe porządkujemy według nazwisk\n    \u003c/li\u003e\n    \u003cli\u003e\n        jeśli nazwiska są równe porządkujemy według daty urodzenia\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Metodę komparatora możemy dołączyć do klasy Person poprzez dodanie do niej interfejsu \u003csamp\u003eComparator\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Person implements Comparator\u0026lt;Person\u0026gt;{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(){\n  }\n  ...\n\n  @Override\n  public int compare(Person o1, Person o2) {\n    //jeśli nazwiska nie są identyczne to zwracamy wynik porównania nazwisk\n    if (o1.lastName.compareTo(o2.lastName) !\u003d 0){\n      return o1.lastName.compareTo(o2.lastName);\n    }\n    //gdy identyczne nazwiska i rózne imiona to zwracamy wynik porównania imion\n    if (o1.firstName.compareTo(o2.firstName) !\u003d 0){\n      return o1.firstName.compareTo(o2.firstName);\n    }\n    //gdy nazwiska i imiona identyczne zwracamy wynik porównania dat urodzenia\n    return o1.birthDate.compareTo(o2.birthDate);\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W metodzie wykorzystaliśmy metodę \u003csamp\u003ecompareTo(o)\u003c/samp\u003e, która stosuje dokładnie ten sam kontrakt co metoda \u003csamp\u003ecompare(o1, o2)\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n   Tworząc teraz mapę klasą \u003csamp\u003eTreeMap\u003c/samp\u003e można wykorzystać pusty obiekt klasy \u003csamp\u003ePerson\u003c/samp\u003e, gdyż klasa \u003csamp\u003eTreeSet\u003c/samp\u003e wykorzysta tylko metodę \u003csamp\u003ecompare()\u003c/samp\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nSet\u0026lt;Person\u0026gt; treeTeam \u003d new TreeSet\u003c\u003e(new Person());\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Druga metodą przekazania komparatora jest utworzenie klasy anonimowej, w której wykorzystamy\n    metodę \u003csamp\u003ecompare(o1, o2)\u003c/samp\u003e\u003e z klasy \u003csamp\u003ePerson\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nSet\u0026lt;Person\u0026gt; treeTeam \u003d new TreeSet\u003c\u003e(new Comparator\u0026lt;Person\u0026gt;() {\n      @Override\n      public int compare(Person o1, Person o2) {\n        return o1.compare(o1, o2);\n      }\n    });\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W tym przypadku nie jest wymagane, aby klasa \u003csamp\u003ePerson\u003c/samp\u003e implementowała \u003csamp\u003eComparator\u003c/samp\u003e, po prostu wykorzystaliśmy zdefiniowaną metodę. Przedstawione rozwiązanie ma tą zaletę, że można zdefiniować w klasie kilka różnych metod porównujących i wykorzystywać je w zależności od potrzeb:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Person implements Comparator\u0026lt;Person\u0026gt;{\n  private String firstName;\n  private String lastName;\n  public LocalDate birthDate;\n\n  public Person(){\n  }\n  ...\n\n  static public int compare1(Person p1, Person p2){\n    ...\n  }\n\n  static public int compare2(Person p1, Person p2){\n    ...\n  }\n}\n\n ...\n Set\u0026lt;Person\u0026gt; treeTeam \u003d new TreeSet\u003c\u003e(new Comparator\u0026lt;Person\u0026gt;() {\n      @Override\n      public int compare(Person o1, Person o2) {\n        return Person.compare1(o1, o2);\n      }\n});\n\nSet\u0026lt;Person\u0026gt; treeStaff \u003d new TreeSet\u003c\u003e(new Comparator\u0026lt;Person\u0026gt;() {\n      @Override\n      public int compare(Person o1, Person o2) {\n        return Person.compare2(o1, o2);\n      }\n});\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Refleksja",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/ReflectionDemo.java": {
                  "name": "src/ReflectionDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nclass User{\n  private String name;\n  private String email;\n  private String password;\n  private int id;\n\n  public User(){\n    this.password \u003d\"\";\n    this.name \u003d \"\";\n    this.name \u003d \"no name\";\n  }\n\n  public User(String name, String email, String password, Integer id) {\n    this.name \u003d name;\n    this.email \u003d email;\n    this.password \u003d password;\n    this.id \u003d id;\n  }\n\n  @Override\n  public String toString() {\n    return name+\" \"+email+\" \"+password+\" \"+id;\n  }\n}\n\nclass Message{\n  public String send(){\n    return \"New message\";\n  }\n}\n\nclass Task {\n  public static void main(String[] args) throws IllegalAccessException, NoSuchFieldException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n    User member \u003d new User(\"amin\",\"admin@jps.pl\",\"123456\",3);\n    //wyświetlenie pól obiektu wraz z wartościami\n    System.out.println(\"Lista pól\");\n    for(Field f: member.getClass().getDeclaredFields()){\n      //udostępniamy pola do odczytu\n      f.setAccessible(true);\n      System.out.println(f.getName() + \" \"+f.get(member).toString());\n    }\n    System.out.println();\n    //wyświetlenie metod\n    System.out.println(\"Lista metod\");\n    for(Method m: member.getClass().getMethods()){\n      System.out.println(m.getName());\n    }\n    System.out.println();\n    //zmieniamy wartość wybranego pola\n    System.out.println(\"Zmiana wartości pola password\");\n    System.out.println(\"Obiekt przed zmianą\");\n    System.out.println(member);\n    Field f \u003d member.getClass().getDeclaredField(\"password\");\n    f.setAccessible(true);\n    f.set(member, \"abcd\");\n    System.out.println(\"Obiekt po zmianie zmianą\");\n    System.out.println(member);\n\n    Message m \u003d Message.class.newInstance();\n    System.out.println(m.send());\n    User u \u003d User.class.newInstance();\n    System.out.println(u);\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eRefleksja\u003c/h1\u003e\n\u003cp\u003e\n  Refleksja, jak nazwa wskazuje, jest mechanizmem, który pozwala na uzyskanie w działającym programie własnego \"odbicia\". Mechanizm ten jest realizowany przez bibliotekę \u003csamp\u003ejava.lang.reflect\u003c/samp\u003e, która dostarcza klasy, które pozwalają analizować w trakcie działania programu strukturę kodu. Można uzyskać informację jakiej klasy jest dany obiekt, jak jest lista pól, metod, jakie są typy poszczególnnych pól, jakie parametry metod itd.\n\u003c/p\u003e\n\u003cp\u003e\n  Głównym przeznaczeniem refleksji jest ułatwienie tworzenia narzędzi programistych, które pozwalają na automatyczne generowanie kodu i jego analize w trakcie działania programu.\n\u003c/p\u003e\n\u003cp\u003e\n  Temat refleksji jest dość szeroki, a bilioteka obszerna. Poniżej zapoznamy się z prostym przykładem, który w trakcie działania pozwala na wyświetlenie wszystkich pól i metod klasy wybranego obiektu:\n\u003c/p\u003e\n\n\u003cpre\u003e\n  \u003ccode\u003e\n    User object \u003d new User(\"amin\",\"admin@jps.pl\",\"123456\",3);\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Kod wyświetlający listę pól z ich wartościami to pętla pobierająca pola z tablicy:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  for(Field f: object.getClass().getDeclaredFields()){\n    f.setAccessible(true);\n    System.out.println(f.getName() + \" \"+f.get(member).toString());\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n  \u003cp\u003e\n    Klasa \u003csamp\u003eField\u003c/samp\u003e służy do przechowywania informacji o polu klasy, a wywołanie metody \u003csamp\u003esetAccessible(true)\u003c/samp\u003e\n    daje możliwość odczytu pola, które może być prywatne.\n  \u003c/p\u003e\n\u003cp\u003e\n  Wyświetlenie listy metod jest dość podobne, należy pobrać listę metod i w pętli wyswietlić:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n    for(Method m: member.getClass().getMethods()){\n      System.out.println(m.getName());\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n  \u003cp\u003e\n    Wyświetlone zostały metody zdefiniowane w klasie jak i odziedziczone. Metoda \u003csamp\u003egetDeclaredMethods\u003c/samp\u003e zwraca lsitę metod deklarowanych tylko w klasie.\n  \u003c/p\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Refleksja daje możliwość manipulowania obiektami w sytuacjach, gdy w programie \"tradycyjną\" metodą nie są dostępne. Klasa \u003csamp\u003eUser\u003c/samp\u003e posiada wszystkie pola prywatne, bez odpowienich setterów co uniemożliwia zmienę wartości dowolnego pola. Korzystając z refleksji możemy zmienić wartość każdego póla, nawet prywatnych:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  Field f \u003d member.getClass().getDeclaredField(\"password\");\n  f.setAccessible(true);\n  f.set(member, \"abcd\");\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Przykład pokazuje dość ciekawe możliwości \"włamania\" się do kodu programu. Refleksja daje również możliwość tworzenia obiektów bez operatora \u003csamp\u003enew\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n  class Message{\n    public String send(){\n      return \"New Object created\";\n    }\n  }\n  ..\n\n  Message m \u003d Message.class.newInstance();\n  System.out.println(m.send());\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Przedstawiony przykład działa dla wszystkich klas posiadających konstruktor bezargumentowy. Tworzenie z użyciem konstruktorów parametrycznych jest też możliwe drogą refleksji, jednak wymaga więcej dodatkowych operacji\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Adnotacje",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/AnnotationDemo.java": {
                  "name": "src/AnnotationDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Car{\n  String name;\n\n  public Car(String name){\n    this.name \u003d name;\n  }\n\n  @Override\n  public String toString(){\n    return name;\n  }\n}\n\nclass AnnotationDemo{\n  public static void main(String[] args) {\n    System.out.println(new Car(\"Porsche\"));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eAdnotacje\u003c/h1\u003e\n\u003cp\u003e\nW wielu sytuacjach pojawia się konieczność przekazywania dodatkowych informacji na temat kodu. Ich funkcją nie jest komentowanie kodu ale sterowanie jego generacją przed kompilacją. Są to metadane, a więc dane opisujące sposób traktowania kodu. Nie wpływają na działanie programu, ale dają dodatkowe możliwości na generowanie kodu i są bardzo użyteczne w narzędziach programistycznych\n\u003c/p\u003e\n\u003cp\u003e\n    Ilustracją działania adnotacji jest poznana wcześniej adnotacja \u003csamp\u003e@Override\u003c/samp\u003e:\u003c/p\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Car{\n  String name;\n  public Car(String name){\n    this.name \u003d name;\n  }\n  @Override\n  public String toString(){\n    return name;\n  }\n}\n\nclass AdnotationDemo {\n  public static void main(String[] args) {\n    System.out.println(new Car(\"Porsche\"));\n  }\n}\n--\nPorsche\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Jej działanie polega na sprawdzeniu sygnatury metody znajdujące się pod nią czy jest identyczna z jakąkolwiek metodą odziedziczoną z klasy bazowej. Zobaczmy cos się stanie, gdy pomylimy sygnaturę tej funkcji przy pozostawieniu adnotacji:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Car{\n  String name;\n  public Car(String name){\n    this.name \u003d name;\n  }\n  @Override\n  public String toString(int a){\n    return name;\n  }\n}\n\nclass AdnotationDemo {\n  public static void main(String[] args) {\n    System.out.println(new Car(\"Porsche\"));\n  }\n}\n        \u003c/code\u003e\n    \u003c/pre\u003e\n\u003cp\u003eW większości środowisk IDE adnotacja zostanie zaznaczona z informacją, że funkcja nie nadpisuje żadnej metody z superklasy. Próba kompilacji programu\nspowoduje sygnalizację błędu:\u003c/p\u003e\n\u003cpre\u003e\n    Error:(6, 3) java: method does not override or implement a method from a supertype\n\u003c/pre\u003e\n\u003cp\u003eGdy usuniemy adnotację program się skompiluje i uruchomi, ale działanie będzie odmienne niż w pierwszym przykładzie, bo zostanie wywołana odzoedziczona z klasy \u003csamp\u003eObject\u003c/samp \u003e metoda \u003csamp\u003etoString()\u003c/samp\u003e, która wyświetli wartość referencji obiektu:\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Car{\n  String name;\n  public Car(String name){\n    this.name \u003d name;\n  }\n\n  public String toString(int a){\n    return name;\n  }\n}\n\nclass AdnotationDemo {\n  public static void main(String[] args) {\n    System.out.println(new Car(\"Porsche\"));\n  }\n}\n--\nCar@1540e19d\n        \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Z przykładów wynika, że adnotacje mogą kontrolować intencje programisty na poziomie generowania samego kodu źródłowego, ale informacje mogą zostać wykorzystane w czasie działania programu.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/CustomAnnotationDemo.java": {
                  "name": "src/CustomAnnotationDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.lang.annotation.*;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Default{\n  int value();\n}\n\n\nclass Person{\n  @Default(value \u003d 3)\n  int id;\n\n  private String name;\n\n  Person(String name, int id) {\n    this.name \u003d name;\n    this.id \u003d id;\n  }\n\n  @Override\n  public String toString(){\n    return name+\" \"+id;\n  }\n}\n\nclass MyFrameworkManager{\n  static final MyFrameworkManager MANAGER \u003d new MyFrameworkManager();\n  private Collection collection \u003d new ArrayList\u003c\u003e();\n\n  private MyFrameworkManager() {\n    System.out.println(\"MANAGER STARTS\");\n  }\n\n  public void addObject(Object o) throws IllegalAccessException {\n    processAnnotation(o);\n    collection.add(o);\n  }\n  private void processAnnotation(Object o) throws IllegalAccessException {\n    if (o \u003d\u003d null){\n      return;\n    }\n    if (o instanceof Person){\n        Person p \u003d (Person) o;\n        for (Field f: p.getClass().getDeclaredFields()){\n          if (f.getAnnotation(Default.class) instanceof Default \u0026\u0026 f.getType().getName().equals(\"int\") \u0026\u0026 f.getInt(p) \u003d\u003d 0){\n            f.setInt(p, f.getAnnotation(Default.class).value());\n          }\n        }\n    }\n  }\n\n  public void print(){\n    for (Object o:collection){\n      System.out.println(o);\n    }\n  }\n}\n\nclass Task {\n  public static void main(String[] args) throws IllegalAccessException {\n    Person adam \u003d new Person(\"ADAM\", 0);\n    MyFrameworkManager.MANAGER.addObject(adam);\n    MyFrameworkManager.MANAGER.print();\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n  \u003ch1\u003eTworzenie adnotacji\u003c/h1\u003e\n\u003cp\u003e\n  Adnotacje moga dotyczyć różnych elementów kodu źródłowego: pól, metod, klas. Po dodaniu mogą być przechowywane do określonego etapu cyklu opracowywania programu. Mogą być też dostępne w trakcie działania programu i odczytywane poprzez refleksję. Refleksja to metoda analizy wynikowego kodu programu i wydobywania informacji o klasach, metodach, polach a takze dołączonych do nich adnotacji.\u003c/p\u003e\n\u003cp\u003e\n  Mechanizm tworzenia i działania własnych adnotacji prześledzimy na przykładzie domyślnego inicjalizowania pól pod adnotacją. Jeśli pole nie zostanie jawnie zainicjalizowane przez programistę to zostanie jej nadana wartość z adnotacji. Adnotacja będzie działać dla klasy \u003csamp\u003ePerson\u003c/samp\u003e, dla pól typu \u003csamp\u003eint\u003c/samp\u003e.\n\u003c/p\u003e\n  \u003cp\u003e\n  Adnotacje w Java to interfejs poprzedzony znakiem @:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Default{\n  int value();\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Interfejs adnotacji posiada metody, których nazwa jest identyczna z nazwą arguemntu adnotacji. Przed deklaracja znajdująs się adnotacje określające:\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003csamp\u003eRetenction\u003c/samp\u003e - która określa jak długo jest przechowywana adnotacja w kodzie. Argumentami mogą być trzy stałe:\n      \u003cuL\u003e\n        \u003cli\u003e\n          \u003csamp\u003eRetentionPolicy.SOURCE \u003c/samp\u003e- adnotacja przechowywana jest w kodzie źródłowym.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003csamp\u003eRetencionPolicy.CLASS\u003c/samp\u003e - adnotacja jest przechowywana w pliku klasie w trakcie kompilacji, ale nie jest dostępna w trakcie wykonywania programu.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003csamp\u003eRetentionPolicy.RUNTIME\u003c/samp\u003e - adnotacja jest zachowywana i dostępna w trakcie wykonywania kodu maszynowego.\n        \u003c/li\u003e\n      \u003c/uL\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003csamp\u003eTarget\u003c/samp\u003e - która określa dla jakiego elementu kodu żródłowego jest przeznaczona:\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003csamp\u003eElementType.FIELD\u003c/samp\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003csamp\u003eElementType.METHOD\u003c/samp\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003csamp\u003eElementType.TYPE\u003c/samp\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003csamp\u003eElementType.CONSTRUCTOR\u003c/samp\u003e\n        \u003c/li\u003e\n\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\n\u003c/p\u003e\n  \u003cp\u003e\n    Aby skorzystać z adnotacji konieczne jest podanie jej nazwy argumentu i wartości:\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Person{\n  @Default(value \u003d 3)\n  int id;\n\n  private String name;\n\n  Person(){\n  }\n\n  Person(String name, int id) {\n    this.name \u003d name;\n    this.id \u003d id;\n  }\n\n  @Override\n  public String toString(){\n    return name+\" \"+id;\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eJeśli nowy obiekt klasy zainicjujemy wartościa 0, to adnotacja powinna automatycznie przypisać wartość podaną w parametrze \u003csamp\u003evalue\u003c/samp\u003e. Jeśli wartość pola będzie inna to adnotacja nie powinna nic zmienić:\u003c/p\u003e\n\u003cp\u003e\n  Nie mamy możliwości aby, nasza adnotacja działała dla każdej dowolnej klasy, musimy samodzielnie określić moment jej zadziałania. W naszym przykładzie zdefiniujemy klasę udającą framework, który będzie przechowywał obiekty. W chwili dodania obiektu typu Person nasz adnotacja powinna zadziałać\n\u003c/p\u003e\n\u003cp\u003e\n  \u003cpre\u003e\n  \u003ccode\u003e\n\nclass MyFrameworkManager{\n  static final MyFrameworkManager MANAGER \u003d new MyFrameworkManager();\n  private Collection collection \u003d new ArrayList\u003c\u003e();\n\n  private MyFrameworkManager() {\n    System.out.println(\"MANAGER STARTS\");\n  }\n\n  public void addObject(Object o) throws IllegalAccessException {\n    processAnnotation(o);\n    collection.add(o);\n  }\n\n  private void processAnnotation(Object o) throws IllegalAccessException {\n    if (o \u003d\u003d null){\n      return;\n    }\n    if (o instanceof Person){\n      Person p \u003d (Person) o;\n      //przeglądamy pola obiektu\n      for (Field f: p.getClass().getDeclaredFields()){\n        //testujemy pole czy ma adnotacje Default, jest typu int i ma wartość równą 0\n        if (f.getAnnotation(Default.class) instanceof Default \u0026\u0026 f.getType().getName().equals(\"int\") \u0026\u0026 f.getInt(p) \u003d\u003d 0){\n          //przypisujemy polu wartość z adnotacji\n          f.setInt(p, f.getAnnotation(Default.class).value());\n        }\n      }\n    }\n  }\n\n  public void print(){\n    for (Object o:collection){\n      System.out.println(o);\n    }\n  }\n}\n    \u003c/code\u003e\n  \u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Najistotniejszą jest metoda \u003csamp\u003eprocessAnnotation\u003c/samp\u003e, w której przeglądamy przez refleksję pola obiektu klasy \u003csamp\u003ePerson\u003c/samp\u003e poszukując takiego, które posiada adnotację typu \u003csamp\u003eDefault\u003c/samp\u003e. Po przetestowaniu czy jest typu całkowitego i jego wartość jest równa 0 nadajemy temu polu wartość argumentu adnotacji\n\u003c/p\u003e\n\u003cp\u003e\n  Na koniec przykład działania naszej adnotacji\n\u003c/p\u003e\n\u003cpre\u003e\n  \u003ccode\u003e\nclass Task {\n  public static void main(String[] args) throws IllegalAccessException {\n    Person adam \u003d new Person(\"ADAM\", 0);\n    MyFrameworkManager.MANAGER.addObject(adam);\n    MyFrameworkManager.MANAGER.print();\n  }\n}\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Efektem programu jest wygenerowany napis:\n\u003c/p\u003e\n\u003cpre\u003e\n  MANAGER STARTS\n  ADAM 3\n\u003c/pre\u003e\n\u003cp\u003e\n  Obiekt choć został utworzony z polem id równym zero, to andotacja zadziałała zmieniając je na wartość domyślną.\n\u003c/p\u003e\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eWbudowane adnotacje\u003c/h1\u003e\n\u003cp\u003e\n    Język Java posiada zbiór wbudowanych adnotacji. Oprócz poznanych adotacji służących do definiowania własnych, znajduję sią też kilka innych:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n       \u003ccode\u003e@Override\u003c/code\u003e - adnotacja do sygnalizacji, że metoda pod nią jest przykrywana\n        z klasy bazowej\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003e@Deprecated\u003c/code\u003e - adnotacja do sygnalizacji, że deklaracja jest przestarzała\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003e@SupressWarnings\u003c/code\u003e - adnotacja wstrzymująca generowanie podanych ostrzeżeń kompilatora\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003e@SafeVarargs\u003c/code\u003e - adnotacja metod, które korzystaja w sposób bezpieczny z prametru typu \u003csamp\u003evararg\u003c/samp\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nW praktyce korzystania z framworków, szczególnie do tworzenia aplikacji back-endu, korzystanie z andotacji jest nieodłacznym elementem pracy. Są to adnotacje specyficzne dla danego narzędzia i ich poznanie jest konieczne, aby móc korzystać z tego typu narzędzi.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "I-O i NEW I-O",
          "task_list": [
            {
              "name": "Cześć 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  //put your task here\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Elementy współbieżności",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.awt.*;\nimport java.util.concurrent.ArrayBlockingQueue;\n\nclass MagicBox{\n  private ArrayBlockingQueue\u003cInteger\u003e monitor \u003d new ArrayBlockingQueue\u003c\u003e(1);\n  private Rectangle border;\n\n  public MagicBox(Rectangle rect){\n    this.border \u003d rect;\n  }\n\n  public void enter(int n) throws InterruptedException {\n    monitor.put(1);\n    System.out.println(\"Kulka nr \"+n + \" wchodzi do środka\");\n  }\n\n  public void exit(int n) throws InterruptedException {\n    monitor.take();\n    System.out.println(\"Kulka nr \" + n + \" wychodzi ze środka\");\n  }\n\n  public boolean isInside(int x, int y){\n    return border.contains(x, y);\n  }\n}\n\nclass Ball implements Runnable{\n  private int x, y;\n  private boolean isRunning \u003d true;\n  private MagicBox box;\n  private boolean isInside \u003d false;\n  private int number;\n\n  public Ball(MagicBox box, int number){\n    this.box \u003d box;\n    this.number \u003d number;\n  }\n  @Override\n  public void run() {\n    while (isRunning){\n      x \u003d (int)(11*Math.random());\n      y \u003d (int)(11*Math.random());\n      try {\n        if (box.isInside(x, y) \u0026\u0026 !isInside) {\n          System.out.println(\"Kulka nr \" + number +\" chce wejść do środka\");\n          box.enter(number);\n          isInside \u003d true;\n        }\n        if (!box.isInside(x, y) \u0026\u0026 isInside) {\n          box.exit(number);\n          isInside \u003d false;\n        }\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      System.out.println(\"Kulka nr \" + number +\" \"+x+\" \"+y);\n    }\n  }\n\n  public void stop(){\n    isRunning \u003d false;\n  }\n}\n\npublic class Task {\n\n  public static void main(String[] args) {\n    MagicBox box \u003d new MagicBox(new Rectangle(10,10));\n    Thread[] balls \u003d new Thread[10];\n    for (int i \u003d 0; i \u003c balls.length; i++){\n      balls[i] \u003d new Thread(new Ball(box, i+1));\n      balls[i].start();\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003cH1\u003eWstęp\u003c/H1\u003e\n\u003cp\u003eWspółbieżność oznacza wykonywanie co najmniej dwóch ciągów instrukcji w tym samym czasie. Jeśli\nciągi instrukcji wykonywane są w tym samym programie, to każdy z ciągów jest wątkiem. Jeśli wątki nie zawierają instrukcji, które wpływają na działanie pozostałych wątków, to wątki wykonują się równolegle. Gdy część instrukcji wątku może wpłynąć na działanie pozostałych wątków do wątki wykonują się konkurecyjnie.\u003c/p\u003e\n\u003cp\u003eWspółbieżność konkurencyjną można porównać do torów i pociągów. Tor to ciąg instrukcji wątku, pociąg to\naktualnie wykonywana instrukcja wątku. Jeśli dwa tory łączą się ze sobą na pewnym odcinku, to oba pociągi będą musiały ten odcinek przejechać. Może wtedy dojść do kolizji, gdy oba pociągi znajdą się dokładnie tuż przed\nwjazdem na wspólny odcinek. Aby zapewnić bezpieczeństwo trzeba tak zorganizować jazdę obu pociągów, aby w czasie przejazsu przez wspólny odcinek, pozostałe nie mogły na ten odcinek wjechać.\n\u003c/p\u003e\nOdpowiednikiem wspólnego odcinka torów jest tzw. sekcja krytyczna wątku, pozostałe instukcje stanowią\ntzw. sekcję lokalną. Zablokowanie możliwości wykonywania sekcji krytycznej przez więcej niż jeden wątek\nnazywane jest wzajemnym wykluczaniem lub synchronizowaniem.\n\u003c/p\u003e\n\u003cp\u003e\n  Współbieżność może być różnie realizowana: wątki mogą wyć wykonywane w tym samym czasie na różnych procesorach, rdzeniach, mogą być też wykonywane ciągle na tym samym procesorze, który przełącza wykonywane instrukcje\n    kolejnych wątków. Niezależnie od metody realizacji wpsółbieżności zakładamy, że:\n    \u003cul\u003e\n    \u003cli\u003e\n        wątki wykonywane są w przeplocie na jednej maszynie, procesorze, rdzeniu, polegającym na\n        przemiennych wykonywaniu instrukcji należących do różnych wątków\n    \u003c/li\u003e\n    \u003cli\u003e\n        przeplatane są\n    \u003c/li\u003e\n    \u003cli\u003e\n        wszystkie instrukcje wątków trwają tyle samo,\n    \u003c/li\u003e\n    \u003cli\u003e\n        nic nie wiemy o kolejności przeplatanych instrukcji, ale zakładamy uczciwość przeplotu co\n        znaczy, że każdy wątek kiedyś wykona swój kod.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Najczęściej sekcję krytyczną stanowią te fragmenty wątków, które odnoszą się do wspólnego zasobu. Może\n    to być wspólna zmienna, plik, baza danych, łącze sieciowe itd.\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 2",
              "stepic_id": 0,
              "task_files": {
                "src/RunnableDemo.java": {
                  "name": "src/RunnableDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class MessageRunnable implements Runnable{\n  private int pause;\n  private String message;\n  public MessageRunnable(String message, int pause){\n    this.pause \u003d pause;\n    this.message \u003d message;\n  }\n\n  @Override\n  public void run() {\n    int count \u003d 20;\n    while(count-- \u003e 0){\n      try {\n        Thread.sleep(pause);\n        System.out.println(message);\n      } catch (InterruptedException e) {\n\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU\");\n  }\n}\npublic class RunnableDemo {\n  public static void main(String[] args) {\n    MessageRunnable messageThread \u003d new MessageRunnable(\"UWAGA!!!\", 500);\n    Thread thread1 \u003d new Thread(messageThread);\n    Thread thread2 \u003d new Thread(new MessageRunnable(\"STOP!!!\", 300));\n\n    thread1.start();\n    thread2.start();\n  }\n}\n"
                },
                "src/ThreadDemo.java": {
                  "name": "src/ThreadDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\nclass MessageThread extends Thread{\n  private String message;\n  private int pause;\n\n  public MessageThread(String message, int pasue){\n    this.message \u003d message;\n    this.pause \u003d pasue;\n  }\n\n  @Override\n  public void run() {\n    int count \u003d 20;\n    while(count-- \u003e 0){\n      try {\n        Thread.sleep(pause);\n        System.out.println(message);\n      } catch (InterruptedException e) {\n\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU\");\n  }\n}\n\nclass ThreadDemo {\n  public static void main(String[] args) {\n    Scanner scan \u003d new Scanner(System.in);\n    MessageThread thread1 \u003d new MessageThread(\"UWAGA!\", 200);\n    MessageThread thread2 \u003d new MessageThread(\"STOP!\", 300);\n    thread1.start();\n    thread2.start();\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eTworzenie wątków\u003c/h1\u003e\n\u003cp\u003e\nWątki to funkcje, metody. Ponieważ w Java funkcje moga być definiowane tylko w klasach, dlatego wątki będą obiektami z metodą.\n\u003c/p\u003e\n\u003cp\u003e\n    Każdy program w Java posiada co najmniej jeden wątek. Funkcja \u003csamp\u003emain\u003c/samp\u003e wykonywana jest w wątku głównym.\u003c/p\u003e\n\u003cp\u003e\n    Klasą do tworzenia wątków jest \u003csamp\u003eThread\u003c/samp\u003e, która posiada metodę\n    \u003csamp\u003erun\u003c/samp\u003e. W metodzie tej umieszczamy kod, który będzie wykonywany w wątku. Tworząc własny wątek możemy zdefiniować własną klasę dziedziczącą \u003csamp\u003eThread\u003c/samp\u003e, w której należy zdefiniowć metodę \u003csamp\u003erun()\u003c/samp\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass MessageThread extends Thread{\n  private String message;\n  private int pause;\n\n  public MessageThread(String message, int pasue){\n    this.message \u003d message;\n    this.pause \u003d pasue;\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(pause);\n        System.out.println(message);\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU\");\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Nasza klasa może posiadać pola czy dodatkowe metody w zakeżności od potrzeb. W przykładzie pole \u003csamp\u003emessage\u003c/samp\u003e przechowuje komunikat, który będzie wyświetlany w odstępach czasu \u003csamp\u003epause\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nTworzenie wątku to utworzenie isntacji nasze klasy, a uruchomienie wątku to wywołanie metody \u003csamp\u003estart()\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nMessageThread thread \u003d new MessageThread(\"UWAGA\", 5000);\nthread.start();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    W chwili wywołania metody \u003csamp\u003estart()\u003c/samp\u003e następuje uruchomienie wątku i przekazanie sterowania do następnej instrukcji. Jest to zaburzenie dotychczasowych naszych przyzwyczajeń, że następna instrukcja jest wykonywanyna, gdy poprzednia się zakończyła. W tym przypadku wywołanie \u003csamp\u003estart()\u003c/samp\u003e powoduje, że równocześnie wykonywane są instrukcje naszego wątku i instrukcje w wątku, który wywołał metodę \u003csamp\u003estart()\u003c/samp\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nDrugą metodą tworzenia wątków jest definiowanie klas impelmentujących interfejs \u003csamp\u003eRunnable\u003c/samp\u003e, który ma zdefiniowaną metodę \u003csamp\u003erun\u003c/samp\u003e. Nasza klasa będzie zmuszona zaimplementować tę metodę.\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass MessageRunnable implements Runnable{\n  private String message;\n  private int pause;\n\n  public MessageRunnable(String message, int pause){\n    this.message \u003d message;\n    this.pause \u003d pause;\n  }\n\n  @Override\n  public void run() {\n    while(!Thread.currentThread().isInterrupted()){\n      try {\n        Thread.sleep(pause);\n      } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n      }\n      System.out.println(message);\n    }\n    System.out.println(\"KONIEC WĄTKU\");\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Zaletą tego sposobu jest możliwość tworzenia własnych klas wątków, które rozszerzają inne klasy, a nie klasę \u003csamp\u003eThread\u003c/samp\u003e. Ponieważ w takiej klasie nie mamy dostępu do odziedziczonych metod \u003csamp\u003eThread\u003c/samp\u003e, więc musimy korzystać z metod statycznych tej klasy, aby móc wykonać operacje. Metoda \u003csamp\u003eThread.currentThread\u003c/samp\u003e zwraca obiekt bieżącego wątku, w posługując się nim możemy przetestować, czy nastąpiło przerwanie wątku\n\u003c/p\u003e\n\u003cp\u003e\n    Z przedstawionych przykładów wynika, że wątek to metoda, w której najczęściej w pętli wykonujemy ciąg instrukcji\n\u003c/p\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 3",
              "stepic_id": 0,
              "task_files": {
                "src/InterruptDemo.java": {
                  "name": "src/InterruptDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\nclass CounterThread extends Thread{\n  private int pause;\n  private int counter;\n  public CounterThread(int pasue){\n    this.pause \u003d pasue;\n    this.counter \u003d 0;\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(pause);\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n}\n\nclass InterruptDemo {\n  public static void main(String[] args) {\n    CounterThread count1 \u003d new CounterThread(400);\n    CounterThread count2 \u003d new CounterThread(600);\n    count1.start();\n    count2.start();\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz cokolwiek, żeby zakończyć program\");\n    String query \u003d scan.next();\n    count1.interrupt();\n    count2.interrupt();\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eKlasa Thread\u003c/h1\u003e\n\u003cp\u003eKlasa \u003csamp\u003eThread\u003c/samp\u003e jest klasą bazową do tworzenia wątków. Posiada kilka istotnym metod:\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003egetName()\u003c/code\u003e - zwraca nazwę wątku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003egetPriority()\u003c/code\u003e - pobiera priorytet wątku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eisAlive()\u003c/code\u003e - testuje, czy wątek nadal działa\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003ejoin()\u003c/code\u003e - czeka na zakończenie wątku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003erun()\u003c/code\u003e - metoda zawierająca kod wątku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003esleep()\u003c/code\u003e - uśpienie wątku na określony argumentem czas\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003estart()\u003c/code\u003e - uruchomienie metody run() jako osobny wątek programu\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003einterrupt()\u003c/code\u003e - wysyła sygnał przerwania wątku\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eisInterrupted()\u003c/code\u003e - wysyła sygnał przerwania wątku\n    \u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\u003cp\u003e\n    Gdy tworzymy wątek implementując interfejs \u003csamp\u003eRunnable\u003c/samp\u003e mżemy uzyskać dostęp do bieżącego wątku metodą statyczną klasy:\n    \u003cul\u003e\n    \u003cli\u003e\n        \u003ccode\u003eThread.CurrentThread()\u003c/code\u003e - zwraca bieżący wątek, czyli wątek, w którym została wywołana\n    \u003c/li\u003e\n\u003c/ul\u003e\nMając referencję do obiektu klasy \u003csamp\u003eThread\u003c/samp\u003e, możemy korzystać z wymienionych wcześniej metod klasy.\n\u003c/p\u003e\n\u003cp\u003e\n    W większości sytuacji wątki tworzy się w dwóch sytuacjach:\n    \u003cul\u003e\n    \u003cli\u003e\n        Wywołanie jednej długotrwającej akcji np. pobieranie danych z serwera, zapis do pliku, której przerwanie niweczy całe zadanie\n    \u003c/li\u003e\n    \u003cli\u003e\n        Wykonywanie w pętli powtarzalnych operacji, np. obliczeń, których przerwanie nie musi oznaczać utraty efektów dotychczasowej pracy wątku np. przerwanie wątku pozwalana uzyskanie wyników obliczeń z większym błędem.\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    Gdy wątek wykonuje kod w pętli i jest usypiany, typowym schematem realizacji rutynowego przerwania wątku jest poniższy schemat:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nclass CounterThread extends Thread{\n  private int pause;\n  private int counter;\n\n  public CounterThread(int pasue){\n    this.pause \u003d pasue;\n    this.counter \u003d 0;\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(pause);\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Metoda \u003csamp\u003eisInterrupted()\u003c/samp\u003e testuje, czy wysłano sygnał przerwania wątku. Testowanie\n    odbywa się przed wykonaniem kolejnej iteracji pętli, więc wątek zostanie zakończony w przewidywalnym miejscu. Sygnał przerwania może też został wysłany gdy wątek jest uśpiony, dlatego \"usypianie wątku\" musi być wykonywane w bloku \u003csamp\u003etry...catch\u003c/samp\u003eby w razie przerwania zgłosić wyjątek. Wystąpienie wyjątku usuwa sygnał przerwania, więc w obsłudze wyjątku ponawiamy przerwanie, co spowoduje, że przed wykonaniem następnej iteracji zostanie uwzględniony.\n\u003c/p\u003e\n\u003cp\u003e\nW utworzonym wątku zatrzymanie go w wybranym momencie polega na wywołaniu metody \u003csamp\u003einterrupt()\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nCounterThread thread \u003d new CounterThread(600);\nthread.start();\n...\nthread.interrupt();\n    \u003c/code\u003e\n\u003c/pre\u003e\n\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 4",
              "stepic_id": 0,
              "task_files": {
                "src/MethodSynchronizedDemo.java": {
                  "name": "src/MethodSynchronizedDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\nclass CounterSynchronized{\n  private int counter\u003d0;\n\n  public synchronized void set(int c) {\n    counter \u003d c;\n  }\n\n  public synchronized int get(){\n    return counter;\n  }\n}\n\n\nclass CounterThreadS extends Thread{\n  private CounterSynchronized commonCounter;\n  private int counter \u003d 0;\n\n  public CounterThreadS(CounterSynchronized counter){\n    this.commonCounter \u003d counter;\n\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(10);\n        commonCounter.set(commonCounter.get()+1);\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n\nclass MethodSynchronizedDemo {\n  public static void main(String[] args) {\n    Counter count \u003d new Counter();\n    CounterThread count1 \u003d new CounterThread(count);\n    CounterThread count2 \u003d new CounterThread(count);\n    count1.start();\n    count2.start();\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz cokolwiek, żeby zakończyć program\");\n    String query \u003d scan.next();\n    count1.interrupt();\n    count2.interrupt();\n    System.out.println(count.get() + \" \u003d \"+ (count1.get()+count2.get()));\n  }\n}"
                },
                "src/NotSynchronizedDemo.java": {
                  "name": "src/NotSynchronizedDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\n\nclass CounterNotSynchronized{\n  private int counter\u003d0;\n\n  public void set(int c){\n    counter \u003d c;\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n\n\nclass CounterThreadNotSynchronized extends Thread{\n  private CounterNotSynchronized commonCounter;\n  private int counter \u003d 0;\n\n  public CounterThreadNotSynchronized(CounterNotSynchronized counter){\n    this.commonCounter \u003d counter;\n\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(10);\n        commonCounter.set(commonCounter.get() + 1);\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n\nclass NotSynchronizedDemo {\n  public static void main(String[] args) {\n    CounterNotSynchronized count \u003d new CounterNotSynchronized();\n    CounterThreadNotSynchronized count1 \u003d new CounterThreadNotSynchronized(count);\n    CounterThreadNotSynchronized count2 \u003d new CounterThreadNotSynchronized(count);\n    count1.start();\n    count2.start();\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz cokolwiek, żeby zakończyć program\");\n    String query \u003d scan.next();\n    count1.interrupt();\n    count2.interrupt();\n    System.out.println(count.get() + \" \u003d \"+ (count1.get()+count2.get()));\n  }\n}"
                },
                "src/SynchronizedDemo.java": {
                  "name": "src/SynchronizedDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.Scanner;\nclass Counter{\n  private int counter\u003d0;\n\n  public void set(int c){\n    counter \u003d c;\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n\n\nclass CounterThread extends Thread{\n  private Counter commonCounter;\n  private int counter \u003d 0;\n\n  public CounterThread(Counter counter){\n    this.commonCounter \u003d counter;\n\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(10);\n        synchronized(commonCounter){\n          commonCounter.set(commonCounter.get()+1);\n        }\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n\nclass InterruptDemo {\n  public static void main(String[] args) {\n    Counter count \u003d new Counter();\n    CounterThread count1 \u003d new CounterThread(count);\n    CounterThread count2 \u003d new CounterThread(count);\n    count1.start();\n    count2.start();\n    Scanner scan \u003d new Scanner(System.in);\n    System.out.println(\"Wpisz cokolwiek, żeby zakończyć program\");\n    String query \u003d scan.next();\n    count1.interrupt();\n    count2.interrupt();\n    System.out.println(count.get() + \" \u003d \"+ (count1.get()+count2.get()));\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eSynchronizacja\u003c/h1\u003e\n\u003cp\u003eGdy wątki odwołują się do wspólnej zmiennej to następuje sytuacja konkurencji. Ponieważ zmienna może być modyfikowana tylko przez jeden wątek, to drugi musi zostać zablokowany do czasu zkończenia modyfikacji. Wymuszenie, aby wspólny fragment kilku wątków, mógł być wykonywane tylko przez jeden, nazywamy synchronizacją\u003c/p\u003e\n\u003cp\u003e\n    Do synchronizacji służą: blok sychronizowany lub metoda synchronizowana. Popatrzmy na przykład wątków, które modyfikują wspólny licznik klasy \u003csamp\u003eCounter\u003c/samp\u003e\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass CounterThread extends Thread{\n  private Counter commonCounter;\n  private int counter \u003d 0;\n\n  public CounterThread(Counter counter){\n    this.commonCounter \u003d counter;\n\n  }\n\n  @Override\n  public void run() {\n    while(!isInterrupted()){\n      try {\n        Thread.sleep(10);\n        synchronized(commonCounter){\n          commonCounter.set(commonCounter.get()+1);\n        }\n        counter++;\n      } catch (InterruptedException e) {\n        this.interrupt();\n      }\n    }\n    System.out.println(\"KONIEC WĄTKU. STAN LICZNIKA \" + counter);\n  }\n\n  public int get(){\n    return counter;\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n    Argumentem bloku \u003csamp\u003esynchronized\u003c/samp\u003e jest dowolny obiekt, który stanowi rodzaj zamka, blokady. Jeśli argumentem wszystkich wątków tworzonych na podstawie klasy CounterThread będzie ten sam obiekt \u003csamp\u003ecommonCounter\u003c/samp\u003e, to gdyby kilka wątków w tym czasie próbowało modyfikować ten obiekt, to w chwili gdy któryś wątek zajął już naszą blokadę, to pozostałe wątki zostaną wstrzymane. To gwarantuje,\n    że każda modyfikacja wspólnej zmiennej zostanie wykonana poprawnie, i stan wspólnego licznika będzie równy sumie\n    liczników obu wątków.\n\u003c/p\u003e\n\u003cp\u003e\n    Gdy usuniemy blok synchronizowany w kodzie wątku to łatwo się przekonać, że nastąpi różnica między stanem licznika wspólnego i sumą liczników obu wątków.\n\u003c/p\u003e\n\u003cp\u003e\n    Sytuację co się dzieje, gdy dwa wątki wykonnują ten sam krytyczny fragment w tym samym czasie przy braku synchronizacji, ilustruje poniższe zestawienie\n\u003c/p\u003e\n\u003cpre\u003e\ncount1 \u003d 2                                  count2 \u003d 3\nthread1                                     thread2\nx1 \u003d commonCounter.get()   [5]              x2 \u003d commonCounter.get()    [5]\nx1 \u003d x1 + 1                [6]              x2 \u003d x2 + 1                 [6]\ncommonCounter.set(x1)      [6]              commonCounter.set(x2)       [6]\ncount1 \u003d 3                                  count2 \u003d 4\nrzeczywisty stan licznika - 6\npowinno być               - count1 + count2 \u003d 7\n\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            },
            {
              "name": "Część 5",
              "stepic_id": 0,
              "task_files": {
                "src/CallableDemo.java": {
                  "name": "src/CallableDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.concurrent.*;\n\nclass Calculator implements Callable\u003cDouble\u003e {\n\n  @Override\n  public Double call() throws Exception {\n    double result \u003d 0;\n    int N \u003d 10000000;\n    for (int i \u003d 0; i \u003c N; i++){\n      result +\u003d Math.random();\n    }\n    return result/N;\n  }\n}\n\npublic class CallableDemo {\n  public static void main(String[] args) {\n\n    ExecutorService threadManager \u003d Executors.newFixedThreadPool(2);\n    Future\u003cDouble\u003e result1 \u003d threadManager.submit(new Calculator());\n    Future\u003cDouble\u003e result2 \u003d threadManager.submit(new Calculator());\n    threadManager.submit(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        System.out.println(\"END OF THREAD\");\n      }\n    });\n    try {\n      System.out.println(result1.get());\n      System.out.println(result2.get());\n      threadManager.shutdown();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    } catch (ExecutionException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "src/ExecutorDemo.java": {
                  "name": "src/ExecutorDemo.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "import java.util.concurrent.Executor;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nclass Task implements Runnable{\n  int n;\n  public Task(int n){\n    this.n \u003d n;\n  }\n\n  @Override\n  public void run() {\n    try {\n      for (int i \u003d 0; i \u003c 5; i++) {\n        Thread.sleep(200);\n        System.out.println(\" THREAD \" + n + \" ITERATION \"+ i);\n      }\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"END OF THREAD \"+n);\n  }\n}\n\nclass ExecutorDemo {\n  public static void main(String[] args) {\n    ExecutorService threadManager \u003d Executors.newFixedThreadPool(2);\n    System.out.println(\"START\");\n    threadManager.submit(new Thread(new Task(1)));\n    threadManager.submit(new Thread(new Task(2)));\n    threadManager.submit(new Thread(new Task(3)));\n    threadManager.submit(new Thread(new Task(4)));\n    threadManager.shutdown();\n    while(!threadManager.isShutdown()){\n      System.out.println(\"RUNNING\");\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\n\u003ch1\u003eEgzekutory\u003c/h1\u003e\n\u003cp\u003e\n    To obiekty służące do zarządzaniem i uruchamianiem wątków. Przykład poniżej ilustruje jak utworzyć ezgekutor i korzystać z niego:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n ExecutorService threadManager \u003d Executors.newFixedThreadPool(2);\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nUtworzony obiekt zarządza pulą składającą się dokładnie z dwóch wątków. Wielkość puli określa ile wątków jednocześnie zostanie uruchomionych. Gdy egzekutorowi przekazane zostaną cztery wątki to po wykonaniu dwóch pierwszych uruchomione zostaną dwa kolejne. Uruchomienie wątków wykonuje się metodą \u003csamp\u003esubmit(0\u003c/samp\u003e, a zakończenie pracy ezgekutora po wywołaniu \u003csamp\u003eshutdown()\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\n threadManager.submit(new Runnable() {\n  @Override\n  public void run() {\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"END OF THREAD\");\n  }\n});\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nW pliku ExecutorDemo zawarto przykład wykorzystania ezgekutor, a różnicę pracy można zauważyć zmieniając wilekość jego puli.\n\u003c/p\u003e\n\u003ch1\u003eKlasa Callable\u003c/h1\u003e\n\u003cp\u003e\n    Gdy wątek ma działanie funkcyjne, czyli po wykonaniu ma zwrócić jakąś wartość, obiekt, dorbrym rozwiązaniem jest wykorzystanie klasy \u003csamp\u003eCallable\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nclass Calculator implements Callable\u0026lt;Double\u0026gt; {\n\n  @Override\n  public Double call() throws Exception {\n    double result \u003d 0;\n    int N \u003d 100000000;\n    for (int i \u003d 0; i \u003c N; i++){\n      result +\u003d Math.random();\n    }\n    return result/N;\n  }\n}\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\n  Wartość obliczoną przez wątek przekazuje sie obiektu klasy parametrycznej \u003csamp\u003eFuture\u003c/samp\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\n    \u003ccode\u003e\nFuture\u0026lt;Double\u0026gt; result1 \u003d threadManager.submit(new Calculator());\n    \u003c/code\u003e\n\u003c/pre\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        },
        {
          "id": 0,
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "title": "Programowanie funkcyjne",
          "task_list": [
            {
              "name": "Część 1",
              "stepic_id": 0,
              "task_files": {
                "src/Task.java": {
                  "name": "src/Task.java",
                  "placeholders": [],
                  "is_visible": true,
                  "text": "class Task {\n  public static void main(String[] args) {\n    int a \u003d -5;\n    int b \u003d -5;\n    int c \u003d -5;\n    int d \u003d -5;\n    if (3*a \u003d\u003d b+c+d \u0026\u0026 3*b \u003d\u003d a+c+d \u0026\u0026 3*c \u003d\u003d a+b+d){\n      System.out.println(\"romb\");\n    } else {\n      System.out.println(\"nie romb\");\n    }\n  }\n}"
                }
              },
              "test_files": {
                "test/Test.java": "public class Test {\n    // put your test here\n}"
              },
              "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003cbr\u003e\n\u003cdiv class\u003d\"hint\"\u003e\n  You can add hints anywhere in task text. Copy all hint div block and change its content.\n\u003c/div\u003e\n\u003c/html\u003e",
              "description_format": "html",
              "additional_files": {},
              "update_date": "Jan 1, 1970 1:00:00 AM",
              "feedback_link": {
                "link_type": "STEPIK"
              },
              "task_type": "edu"
            }
          ],
          "unit_id": 0
        }
      ],
      "type": "section"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "task_files": {},
          "test_files": {},
          "description_format": "html",
          "additional_files": {
            "build.gradle": {
              "is_visible": false,
              "text": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: \u0027application\u0027\n    apply plugin: \u0027java\u0027\n\n    sourceCompatibility \u003d 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027\n    }\n\n    sourceSets {\n        main {\n            java.srcDir \u0027src\u0027\n        }\n        test {\n            java.srcDir \u0027test\u0027\n        }\n    }\n\n    mainClassName \u003d project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    test {\n        outputs.upToDateWhen { false }\n        afterTest { TestDescriptor test, TestResult result -\u003e\n            if (result.resultType \u003d\u003d TestResult.ResultType.FAILURE) {\n                def message \u003d result.exception?.message ?: \"Wrong answer\"\n                def lines \u003d message.readLines()\n                println \"#educational_plugin FAILED + \" + lines[0]\n                lines[1..-1].forEach { line -\u003e\n                    println \"#educational_plugin\" + line\n                }\n                // we need this to separate output of different tests\n                println\n            }\n        }\n    }\n\n    def runOutput \u003d new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(\u0027:util\u0027) {\n    dependencies {\n        compile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027\n    }\n}\n\nconfigure(subprojects.findAll {it.name !\u003d \u0027util\u0027}) {\n  dependencies {\n    compile project(\u0027:util\u0027).sourceSets.main.output\n    testCompile project(\u0027:util\u0027).sourceSets.test.output\n  }\n}\n\ntask wrapper(type: Wrapper) {\n  gradleVersion \u003d \u00274.8\u0027\n}\n"
            }
          },
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "unit_id": 0,
      "type": "lesson"
    }
  ],
  "version": 8
}